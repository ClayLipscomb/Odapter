DROP TABLE ODPT.odpt_table_cs_keyword CASCADE CONSTRAINTS;

CREATE TABLE ODPT.odpt_table_cs_keyword (
	abstract	VARCHAR2(4000),
	event		VARCHAR2(4000),
	new			VARCHAR2(4000),
	struct		VARCHAR2(4000),
	"as"		VARCHAR2(4000),
	explicit	VARCHAR2(4000),
	"null"		VARCHAR2(4000),
	switch		VARCHAR2(4000),
	base		VARCHAR2(4000),
	extern		VARCHAR2(4000),
	object		VARCHAR2(4000),
	this		VARCHAR2(4000),
	bool		VARCHAR2(4000),
	false		VARCHAR2(4000),
	operator	VARCHAR2(4000),
	throw		VARCHAR2(4000),
	break		VARCHAR2(4000),
	finally		VARCHAR2(4000),
	out			VARCHAR2(4000),
	true		VARCHAR2(4000),
    byte		VARCHAR2(4000),
	fixed		VARCHAR2(4000),
	override	VARCHAR2(4000),
	try			VARCHAR2(4000),
	case		VARCHAR2(4000),
	"float"		VARCHAR2(4000),
	params		VARCHAR2(4000),
	typeof		VARCHAR2(4000),
	catch		VARCHAR2(4000),
	"for"		VARCHAR2(4000),
	private		VARCHAR2(4000),
	uint		VARCHAR2(4000),
	"char"		VARCHAR2(4000),
	foreach		VARCHAR2(4000),
	protected	VARCHAR2(4000),
	ulong		VARCHAR2(4000),
	checked		VARCHAR2(4000),
	goto		VARCHAR2(4000),
	"public"	VARCHAR2(4000),
    unchecked	VARCHAR2(4000),
	class		VARCHAR2(4000),
	if			VARCHAR2(4000),
	readonly	VARCHAR2(4000),
	unsafe		VARCHAR2(4000),
	const		VARCHAR2(4000),
	implicit	VARCHAR2(4000),
	ref			VARCHAR2(4000),
	ushort		VARCHAR2(4000),
	continue	VARCHAR2(4000),
	"in"		VARCHAR2(4000),
	return		VARCHAR2(4000),
	using		VARCHAR2(4000),
	"decimal"	VARCHAR2(4000),
	int			VARCHAR2(4000),
	sbyte		VARCHAR2(4000),
	virtual		VARCHAR2(4000),
	"default"	VARCHAR2(4000),
	interface	VARCHAR2(4000),
    sealed		VARCHAR2(4000),
	volatile	VARCHAR2(4000),	
	delegate	VARCHAR2(4000),
	internal	VARCHAR2(4000),
	short		VARCHAR2(4000),
	void		VARCHAR2(4000),
	do			VARCHAR2(4000),
	"is"		VARCHAR2(4000),
	sizeof		VARCHAR2(4000),
	while		VARCHAR2(4000),
	double		VARCHAR2(4000),
	"lock"		VARCHAR2(4000),
	stackalloc	VARCHAR2(4000),
    "else"		VARCHAR2(4000),
	"long"		VARCHAR2(4000),
	static		VARCHAR2(4000),
	enum		VARCHAR2(4000),
    namespace	VARCHAR2(4000),
	string		VARCHAR2(4000),
    dynamic		VARCHAR2(4000),
	get			VARCHAR2(4000),
	let			VARCHAR2(4000),
	partial		VARCHAR2(4000),		
	"set"		VARCHAR2(4000),
	value		VARCHAR2(4000),	
	var			VARCHAR2(4000),
	"where"		VARCHAR2(4000)
);