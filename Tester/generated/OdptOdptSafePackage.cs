//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by Odapter 2.01.
//     Direct edits will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using Oracle.ManagedDataAccess.Client;
using Oracle.ManagedDataAccess.Types;
using System.Collections;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Serialization;
using System.Linq;
using Odapter;

namespace Schema.Odpt.Odpt.Safe.Package {

    public sealed partial class OdptPkgEmpty : Schema.Odpt.Odpt.Safe.OdptAdapter {
        private OdptPkgEmpty() { }
        private static readonly OdptPkgEmpty _instance = new OdptPkgEmpty();
        public static OdptPkgEmpty Instance { get { return _instance; } }
    } // OdptPkgEmpty

    public sealed partial class OdptPkgIncludeexclamationpointchar : Schema.Odpt.Odpt.Safe.OdptAdapter {
        private OdptPkgIncludeexclamationpointchar() { }
        private static readonly OdptPkgIncludeexclamationpointchar _instance = new OdptPkgIncludeexclamationpointchar();
        public static OdptPkgIncludeexclamationpointchar Instance { get { return _instance; } }
    } // OdptPkgIncludeexclamationpointchar

    public sealed partial class OdptPkgIncludepercentchar : Schema.Odpt.Odpt.Safe.OdptAdapter {
        private OdptPkgIncludepercentchar() { }
        private static readonly OdptPkgIncludepercentchar _instance = new OdptPkgIncludepercentchar();
        public static OdptPkgIncludepercentchar Instance { get { return _instance; } }
    } // OdptPkgIncludepercentchar

    public sealed partial class OdptPkgIncludeampersandchar : Schema.Odpt.Odpt.Safe.OdptAdapter {
        private OdptPkgIncludeampersandchar() { }
        private static readonly OdptPkgIncludeampersandchar _instance = new OdptPkgIncludeampersandchar();
        public static OdptPkgIncludeampersandchar Instance { get { return _instance; } }
    } // OdptPkgIncludeampersandchar

    public sealed partial class OdptPkgLog : Schema.Odpt.Odpt.Safe.OdptAdapter {
        private OdptPkgLog() { }
        private static readonly OdptPkgLog _instance = new OdptPkgLog();
        public static OdptPkgLog Instance { get { return _instance; } }

        public void DeleteLog(SByte? pSeverity, OracleTimeStamp? pToDate, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.DELETE_LOG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SEVERITY", OracleDbType.Byte, pSeverity, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_TO_DATE", OracleDbType.TimeStamp, pToDate, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DeleteLog

        public void GetDistinctCriteria(out IList<String> pSources, out IList<String> pInterfaces, out IList<String> pUserNames, OracleDecimal? pMaxAgeInDays = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            pSources = new List<String>(); pInterfaces = new List<String>(); pUserNames = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.GET_DISTINCT_CRITERIA", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("P_SOURCES", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_SOURCES"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_SOURCES"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_SOURCES"].ArrayBindSize[_i] = 100; }

                    __cmd.Parameters.Add(new OracleParameter("P_INTERFACES", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_INTERFACES"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_INTERFACES"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_INTERFACES"].ArrayBindSize[_i] = 200; }

                    __cmd.Parameters.Add(new OracleParameter("P_USER_NAMES", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_USER_NAMES"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_USER_NAMES"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_USER_NAMES"].ArrayBindSize[_i] = 128; }
                    if (pMaxAgeInDays != null) __cmd.Parameters.Add(new OracleParameter("P_MAX_AGE_IN_DAYS", OracleDbType.Decimal, pMaxAgeInDays, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    pSources = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_SOURCES"].Value as OracleString[]).Length; _i++)
                        pSources.Add((__cmd.Parameters["P_SOURCES"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_SOURCES"].Value as OracleString[])[_i].ToString())));

                    pInterfaces = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_INTERFACES"].Value as OracleString[]).Length; _i++)
                        pInterfaces.Add((__cmd.Parameters["P_INTERFACES"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_INTERFACES"].Value as OracleString[])[_i].ToString())));

                    pUserNames = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_USER_NAMES"].Value as OracleString[]).Length; _i++)
                        pUserNames.Add((__cmd.Parameters["P_USER_NAMES"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_USER_NAMES"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // GetDistinctCriteria

        public ICollection<TypeReturnUntyped> GetLog<TypeReturnUntyped>(OracleTimeStamp? pLogDtFrom = null, OracleTimeStamp? pLogDtTo = null, String pUserName = null, String pInterface = null, 
                SByte? pSeverity = null, String pSource = null, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeReturnUntyped : class, new() {
            ICollection<TypeReturnUntyped> __ret = new List<TypeReturnUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.GET_LOG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    if (pLogDtFrom != null) __cmd.Parameters.Add(new OracleParameter("P_LOG_DT_FROM", OracleDbType.TimeStamp, pLogDtFrom, ParameterDirection.Input));
                    if (pLogDtTo != null) __cmd.Parameters.Add(new OracleParameter("P_LOG_DT_TO", OracleDbType.TimeStamp, pLogDtTo, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));
                    if (pSeverity != null) __cmd.Parameters.Add(new OracleParameter("P_SEVERITY", OracleDbType.Byte, pSeverity, ParameterDirection.Input));
                    if (pSource != null) __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeReturnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetLog

        public DataTable GetLog(OracleTimeStamp? pLogDtFrom = null, OracleTimeStamp? pLogDtTo = null, String pUserName = null, String pInterface = null, 
                SByte? pSeverity = null, String pSource = null, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.GET_LOG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    if (pLogDtFrom != null) __cmd.Parameters.Add(new OracleParameter("P_LOG_DT_FROM", OracleDbType.TimeStamp, pLogDtFrom, ParameterDirection.Input));
                    if (pLogDtTo != null) __cmd.Parameters.Add(new OracleParameter("P_LOG_DT_TO", OracleDbType.TimeStamp, pLogDtTo, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));
                    if (pSeverity != null) __cmd.Parameters.Add(new OracleParameter("P_SEVERITY", OracleDbType.Byte, pSeverity, ParameterDirection.Input));
                    if (pSource != null) __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetLog

        public void GetSeverity(out IList<SByte?> pSeverities, out IList<String> pSeverityDescriptions, OracleConnection optionalPreexistingOpenConnection = null) {
            pSeverities = new List<SByte?>(); pSeverityDescriptions = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.GET_SEVERITY", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("P_SEVERITIES", OracleDbType.Byte, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_SEVERITIES"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_SEVERITY_DESCRIPTIONS", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].ArrayBindSize[_i] = 10; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    pSeverities = new List<SByte?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_SEVERITIES"].Value as OracleDecimal[]).Length; _i++)
                        pSeverities.Add((__cmd.Parameters["P_SEVERITIES"].Value as OracleDecimal[])[_i].IsNull
                            ? (SByte?)null 
                            : Convert.ToSByte(((__cmd.Parameters["P_SEVERITIES"].Value as OracleDecimal[])[_i].ToString())));

                    pSeverityDescriptions = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].Value as OracleString[]).Length; _i++)
                        pSeverityDescriptions.Add((__cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // GetSeverity

        public void InsertLog(SByte? pSeverity, String pSource, String pMsg, String pUserName = null, 
                String pInterface = null, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.INSERT_LOG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SEVERITY", OracleDbType.Byte, pSeverity, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // InsertLog

        public void InsertLogDebug(String pSource, String pMsg, String pUserName = null, String pInterface = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.INSERT_LOG_DEBUG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // InsertLogDebug

        public void InsertLogError(String pSource, String pMsg, String pUserName = null, String pInterface = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.INSERT_LOG_ERROR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // InsertLogError

        public void InsertLogInfo(String pSource, String pMsg, String pUserName = null, String pInterface = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.INSERT_LOG_INFO", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // InsertLogInfo

        public void InsertLogWarning(String pSource, String pMsg, String pUserName = null, String pInterface = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.INSERT_LOG_WARNING", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // InsertLogWarning

        public void LogMsg(String pPkg, String pProc, String pMsg, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.LOG_MSG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_PKG", OracleDbType.Varchar2, pPkg, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PROC", OracleDbType.Varchar2, pProc, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // LogMsg

        public void SetLogOff(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.SET_LOG_OFF", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // SetLogOff

        public void SetLogOn(OracleDecimal? pMethod = null, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.SET_LOG_ON", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    if (pMethod != null) __cmd.Parameters.Add(new OracleParameter("P_METHOD", OracleDbType.Decimal, pMethod, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // SetLogOn

        public SByte? TypeSeverityDebug(OracleConnection optionalPreexistingOpenConnection = null) {
            SByte? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.TYPE_SEVERITY_DEBUG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Byte, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (SByte?)null
                        : Convert.ToSByte(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // TypeSeverityDebug

        public SByte? TypeSeverityError(OracleConnection optionalPreexistingOpenConnection = null) {
            SByte? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.TYPE_SEVERITY_ERROR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Byte, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (SByte?)null
                        : Convert.ToSByte(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // TypeSeverityError

        public SByte? TypeSeverityInfo(OracleConnection optionalPreexistingOpenConnection = null) {
            SByte? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.TYPE_SEVERITY_INFO", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Byte, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (SByte?)null
                        : Convert.ToSByte(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // TypeSeverityInfo

        public SByte? TypeSeverityWarning(OracleConnection optionalPreexistingOpenConnection = null) {
            SByte? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.TYPE_SEVERITY_WARNING", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Byte, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (SByte?)null
                        : Convert.ToSByte(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // TypeSeverityWarning
    } // OdptPkgLog

    public sealed partial class OdptPkgMain : Schema.Odpt.Odpt.Safe.OdptAdapter {
        private OdptPkgMain() { }
        private static readonly OdptPkgMain _instance = new OdptPkgMain();
        public static OdptPkgMain Instance { get { return _instance; } }

        // **RECORD IGNORED** - .NET cannot send/receive an associative array type field in a record
        // public interface ITIgnoreAaInteger {

        // **RECORD IGNORED** - Code generation for BFILE type has not been implemented
        // public interface ITIgnoreBfile {

        // **RECORD IGNORED** - .NET cannot send/receive a PL/SQL BOOLEAN type
        // public interface ITIgnoreBoolean {

        // **RECORD IGNORED** - Code generation for LONG type will not be implemented due to Oracle deprecation
        // public interface ITIgnoreLong {

        // **RECORD IGNORED** - Code generation for LONG RAW type will not be implemented due to Oracle deprecation
        // public interface ITIgnoreLongRaw {

        // **RECORD IGNORED** - Code generation for RAW type has not been implemented
        // public interface ITIgnoreRaw {

        // **RECORD IGNORED** - Code generation for ROWID type has not been implemented
        // public interface ITIgnoreRowid {

        // **RECORD IGNORED** - Code generation for UROWID type has not been implemented
        // public interface ITIgnoreUrowid {

        // **RECORD IGNORED** - XMLTYPE type is not available in ODP.NET managed
        // public interface ITIgnoreXmltype {

        public interface ITRecFldSameName {
            OracleDecimal? FNumber { set; }
            OracleDecimal? TRecFldSameNameTRecFldSameName { set; }
        } // ITRecFldSameName

        public ICollection<TypeITRecFldSameName> ReadResultITRecFldSameName<TypeITRecFldSameName>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where TypeITRecFldSameName : class, ITRecFldSameName, new() {
            ICollection<TypeITRecFldSameName> __ret = new List<TypeITRecFldSameName>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    TypeITRecFldSameName obj = new TypeITRecFldSameName();
                    if (!rdr.IsDBNull(0)) obj.FNumber = (OracleDecimal?)rdr.GetOracleValue(0);
                    if (!rdr.IsDBNull(1)) obj.TRecFldSameNameTRecFldSameName = (OracleDecimal?)rdr.GetOracleValue(1);
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITRecFldSameName

        public void DupSignature1(OracleDecimal? pParamIn1, ref OracleDecimal? pParamInOut1, out OracleDecimal? pParamOut1, OracleConnection optionalPreexistingOpenConnection = null) {
            pParamOut1 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN1", OracleDbType.Decimal, pParamIn1, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT1", OracleDbType.Decimal, pParamInOut1, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT1", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pParamInOut1 = __cmd.Parameters["P_PARAM_IN_OUT1"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_IN_OUT1"].Value;
                    pParamOut1 = __cmd.Parameters["P_PARAM_OUT1"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_OUT1"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DupSignature1

        public void DupSignature2(OracleDecimal? pParamIn2, ref OracleDecimal? pParamInOut2, out OracleDecimal? pParamOut2, OracleConnection optionalPreexistingOpenConnection = null) {
            pParamOut2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN2", OracleDbType.Decimal, pParamIn2, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT2", OracleDbType.Decimal, pParamInOut2, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT2", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pParamInOut2 = __cmd.Parameters["P_PARAM_IN_OUT2"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_IN_OUT2"].Value;
                    pParamOut2 = __cmd.Parameters["P_PARAM_OUT2"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_OUT2"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DupSignature2

        public void DupSignature3(OracleDecimal? pParamIn3, ref OracleDecimal? pParamInOut3, out OracleDecimal? pParamOut3, OracleConnection optionalPreexistingOpenConnection = null) {
            pParamOut3 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN3", OracleDbType.Decimal, pParamIn3, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT3", OracleDbType.Decimal, pParamInOut3, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT3", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pParamInOut3 = __cmd.Parameters["P_PARAM_IN_OUT3"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_IN_OUT3"].Value;
                    pParamOut3 = __cmd.Parameters["P_PARAM_OUT3"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_OUT3"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DupSignature3

        public OracleDecimal? DupSignature4(OracleDecimal? pParamIn1, ref OracleDecimal? pParamInOut1, out OracleDecimal? pParamOut1, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pParamOut1 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN1", OracleDbType.Decimal, pParamIn1, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT1", OracleDbType.Decimal, pParamInOut1, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT1", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pParamInOut1 = __cmd.Parameters["P_PARAM_IN_OUT1"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_IN_OUT1"].Value;
                    pParamOut1 = __cmd.Parameters["P_PARAM_OUT1"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_OUT1"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignature4

        public OracleDecimal? DupSignature5(OracleDecimal? pParamIn2, ref OracleDecimal? pParamInOut2, out OracleDecimal? pParamOut2, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pParamOut2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN2", OracleDbType.Decimal, pParamIn2, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT2", OracleDbType.Decimal, pParamInOut2, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT2", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pParamInOut2 = __cmd.Parameters["P_PARAM_IN_OUT2"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_IN_OUT2"].Value;
                    pParamOut2 = __cmd.Parameters["P_PARAM_OUT2"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_OUT2"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignature5

        public OracleDecimal? DupSignature6(OracleDecimal? pParamIn3, ref OracleDecimal? pParamInOut3, out OracleDecimal? pParamOut3, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pParamOut3 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN3", OracleDbType.Decimal, pParamIn3, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT3", OracleDbType.Decimal, pParamInOut3, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT3", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pParamInOut3 = __cmd.Parameters["P_PARAM_IN_OUT3"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_IN_OUT3"].Value;
                    pParamOut3 = __cmd.Parameters["P_PARAM_OUT3"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_PARAM_OUT3"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignature6

        public OracleDate? DupSignatureTranslatedDate(OracleDate? pParamIn, ref OracleDate? pParamInOut, out OracleDate? pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDate? __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_DATE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Date, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.Date, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.Date, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.Date, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDate.Null
                        : (OracleDate?)__cmd.Parameters["!RETURN"].Value;
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDate.Null
                        : (OracleDate?)__cmd.Parameters["P_PARAM_IN_OUT"].Value;
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDate.Null
                        : (OracleDate?)__cmd.Parameters["P_PARAM_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedDate

        public OracleTimeStamp? DupSignatureTranslatedDate(OracleTimeStamp? pParamIn, ref OracleTimeStamp? pParamInOut, out OracleTimeStamp? pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleTimeStamp? __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_DATE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.TimeStamp, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.TimeStamp, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.TimeStamp, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.TimeStamp, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStamp.Null
                        : (OracleTimeStamp?)__cmd.Parameters["!RETURN"].Value;
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStamp.Null
                        : (OracleTimeStamp?)__cmd.Parameters["P_PARAM_IN_OUT"].Value;
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStamp.Null
                        : (OracleTimeStamp?)__cmd.Parameters["P_PARAM_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedDate

        public String DupSignatureTranslatedStr1(String pParamIn, ref String pParamInOut, out String pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.Varchar2, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.Varchar2, 32767, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.Varchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_IN_OUT"].Value.ToString());
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr1

        public String DupSignatureTranslatedStr2(String pParamIn, ref String pParamInOut, out String pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NVarchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.NVarchar2, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.NVarchar2, 32767, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.NVarchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_IN_OUT"].Value.ToString());
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr2

        public String DupSignatureTranslatedStr3(String pParamIn, ref String pParamInOut, out String pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Char, 2000, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.Char, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.Char, 2000, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.Char, 2000, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_IN_OUT"].Value.ToString());
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr3

        public String DupSignatureTranslatedStr4(String pParamIn, ref String pParamInOut, out String pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NChar, 2000, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.NChar, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.NChar, 2000, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.NChar, 2000, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_IN_OUT"].Value.ToString());
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr4

        public OracleClob DupSignatureTranslatedStr5(OracleClob pParamIn, ref OracleClob pParamInOut, out OracleClob pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleClob __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Clob, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.Clob, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.Clob, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.Clob, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["!RETURN"].Value;
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["P_PARAM_IN_OUT"].Value;
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["P_PARAM_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr5

        public OracleClob DupSignatureTranslatedStr6(OracleClob pParamIn, ref OracleClob pParamInOut, out OracleClob pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleClob __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NClob, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.NClob, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.NClob, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.NClob, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["!RETURN"].Value;
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["P_PARAM_IN_OUT"].Value;
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["P_PARAM_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr6

        // **PROC IGNORED** - Code generation for LONG type will not be implemented due to Oracle deprecation
        // public Byte[] DupSigTranslatedByteArr(Byte[] pParamIn, ref Byte[] pParamInOut, out Byte[] pParamOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for BFILE type has not been implemented
        // public Byte[] DupSigTranslatedByteArr(Byte[] pParamIn, ref Byte[] pParamInOut, out Byte[] pParamOut, OracleConnection optionalPreexistingOpenConnection = null)

        public OracleBlob DupSigTranslatedByteArr(OracleBlob pParamIn, ref OracleBlob pParamInOut, out OracleBlob pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleBlob __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIG_TRANSLATED_BYTE_ARR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Blob, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.Blob, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.Blob, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.Blob, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleBlob.Null
                        : (OracleBlob)__cmd.Parameters["!RETURN"].Value;
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleBlob.Null
                        : (OracleBlob)__cmd.Parameters["P_PARAM_IN_OUT"].Value;
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleBlob.Null
                        : (OracleBlob)__cmd.Parameters["P_PARAM_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSigTranslatedByteArr

        // **PROC IGNORED** - Code generation for RAW type has not been implemented
        // public Byte[] DupSigTranslatedByteArr(Byte[] pParamIn, ref Byte[] pParamInOut, out Byte[] pParamOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<Double?> FuncAaBinaryDouble(IList<Double?> pIn, ref IList<Double?> pInOut, out IList<Double?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Double?> __ret = new List<Double?>(); pOut = new List<Double?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_BINARY_DOUBLE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.BinaryDouble, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.BinaryDouble, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Double?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.BinaryDouble, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Double?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.BinaryDouble, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Double?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Double?)null 
                            : Convert.ToDouble(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Double?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Double?)null 
                            : Convert.ToDouble(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Double?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Double?)null 
                            : Convert.ToDouble(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaBinaryDouble

        public IList<Single?> FuncAaBinaryFloat(IList<Single?> pIn, ref IList<Single?> pInOut, out IList<Single?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Single?> __ret = new List<Single?>(); pOut = new List<Single?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_BINARY_FLOAT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.BinaryFloat, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.BinaryFloat, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Single?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.BinaryFloat, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Single?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.BinaryFloat, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Single?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Single?)null 
                            : Convert.ToSingle(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Single?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Single?)null 
                            : Convert.ToSingle(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Single?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Single?)null 
                            : Convert.ToSingle(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaBinaryFloat

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaBinaryInteger(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BLOB type
        // public IList<OracleBlob> FuncAaBlob(IList<OracleBlob> pIn, ref IList<OracleBlob> pInOut, out IList<OracleBlob> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a PL/SQL BOOLEAN type
        // public IList<Boolean> FuncAaBoolean(IList<Boolean> pIn, ref IList<Boolean> pInOut, out IList<Boolean> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<String> FuncAaChar(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<String> __ret = new List<String>(); pOut = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_CHAR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Char, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["!RETURN"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["!RETURN"].ArrayBindSize[_i] = 2000; }

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Char, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Char, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new String[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_IN_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_IN_OUT"].ArrayBindSize[_i] = 2000; }

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Char, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_OUT"].ArrayBindSize[_i] = 2000; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleString[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].ToString())));

                    pInOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleString[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].ToString())));

                    pOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleString[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaChar

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a CLOB type
        // public IList<OracleClob> FuncAaClob(IList<OracleClob> pIn, ref IList<OracleClob> pInOut, out IList<OracleClob> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<OracleDate?> FuncAaDate(IList<OracleDate?> pIn, ref IList<OracleDate?> pInOut, out IList<OracleDate?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<OracleDate?> __ret = new List<OracleDate?>(); pOut = new List<OracleDate?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_DATE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Date, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Date, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new OracleDate?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Date, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new OracleDate?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Date, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<OracleDate?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDate[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDate[])[_i].IsNull
                            ? OracleDate.Null 
                            : (OracleDate?)((__cmd.Parameters["!RETURN"].Value as OracleDate[])[_i].ToString()));

                    pInOut = new List<OracleDate?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDate[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDate[])[_i].IsNull
                            ? OracleDate.Null 
                            : (OracleDate?)((__cmd.Parameters["P_IN_OUT"].Value as OracleDate[])[_i].ToString()));

                    pOut = new List<OracleDate?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDate[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDate[])[_i].IsNull
                            ? OracleDate.Null 
                            : (OracleDate?)((__cmd.Parameters["P_OUT"].Value as OracleDate[])[_i].ToString()));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaDate

        public IList<OracleDecimal?> FuncAaDecimal(IList<OracleDecimal?> pIn, ref IList<OracleDecimal?> pInOut, out IList<OracleDecimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<OracleDecimal?> __ret = new List<OracleDecimal?>(); pOut = new List<OracleDecimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_DECIMAL", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new OracleDecimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new OracleDecimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString()));

                    pInOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString()));

                    pOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString()));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaDecimal

        public IList<OracleDecimal?> FuncAaDoublePrecision(IList<OracleDecimal?> pIn, ref IList<OracleDecimal?> pInOut, out IList<OracleDecimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<OracleDecimal?> __ret = new List<OracleDecimal?>(); pOut = new List<OracleDecimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_DOUBLE_PRECISION", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new OracleDecimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new OracleDecimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString()));

                    pInOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString()));

                    pOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString()));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaDoublePrecision

        public IList<OracleDecimal?> FuncAaFloat(IList<OracleDecimal?> pIn, ref IList<OracleDecimal?> pInOut, out IList<OracleDecimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<OracleDecimal?> __ret = new List<OracleDecimal?>(); pOut = new List<OracleDecimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_FLOAT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new OracleDecimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new OracleDecimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString()));

                    pInOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString()));

                    pOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString()));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaFloat

        public IList<OracleDecimal?> FuncAaInteger(IList<OracleDecimal?> pIn, ref IList<OracleDecimal?> pInOut, out IList<OracleDecimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<OracleDecimal?> __ret = new List<OracleDecimal?>(); pOut = new List<OracleDecimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_INTEGER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new OracleDecimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new OracleDecimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString()));

                    pInOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString()));

                    pOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString()));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaInteger

        public OracleDecimal? FuncAaIntegerInCnt(IList<OracleDecimal?> pIn, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_INTEGER_IN_CNT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new OracleDecimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaIntegerInCnt

        public IList<OracleDecimal?> FuncAaIntegerV(IList<OracleDecimal?> pIn, ref IList<OracleDecimal?> pInOut, out IList<OracleDecimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<OracleDecimal?> __ret = new List<OracleDecimal?>(); pOut = new List<OracleDecimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_INTEGER_V", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new OracleDecimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new OracleDecimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString()));

                    pInOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString()));

                    pOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString()));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaIntegerV

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaNatural(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaNaturaln(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<String> FuncAaNchar(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<String> __ret = new List<String>(); pOut = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_NCHAR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NChar, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["!RETURN"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["!RETURN"].ArrayBindSize[_i] = 1000; }

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.NChar, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.NChar, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new String[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_IN_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_IN_OUT"].ArrayBindSize[_i] = 1000; }

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.NChar, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_OUT"].ArrayBindSize[_i] = 1000; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleString[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].ToString())));

                    pInOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleString[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].ToString())));

                    pOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleString[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaNchar

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a NCLOB type
        // public IList<OracleClob> FuncAaNclob(IList<OracleClob> pIn, ref IList<OracleClob> pInOut, out IList<OracleClob> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<OracleDecimal?> FuncAaNumber(IList<OracleDecimal?> pIn, ref IList<OracleDecimal?> pInOut, out IList<OracleDecimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<OracleDecimal?> __ret = new List<OracleDecimal?>(); pOut = new List<OracleDecimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_NUMBER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new OracleDecimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new OracleDecimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString()));

                    pInOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString()));

                    pOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString()));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaNumber

        public IList<OracleDecimal?> FuncAaNumeric(IList<OracleDecimal?> pIn, ref IList<OracleDecimal?> pInOut, out IList<OracleDecimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<OracleDecimal?> __ret = new List<OracleDecimal?>(); pOut = new List<OracleDecimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_NUMERIC", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new OracleDecimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new OracleDecimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString()));

                    pInOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString()));

                    pOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString()));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaNumeric

        public IList<String> FuncAaNvarchar2(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<String> __ret = new List<String>(); pOut = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_NVARCHAR2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NVarchar2, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["!RETURN"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["!RETURN"].ArrayBindSize[_i] = 2000; }

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.NVarchar2, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.NVarchar2, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new String[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_IN_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_IN_OUT"].ArrayBindSize[_i] = 2000; }

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.NVarchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_OUT"].ArrayBindSize[_i] = 2000; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleString[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].ToString())));

                    pInOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleString[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].ToString())));

                    pOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleString[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaNvarchar2

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaPlsInteger(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaPositive(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaPositiven(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<OracleDecimal?> FuncAaReal(IList<OracleDecimal?> pIn, ref IList<OracleDecimal?> pInOut, out IList<OracleDecimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<OracleDecimal?> __ret = new List<OracleDecimal?>(); pOut = new List<OracleDecimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_REAL", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new OracleDecimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new OracleDecimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString()));

                    pInOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString()));

                    pOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString()));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaReal

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a PL/SQL RECORD type
        // public IList<TTableBig> FuncAaRecord(IList<TTableBig> pIn, ref IList<TTableBig> pInOut, out IList<TTableBig> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a ROWTYPE type
        // public IList<FuncAaRowSomeRowType> FuncAaRow(IList<FuncAaRowSomeRowType> pIn, ref IList<FuncAaRowSomeRowType> pInOut, out IList<FuncAaRowSomeRowType> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<OracleDecimal?> FuncAaSmallint(IList<OracleDecimal?> pIn, ref IList<OracleDecimal?> pInOut, out IList<OracleDecimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<OracleDecimal?> __ret = new List<OracleDecimal?>(); pOut = new List<OracleDecimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_SMALLINT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new OracleDecimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new OracleDecimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString()));

                    pInOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString()));

                    pOut = new List<OracleDecimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? OracleDecimal.Null 
                            : (OracleDecimal?)((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString()));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaSmallint

        public IList<String> FuncAaString(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<String> __ret = new List<String>(); pOut = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_STRING", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["!RETURN"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["!RETURN"].ArrayBindSize[_i] = 32767; }

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Varchar2, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new String[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_IN_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_IN_OUT"].ArrayBindSize[_i] = 32767; }

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_OUT"].ArrayBindSize[_i] = 32767; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleString[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].ToString())));

                    pInOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleString[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].ToString())));

                    pOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleString[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaString

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a TIMESTAMP type
        // public IList<OracleTimeStamp?> FuncAaTimestamp(IList<OracleTimeStamp?> pIn, ref IList<OracleTimeStamp?> pInOut, out IList<OracleTimeStamp?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a TIMESTAMP type
        // public IList<OracleTimeStamp?> FuncAaTimestampPrec0(IList<OracleTimeStamp?> pIn, ref IList<OracleTimeStamp?> pInOut, out IList<OracleTimeStamp?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a TIMESTAMP type
        // public IList<OracleTimeStamp?> FuncAaTimestampPrec9(IList<OracleTimeStamp?> pIn, ref IList<OracleTimeStamp?> pInOut, out IList<OracleTimeStamp?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<String> FuncAaVarchar2(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<String> __ret = new List<String>(); pOut = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_VARCHAR2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["!RETURN"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["!RETURN"].ArrayBindSize[_i] = 4000; }

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Varchar2, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new String[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_IN_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_IN_OUT"].ArrayBindSize[_i] = 4000; }

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_OUT"].ArrayBindSize[_i] = 4000; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleString[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].ToString())));

                    pInOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleString[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].ToString())));

                    pOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleString[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaVarchar2

        public OracleDecimal? FuncAaVarchar2InCnt(IList<String> pIn, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_VARCHAR2_IN_CNT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaVarchar2InCnt

        // **PROC IGNORED** - ANYDATA type is not available in ODP.NET managed
        // public FuncAnydata( pIn, ref  pInOut, out  pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - ANYDATASET type is not available in ODP.NET managed
        // public FuncAnydataset( pIn, ref  pInOut, out  pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - ANYTYPE type is not available in ODP.NET managed
        // public FuncAnytype( pIn, ref  pInOut, out  pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for BFILE type has not been implemented
        // public Byte[] FuncBfile(Byte[] pIn, ref Byte[] pInOut, out Byte[] pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public Double? FuncBinaryDouble(Double? pIn, ref Double? pInOut, out Double? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Double? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_BINARY_DOUBLE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.BinaryDouble, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.BinaryDouble, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.BinaryDouble, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.BinaryDouble, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Double?)null
                        : Convert.ToDouble(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Double?)null
                        : Convert.ToDouble(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Double?)null
                        : Convert.ToDouble(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncBinaryDouble

        public Single? FuncBinaryFloat(Single? pIn, ref Single? pInOut, out Single? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Single? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_BINARY_FLOAT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.BinaryFloat, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.BinaryFloat, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.BinaryFloat, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.BinaryFloat, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Single?)null
                        : Convert.ToSingle(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Single?)null
                        : Convert.ToSingle(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Single?)null
                        : Convert.ToSingle(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncBinaryFloat

        public Int32? FuncBinaryInteger(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_BINARY_INTEGER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncBinaryInteger

        public OracleBlob FuncBlob(OracleBlob pIn, ref OracleBlob pInOut, out OracleBlob pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleBlob __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_BLOB", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Blob, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Blob, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Blob, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Blob, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleBlob.Null
                        : (OracleBlob)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleBlob.Null
                        : (OracleBlob)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleBlob.Null
                        : (OracleBlob)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncBlob

        // **PROC IGNORED** - .NET cannot send/receive a PL/SQL BOOLEAN type
        // public Boolean FuncBoolean(Boolean pIn, ref Boolean pInOut, out Boolean pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public String FuncChar(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_CHAR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Char, 2000, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Char, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Char, 2000, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Char, 2000, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncChar

        public OracleClob FuncClob(OracleClob pIn, ref OracleClob pInOut, out OracleClob pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleClob __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_CLOB", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Clob, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Clob, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Clob, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Clob, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncClob

        // **PROC IGNORED** - .NET cannot send/receive an associative array type field in a record
        // public ICollection<TypeITIgnoreAaInteger> FuncCursorIgnoreAaInteger<TypeITIgnoreAaInteger>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array type field in a record
        // public ICollection<TypeITIgnoreAaInteger> FuncCursorIgnoreAaInteger<TypeITIgnoreAaInteger>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for BFILE type has not been implemented
        // public ICollection<TypeITIgnoreBfile> FuncCursorIgnoreBfile<TypeITIgnoreBfile>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for BFILE type has not been implemented
        // public ICollection<TypeITIgnoreBfile> FuncCursorIgnoreBfile<TypeITIgnoreBfile>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive a PL/SQL BOOLEAN type
        // public ICollection<TypeITIgnoreBoolean> FuncCursorIgnoreBoolean<TypeITIgnoreBoolean>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive a PL/SQL BOOLEAN type
        // public ICollection<TypeITIgnoreBoolean> FuncCursorIgnoreBoolean<TypeITIgnoreBoolean>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG type will not be implemented due to Oracle deprecation
        // public ICollection<TypeITIgnoreLong> FuncCursorIgnoreLong<TypeITIgnoreLong>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG type will not be implemented due to Oracle deprecation
        // public ICollection<TypeITIgnoreLong> FuncCursorIgnoreLong<TypeITIgnoreLong>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG RAW type will not be implemented due to Oracle deprecation
        // public ICollection<TypeITIgnoreLongRaw> FuncCursorIgnoreLongRaw<TypeITIgnoreLongRaw>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG RAW type will not be implemented due to Oracle deprecation
        // public ICollection<TypeITIgnoreLongRaw> FuncCursorIgnoreLongRaw<TypeITIgnoreLongRaw>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for RAW type has not been implemented
        // public ICollection<TypeITIgnoreRaw> FuncCursorIgnoreRaw<TypeITIgnoreRaw>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for RAW type has not been implemented
        // public ICollection<TypeITIgnoreRaw> FuncCursorIgnoreRaw<TypeITIgnoreRaw>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for ROWID type has not been implemented
        // public ICollection<TypeITIgnoreRowid> FuncCursorIgnoreRowid<TypeITIgnoreRowid>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for ROWID type has not been implemented
        // public ICollection<TypeITIgnoreRowid> FuncCursorIgnoreRowid<TypeITIgnoreRowid>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for UROWID type has not been implemented
        // public ICollection<TypeITIgnoreUrowid> FuncCursorIgnoreUrowid<TypeITIgnoreUrowid>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for UROWID type has not been implemented
        // public ICollection<TypeITIgnoreUrowid> FuncCursorIgnoreUrowid<TypeITIgnoreUrowid>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - XMLTYPE type is not available in ODP.NET managed
        // public ICollection<TypeITIgnoreXmltype> FuncCursorIgnoreXmltype<TypeITIgnoreXmltype>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - XMLTYPE type is not available in ODP.NET managed
        // public ICollection<TypeITIgnoreXmltype> FuncCursorIgnoreXmltype<TypeITIgnoreXmltype>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        public OracleDate? FuncDate(OracleDate? pIn, ref OracleDate? pInOut, out OracleDate? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDate? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_DATE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Date, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Date, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Date, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Date, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDate.Null
                        : (OracleDate?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDate.Null
                        : (OracleDate?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDate.Null
                        : (OracleDate?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncDate

        public OracleDecimal? FuncDecimal(OracleDecimal? pIn, ref OracleDecimal? pInOut, out OracleDecimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_DECIMAL", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncDecimal

        public OracleDecimal? FuncDoublePrecision(OracleDecimal? pIn, ref OracleDecimal? pInOut, out OracleDecimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_DOUBLE_PRECISION", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncDoublePrecision

        public OracleDecimal? FuncFloat(OracleDecimal? pIn, ref OracleDecimal? pInOut, out OracleDecimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_FLOAT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncFloat

        public OracleDecimal? FuncInt(OracleDecimal? pIn, ref OracleDecimal? pInOut, out OracleDecimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_INT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncInt

        public OracleDecimal? FuncInteger(OracleDecimal? pIn, ref OracleDecimal? pInOut, out OracleDecimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_INTEGER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncInteger

        // **PROC IGNORED** - Code generation for INTERVAL DAY TO SECOND type has not been implemented
        // public TimeSpan? FuncIntervalDayToSecond(TimeSpan? pIn, ref TimeSpan? pInOut, out TimeSpan? pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for INTERVAL YEAR TO MONTH type has not been implemented
        // public TimeSpan? FuncIntervalYearToMonth(TimeSpan? pIn, ref TimeSpan? pInOut, out TimeSpan? pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG type will not be implemented due to Oracle deprecation
        // public Byte[] FuncLong(Byte[] pIn, ref Byte[] pInOut, out Byte[] pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG RAW type will not be implemented due to Oracle deprecation
        // public Byte[] FuncLongRaw(Byte[] pIn, ref Byte[] pInOut, out Byte[] pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public Int32? FuncNatural(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NATURAL", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNatural

        public Int32? FuncNaturaln(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NATURALN", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNaturaln

        public String FuncNchar(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NCHAR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NChar, 2000, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.NChar, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.NChar, 2000, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.NChar, 2000, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNchar

        public OracleClob FuncNclob(OracleClob pIn, ref OracleClob pInOut, out OracleClob pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleClob __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NCLOB", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NClob, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.NClob, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.NClob, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.NClob, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleClob.Null
                        : (OracleClob)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNclob

        public OracleDecimal? FuncNoParam(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NO_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNoParam

        // **PROC IGNORED** - Code generation for NESTED TABLE type has not been implemented
        // public IList<OracleDecimal?> FuncNtNumber(IList<OracleDecimal?> pIn, ref IList<OracleDecimal?> pInOut, out IList<OracleDecimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public OracleDecimal? FuncNumber(OracleDecimal? pIn, ref OracleDecimal? pInOut, out OracleDecimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NUMBER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNumber

        public OracleDecimal? FuncNumeric(OracleDecimal? pIn, ref OracleDecimal? pInOut, out OracleDecimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NUMERIC", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNumeric

        public String FuncNvarchar2(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NVARCHAR2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NVarchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.NVarchar2, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.NVarchar2, 32767, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.NVarchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNvarchar2

        // **PROC IGNORED** - OBJECT type is not available in ODP.NET managed
        // public IOdptBigOt FuncObjectType(IOdptBigOt pIn, ref IOdptBigOt pInOut, out IOdptBigOt pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public OracleDecimal? FuncOptionalParam(OracleDecimal? pInNumberRequired, ref OracleDecimal? pInOutNumberRequired, OracleDecimal? pInNumberOptional = null, String pInVarchar2Optional = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_OPTIONAL_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_REQUIRED", OracleDbType.Decimal, pInNumberRequired, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_NUMBER_REQUIRED", OracleDbType.Decimal, pInOutNumberRequired, ParameterDirection.InputOutput));
                    if (pInNumberOptional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_OPTIONAL", OracleDbType.Decimal, pInNumberOptional, ParameterDirection.Input));
                    if (pInVarchar2Optional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_VARCHAR2_OPTIONAL", OracleDbType.Varchar2, pInVarchar2Optional, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pInOutNumberRequired = __cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncOptionalParam

        public OracleDecimal? FuncOptionalParamReversed(OracleDecimal? pInNumberRequired, ref OracleDecimal? pInOutNumberRequired, OracleDecimal? pInNumberOptional = null, String pInVarchar2Optional = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_OPTIONAL_PARAM_REVERSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_REQUIRED", OracleDbType.Decimal, pInNumberRequired, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_NUMBER_REQUIRED", OracleDbType.Decimal, pInOutNumberRequired, ParameterDirection.InputOutput));
                    if (pInNumberOptional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_OPTIONAL", OracleDbType.Decimal, pInNumberOptional, ParameterDirection.Input));
                    if (pInVarchar2Optional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_VARCHAR2_OPTIONAL", OracleDbType.Varchar2, pInVarchar2Optional, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pInOutNumberRequired = __cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncOptionalParamReversed

        public Int32? FuncPlsInteger(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_PLS_INTEGER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncPlsInteger

        public Int32? FuncPositive(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_POSITIVE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncPositive

        public Int32? FuncPositiven(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_POSITIVEN", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncPositiven

        // **PROC IGNORED** - Code generation for RAW type has not been implemented
        // public Byte[] FuncRaw(Byte[] pIn, ref Byte[] pInOut, out Byte[] pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public OracleDecimal? FuncReal(OracleDecimal? pIn, ref OracleDecimal? pInOut, out OracleDecimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_REAL", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncReal

        // **PROC IGNORED** - .NET cannot send/receive a PL/SQL RECORD type (apart from cursor)
        // public TTableBig FuncRecord(TTableBig pIn, ref TTableBig pInOut, out TTableBig pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - REF type is not available in ODP.NET managed
        // public String FuncRef(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive a ROWTYPE type (apart from cursor)
        // public FuncRowSomeRowType FuncRow(FuncRowPInRowType pIn, ref FuncRowPInOutRowType pInOut, out FuncRowPOutRowType pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for ROWID type has not been implemented
        // public String FuncRowid(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public OracleDecimal? FuncSmallint(OracleDecimal? pIn, ref OracleDecimal? pInOut, out OracleDecimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_SMALLINT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncSmallint

        public String FuncString(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_STRING", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Varchar2, 32767, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Varchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncString

        public OracleTimeStamp? FuncTimestamp(OracleTimeStamp? pIn, ref OracleTimeStamp? pInOut, out OracleTimeStamp? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleTimeStamp? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_TIMESTAMP", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.TimeStamp, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.TimeStamp, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.TimeStamp, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.TimeStamp, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStamp.Null
                        : (OracleTimeStamp?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStamp.Null
                        : (OracleTimeStamp?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStamp.Null
                        : (OracleTimeStamp?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncTimestamp

        public OracleTimeStampLTZ? FuncTimestampWLTimeZone(OracleTimeStampLTZ? pIn, ref OracleTimeStampLTZ? pInOut, out OracleTimeStampLTZ? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleTimeStampLTZ? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_TIMESTAMP_W_L_TIME_ZONE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.TimeStampLTZ, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.TimeStampLTZ, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.TimeStampLTZ, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.TimeStampLTZ, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStampLTZ.Null
                        : (OracleTimeStampLTZ?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStampLTZ.Null
                        : (OracleTimeStampLTZ?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStampLTZ.Null
                        : (OracleTimeStampLTZ?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncTimestampWLTimeZone

        public OracleTimeStampTZ? FuncTimestampWTimeZone(OracleTimeStampTZ? pIn, ref OracleTimeStampTZ? pInOut, out OracleTimeStampTZ? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleTimeStampTZ? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_TIMESTAMP_W_TIME_ZONE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.TimeStampTZ, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.TimeStampTZ, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.TimeStampTZ, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.TimeStampTZ, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStampTZ.Null
                        : (OracleTimeStampTZ?)__cmd.Parameters["!RETURN"].Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStampTZ.Null
                        : (OracleTimeStampTZ?)__cmd.Parameters["P_IN_OUT"].Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? OracleTimeStampTZ.Null
                        : (OracleTimeStampTZ?)__cmd.Parameters["P_OUT"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncTimestampWTimeZone

        // **PROC IGNORED** - Code generation for UROWID type has not been implemented
        // public String FuncUrowid(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public String FuncVarchar(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_VARCHAR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Varchar2, 32767, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Varchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncVarchar

        public String FuncVarchar2(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_VARCHAR2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Varchar2, 32767, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Varchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncVarchar2

        // **PROC IGNORED** - Code generation for VARRAY type has not been implemented
        // public IList<OracleDecimal?> FuncVaNumber(IList<OracleDecimal?> pIn, ref IList<OracleDecimal?> pInOut, out IList<OracleDecimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - XMLTYPE type is not available in ODP.NET managed
        // public XmlDocument FuncXmltype(XmlDocument pIn, ref XmlDocument pInOut, out XmlDocument pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public ICollection<TypeITRecFldSameName> GetRefCurRecFldSameName<TypeITRecFldSameName>(
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITRecFldSameName : class, new() {
            ICollection<TypeITRecFldSameName> __ret = new List<TypeITRecFldSameName>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.GET_REF_CUR_REC_FLD_SAME_NAME", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeITRecFldSameName>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRefCurRecFldSameName

        public ICollection<TypeITRecFldSameName> GetRefCurRecFldSameName<TypeITRecFldSameName>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITRecFldSameName : class, ITRecFldSameName, new() {
            ICollection<TypeITRecFldSameName> __ret = new List<TypeITRecFldSameName>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.GET_REF_CUR_REC_FLD_SAME_NAME", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITRecFldSameName<TypeITRecFldSameName>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRefCurRecFldSameName

        public void ProcBinaryDoubleConst(out Double? pMinNormal, out Double? pMaxNormal, OracleConnection optionalPreexistingOpenConnection = null) {
            pMinNormal = null; pMaxNormal = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_BINARY_DOUBLE_CONST", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_MIN_NORMAL", OracleDbType.BinaryDouble, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_MAX_NORMAL", OracleDbType.BinaryDouble, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pMinNormal = __cmd.Parameters["P_MIN_NORMAL"].Status == OracleParameterStatus.NullFetched
                        ? (Double?)null
                        : Convert.ToDouble(__cmd.Parameters["P_MIN_NORMAL"].Value.ToString());
                    pMaxNormal = __cmd.Parameters["P_MAX_NORMAL"].Status == OracleParameterStatus.NullFetched
                        ? (Double?)null
                        : Convert.ToDouble(__cmd.Parameters["P_MAX_NORMAL"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcBinaryDoubleConst

        public void ProcBinaryFloatConst(out Single? pMinNormal, out Single? pMaxNormal, OracleConnection optionalPreexistingOpenConnection = null) {
            pMinNormal = null; pMaxNormal = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_BINARY_FLOAT_CONST", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_MIN_NORMAL", OracleDbType.BinaryFloat, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_MAX_NORMAL", OracleDbType.BinaryFloat, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pMinNormal = __cmd.Parameters["P_MIN_NORMAL"].Status == OracleParameterStatus.NullFetched
                        ? (Single?)null
                        : Convert.ToSingle(__cmd.Parameters["P_MIN_NORMAL"].Value.ToString());
                    pMaxNormal = __cmd.Parameters["P_MAX_NORMAL"].Status == OracleParameterStatus.NullFetched
                        ? (Single?)null
                        : Convert.ToSingle(__cmd.Parameters["P_MAX_NORMAL"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcBinaryFloatConst

        public void ProcNocopyIncrement(OracleDecimal? pIn, ref OracleDecimal? pInOutNocopy, out OracleDecimal? pOutNocopy, OracleConnection optionalPreexistingOpenConnection = null) {
            pOutNocopy = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_NOCOPY_INCREMENT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_NOCOPY", OracleDbType.Decimal, pInOutNocopy, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT_NOCOPY", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pInOutNocopy = __cmd.Parameters["P_IN_OUT_NOCOPY"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT_NOCOPY"].Value;
                    pOutNocopy = __cmd.Parameters["P_OUT_NOCOPY"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_OUT_NOCOPY"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcNocopyIncrement

        public void ProcNoParam(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_NO_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcNoParam

        public void ProcOptionalParam(OracleDecimal? pInNumberRequired, ref OracleDecimal? pInOutNumberRequired, OracleDecimal? pInNumberOptional = null, String pInVarchar2Optional = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_OPTIONAL_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_REQUIRED", OracleDbType.Decimal, pInNumberRequired, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_NUMBER_REQUIRED", OracleDbType.Decimal, pInOutNumberRequired, ParameterDirection.InputOutput));
                    if (pInNumberOptional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_OPTIONAL", OracleDbType.Decimal, pInNumberOptional, ParameterDirection.Input));
                    if (pInVarchar2Optional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_VARCHAR2_OPTIONAL", OracleDbType.Varchar2, pInVarchar2Optional, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pInOutNumberRequired = __cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcOptionalParam

        public void ProcOptionalParamReversed(OracleDecimal? pInNumberRequired, ref OracleDecimal? pInOutNumberRequired, OracleDecimal? pInNumberOptional = null, String pInVarchar2Optional = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_OPTIONAL_PARAM_REVERSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_REQUIRED", OracleDbType.Decimal, pInNumberRequired, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_NUMBER_REQUIRED", OracleDbType.Decimal, pInOutNumberRequired, ParameterDirection.InputOutput));
                    if (pInNumberOptional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_OPTIONAL", OracleDbType.Decimal, pInNumberOptional, ParameterDirection.Input));
                    if (pInVarchar2Optional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_VARCHAR2_OPTIONAL", OracleDbType.Varchar2, pInVarchar2Optional, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pInOutNumberRequired = __cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcOptionalParamReversed

        public void ProcRaiseException(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_RAISE_EXCEPTION", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcRaiseException

        public void ProcUnderscoreSuffix(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_UNDERSCORE_SUFFIX", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcUnderscoreSuffix

        public void ProcUnderscoreSuffixExtraunderscore(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_UNDERSCORE_SUFFIX_", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcUnderscoreSuffixExtraunderscore
    } // OdptPkgMain

    public sealed partial class OdptPkgSql : Schema.Odpt.Odpt.Safe.OdptAdapter {
        private OdptPkgSql() { }
        private static readonly OdptPkgSql _instance = new OdptPkgSql();
        public static OdptPkgSql Instance { get { return _instance; } }

        // **PROC IGNORED** - .NET cannot send/receive a PL/SQL BOOLEAN type
        // public void WhereCondition(ref String pWhere, String pOperand1, String pOperator, String pOperand2, 
        //        Boolean pOr, OracleConnection optionalPreexistingOpenConnection = null)

        public void WhereCondition(ref String pWhere, String pOperand1, String pOperator, String pOperand2, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_SQL.WHERE_CONDITION", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_WHERE", OracleDbType.Varchar2, 32767, pWhere, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OPERAND1", OracleDbType.Varchar2, pOperand1, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_OPERATOR", OracleDbType.Varchar2, pOperator, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_OPERAND2", OracleDbType.Varchar2, pOperand2, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pWhere = __cmd.Parameters["P_WHERE"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_WHERE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // WhereCondition

        public void WhereConditionParam(ref String pWhere, String pColumn, String pOperator, String pParamName, 
                String pParamValue, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_SQL.WHERE_CONDITION_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_WHERE", OracleDbType.Varchar2, 32767, pWhere, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_COLUMN", OracleDbType.Varchar2, pColumn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_OPERATOR", OracleDbType.Varchar2, pOperator, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_NAME", OracleDbType.Varchar2, pParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_VALUE", OracleDbType.Varchar2, pParamValue, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pWhere = __cmd.Parameters["P_WHERE"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_WHERE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // WhereConditionParam

        public void WhereConditionParam(ref String pWhere, String pColumn, String pOperator, String pParamName, 
                OracleTimeStamp? pParamValue, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_SQL.WHERE_CONDITION_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_WHERE", OracleDbType.Varchar2, 32767, pWhere, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_COLUMN", OracleDbType.Varchar2, pColumn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_OPERATOR", OracleDbType.Varchar2, pOperator, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_NAME", OracleDbType.Varchar2, pParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_VALUE", OracleDbType.TimeStamp, pParamValue, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pWhere = __cmd.Parameters["P_WHERE"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_WHERE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // WhereConditionParam

        public void WhereConditionRangeParam(ref String pWhere, String pColumn, String pFromParamName, String pFromParamValue, 
                String pToParamName, String pToParamValue, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_SQL.WHERE_CONDITION_RANGE_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_WHERE", OracleDbType.Varchar2, 32767, pWhere, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_COLUMN", OracleDbType.Varchar2, pColumn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_FROM_PARAM_NAME", OracleDbType.Varchar2, pFromParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_FROM_PARAM_VALUE", OracleDbType.Varchar2, pFromParamValue, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_TO_PARAM_NAME", OracleDbType.Varchar2, pToParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_TO_PARAM_VALUE", OracleDbType.Varchar2, pToParamValue, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pWhere = __cmd.Parameters["P_WHERE"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_WHERE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // WhereConditionRangeParam

        public void WhereConditionRangeParam(ref String pWhere, String pColumn, String pFromParamName, OracleTimeStamp? pFromParamValue, 
                String pToParamName, OracleTimeStamp? pToParamValue, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_SQL.WHERE_CONDITION_RANGE_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_WHERE", OracleDbType.Varchar2, 32767, pWhere, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_COLUMN", OracleDbType.Varchar2, pColumn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_FROM_PARAM_NAME", OracleDbType.Varchar2, pFromParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_FROM_PARAM_VALUE", OracleDbType.TimeStamp, pFromParamValue, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_TO_PARAM_NAME", OracleDbType.Varchar2, pToParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_TO_PARAM_VALUE", OracleDbType.TimeStamp, pToParamValue, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pWhere = __cmd.Parameters["P_WHERE"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_WHERE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // WhereConditionRangeParam
    } // OdptPkgSql

    public sealed partial class OdptPkgTableBig : Schema.Odpt.Odpt.Safe.OdptAdapter {
        private OdptPkgTableBig() { }
        private static readonly OdptPkgTableBig _instance = new OdptPkgTableBig();
        public static OdptPkgTableBig Instance { get { return _instance; } }

        public interface IFltrPkgRecUnusedTTableBigFltUnused {
            OracleDecimal? Id { set; }
            OracleDecimal? ColNumberId { set; }
            OracleDecimal? ColInteger { set; }
            OracleDecimal? ColInt { set; }
            OracleDecimal? ColSmallint { set; }
            OracleDecimal? ColNumeric { set; }
            OracleDecimal? ColDecimal { set; }
            OracleDecimal? ColNumber { set; }
            OracleDecimal? ColDoublePrecision { set; }
            OracleDecimal? ColFloat { set; }
            OracleDecimal? ColReal { set; }
            Single? ColBinaryFloat { set; }
            Double? ColBinaryDouble { set; }
            String ColVarcharMin { set; }
            String ColVarcharMax { set; }
            String ColVarchar2Min { set; }
            String ColVarchar2Max { set; }
            String ColNvarchar2Min { set; }
            String ColNvarchar2Max { set; }
            String ColCharMin { set; }
            String ColCharMax { set; }
            String ColNcharMin { set; }
            String ColNcharMax { set; }
            OracleDate? ColDate { set; }
            OracleTimeStamp? ColTimestamp { set; }
            OracleTimeStamp? ColTimestampPrec0 { set; }
            OracleTimeStamp? ColTimestampPrec9 { set; }
            OracleTimeStampTZ? ColTimestampTZ { set; }
            OracleTimeStampTZ? ColTimestampTZPrec0 { set; }
            OracleTimeStampTZ? ColTimestampTZPrec9 { set; }
            OracleTimeStampLTZ? ColTimestampLTZ { set; }
            OracleTimeStampLTZ? ColTimestampLTZPrec0 { set; }
            OracleTimeStampLTZ? ColTimestampLTZPrec9 { set; }
            OracleBlob ColBlob { set; }
            OracleClob ColClob { set; }
            OracleClob ColNclob { set; }
            String Abstract { set; }
            String Base { set; }
            String Void { set; }
            String Class { set; }
            String Namespace { set; }
            String Readonly { set; }
            String Partial { set; }
            String Const { set; }
            String Using { set; }
            String ColLast { set; }
        } // IFltrPkgRecUnusedTTableBigFltUnused

        public ICollection<TypeIFltrPkgRecUnusedTTableBigFltUnused> ReadResultIFltrPkgRecUnusedTTableBigFltUnused<TypeIFltrPkgRecUnusedTTableBigFltUnused>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where TypeIFltrPkgRecUnusedTTableBigFltUnused : class, IFltrPkgRecUnusedTTableBigFltUnused, new() {
            ICollection<TypeIFltrPkgRecUnusedTTableBigFltUnused> __ret = new List<TypeIFltrPkgRecUnusedTTableBigFltUnused>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    TypeIFltrPkgRecUnusedTTableBigFltUnused obj = new TypeIFltrPkgRecUnusedTTableBigFltUnused();
                    if (!rdr.IsDBNull(0)) obj.Id = (OracleDecimal?)rdr.GetOracleValue(0);
                    if (!rdr.IsDBNull(1)) obj.ColNumberId = (OracleDecimal?)rdr.GetOracleValue(1);
                    if (!rdr.IsDBNull(2)) obj.ColInteger = (OracleDecimal?)rdr.GetOracleValue(2);
                    if (!rdr.IsDBNull(3)) obj.ColInt = (OracleDecimal?)rdr.GetOracleValue(3);
                    if (!rdr.IsDBNull(4)) obj.ColSmallint = (OracleDecimal?)rdr.GetOracleValue(4);
                    if (!rdr.IsDBNull(5)) obj.ColNumeric = (OracleDecimal?)rdr.GetOracleValue(5);
                    if (!rdr.IsDBNull(6)) obj.ColDecimal = (OracleDecimal?)rdr.GetOracleValue(6);
                    if (!rdr.IsDBNull(7)) obj.ColNumber = (OracleDecimal?)rdr.GetOracleValue(7);
                    if (!rdr.IsDBNull(8)) obj.ColDoublePrecision = (OracleDecimal?)rdr.GetOracleValue(8);
                    if (!rdr.IsDBNull(9)) obj.ColFloat = (OracleDecimal?)rdr.GetOracleValue(9);
                    if (!rdr.IsDBNull(10)) obj.ColReal = (OracleDecimal?)rdr.GetOracleValue(10);
                    if (!rdr.IsDBNull(11)) obj.ColBinaryFloat = Convert.ToSingle(rdr.GetValue(11));
                    if (!rdr.IsDBNull(12)) obj.ColBinaryDouble = Convert.ToDouble(rdr.GetValue(12));
                    if (!rdr.IsDBNull(13)) obj.ColVarcharMin = Convert.ToString(rdr.GetValue(13));
                    if (!rdr.IsDBNull(14)) obj.ColVarcharMax = Convert.ToString(rdr.GetValue(14));
                    if (!rdr.IsDBNull(15)) obj.ColVarchar2Min = Convert.ToString(rdr.GetValue(15));
                    if (!rdr.IsDBNull(16)) obj.ColVarchar2Max = Convert.ToString(rdr.GetValue(16));
                    if (!rdr.IsDBNull(17)) obj.ColNvarchar2Min = Convert.ToString(rdr.GetValue(17));
                    if (!rdr.IsDBNull(18)) obj.ColNvarchar2Max = Convert.ToString(rdr.GetValue(18));
                    if (!rdr.IsDBNull(19)) obj.ColCharMin = Convert.ToString(rdr.GetValue(19));
                    if (!rdr.IsDBNull(20)) obj.ColCharMax = Convert.ToString(rdr.GetValue(20));
                    if (!rdr.IsDBNull(21)) obj.ColNcharMin = Convert.ToString(rdr.GetValue(21));
                    if (!rdr.IsDBNull(22)) obj.ColNcharMax = Convert.ToString(rdr.GetValue(22));
                    if (!rdr.IsDBNull(23)) obj.ColDate = (OracleDate?)rdr.GetOracleValue(23);
                    if (!rdr.IsDBNull(24)) obj.ColTimestamp = (OracleTimeStamp?)rdr.GetOracleValue(24);
                    if (!rdr.IsDBNull(25)) obj.ColTimestampPrec0 = (OracleTimeStamp?)rdr.GetOracleValue(25);
                    if (!rdr.IsDBNull(26)) obj.ColTimestampPrec9 = (OracleTimeStamp?)rdr.GetOracleValue(26);
                    if (!rdr.IsDBNull(27)) obj.ColTimestampTZ = (OracleTimeStampTZ?)rdr.GetOracleValue(27);
                    if (!rdr.IsDBNull(28)) obj.ColTimestampTZPrec0 = (OracleTimeStampTZ?)rdr.GetOracleValue(28);
                    if (!rdr.IsDBNull(29)) obj.ColTimestampTZPrec9 = (OracleTimeStampTZ?)rdr.GetOracleValue(29);
                    if (!rdr.IsDBNull(30)) obj.ColTimestampLTZ = (OracleTimeStampLTZ?)rdr.GetOracleValue(30);
                    if (!rdr.IsDBNull(31)) obj.ColTimestampLTZPrec0 = (OracleTimeStampLTZ?)rdr.GetOracleValue(31);
                    if (!rdr.IsDBNull(32)) obj.ColTimestampLTZPrec9 = (OracleTimeStampLTZ?)rdr.GetOracleValue(32);
                    if (!rdr.IsDBNull(33)) obj.ColBlob = (OracleBlob)rdr.GetOracleBlob(33);
                    if (!rdr.IsDBNull(34)) obj.ColClob = (OracleClob)rdr.GetOracleClob(34);
                    if (!rdr.IsDBNull(35)) obj.ColNclob = (OracleClob)rdr.GetOracleClob(35);
                    if (!rdr.IsDBNull(36)) obj.Abstract = Convert.ToString(rdr.GetValue(36));
                    if (!rdr.IsDBNull(37)) obj.Base = Convert.ToString(rdr.GetValue(37));
                    if (!rdr.IsDBNull(38)) obj.Void = Convert.ToString(rdr.GetValue(38));
                    if (!rdr.IsDBNull(39)) obj.Class = Convert.ToString(rdr.GetValue(39));
                    if (!rdr.IsDBNull(40)) obj.Namespace = Convert.ToString(rdr.GetValue(40));
                    if (!rdr.IsDBNull(41)) obj.Readonly = Convert.ToString(rdr.GetValue(41));
                    if (!rdr.IsDBNull(42)) obj.Partial = Convert.ToString(rdr.GetValue(42));
                    if (!rdr.IsDBNull(43)) obj.Const = Convert.ToString(rdr.GetValue(43));
                    if (!rdr.IsDBNull(44)) obj.Using = Convert.ToString(rdr.GetValue(44));
                    if (!rdr.IsDBNull(45)) obj.ColLast = Convert.ToString(rdr.GetValue(45));
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultIFltrPkgRecUnusedTTableBigFltUnused

        public interface IFltrPkgRecUsedTTableBigFltUsed {
            OracleDecimal? Id { set; }
            OracleDecimal? ColNumberId { set; }
            OracleDecimal? ColInteger { set; }
            OracleDecimal? ColInt { set; }
            OracleDecimal? ColSmallint { set; }
            OracleDecimal? ColNumeric { set; }
            OracleDecimal? ColDecimal { set; }
            OracleDecimal? ColNumber { set; }
            OracleDecimal? ColDoublePrecision { set; }
            OracleDecimal? ColFloat { set; }
            OracleDecimal? ColReal { set; }
            Single? ColBinaryFloat { set; }
            Double? ColBinaryDouble { set; }
            String ColVarcharMin { set; }
            String ColVarcharMax { set; }
            String ColVarchar2Min { set; }
            String ColVarchar2Max { set; }
            String ColNvarchar2Min { set; }
            String ColNvarchar2Max { set; }
            String ColCharMin { set; }
            String ColCharMax { set; }
            String ColNcharMin { set; }
            String ColNcharMax { set; }
            OracleDate? ColDate { set; }
            OracleTimeStamp? ColTimestamp { set; }
            OracleTimeStamp? ColTimestampPrec0 { set; }
            OracleTimeStamp? ColTimestampPrec9 { set; }
            OracleTimeStampTZ? ColTimestampTZ { set; }
            OracleTimeStampTZ? ColTimestampTZPrec0 { set; }
            OracleTimeStampTZ? ColTimestampTZPrec9 { set; }
            OracleTimeStampLTZ? ColTimestampLTZ { set; }
            OracleTimeStampLTZ? ColTimestampLTZPrec0 { set; }
            OracleTimeStampLTZ? ColTimestampLTZPrec9 { set; }
            OracleBlob ColBlob { set; }
            OracleClob ColClob { set; }
            OracleClob ColNclob { set; }
            String Abstract { set; }
            String Base { set; }
            String Void { set; }
            String Class { set; }
            String Namespace { set; }
            String Readonly { set; }
            String Partial { set; }
            String Const { set; }
            String Using { set; }
            String ColLast { set; }
        } // IFltrPkgRecUsedTTableBigFltUsed

        public ICollection<TypeIFltrPkgRecUsedTTableBigFltUsed> ReadResultIFltrPkgRecUsedTTableBigFltUsed<TypeIFltrPkgRecUsedTTableBigFltUsed>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where TypeIFltrPkgRecUsedTTableBigFltUsed : class, IFltrPkgRecUsedTTableBigFltUsed, new() {
            ICollection<TypeIFltrPkgRecUsedTTableBigFltUsed> __ret = new List<TypeIFltrPkgRecUsedTTableBigFltUsed>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    TypeIFltrPkgRecUsedTTableBigFltUsed obj = new TypeIFltrPkgRecUsedTTableBigFltUsed();
                    if (!rdr.IsDBNull(0)) obj.Id = (OracleDecimal?)rdr.GetOracleValue(0);
                    if (!rdr.IsDBNull(1)) obj.ColNumberId = (OracleDecimal?)rdr.GetOracleValue(1);
                    if (!rdr.IsDBNull(2)) obj.ColInteger = (OracleDecimal?)rdr.GetOracleValue(2);
                    if (!rdr.IsDBNull(3)) obj.ColInt = (OracleDecimal?)rdr.GetOracleValue(3);
                    if (!rdr.IsDBNull(4)) obj.ColSmallint = (OracleDecimal?)rdr.GetOracleValue(4);
                    if (!rdr.IsDBNull(5)) obj.ColNumeric = (OracleDecimal?)rdr.GetOracleValue(5);
                    if (!rdr.IsDBNull(6)) obj.ColDecimal = (OracleDecimal?)rdr.GetOracleValue(6);
                    if (!rdr.IsDBNull(7)) obj.ColNumber = (OracleDecimal?)rdr.GetOracleValue(7);
                    if (!rdr.IsDBNull(8)) obj.ColDoublePrecision = (OracleDecimal?)rdr.GetOracleValue(8);
                    if (!rdr.IsDBNull(9)) obj.ColFloat = (OracleDecimal?)rdr.GetOracleValue(9);
                    if (!rdr.IsDBNull(10)) obj.ColReal = (OracleDecimal?)rdr.GetOracleValue(10);
                    if (!rdr.IsDBNull(11)) obj.ColBinaryFloat = Convert.ToSingle(rdr.GetValue(11));
                    if (!rdr.IsDBNull(12)) obj.ColBinaryDouble = Convert.ToDouble(rdr.GetValue(12));
                    if (!rdr.IsDBNull(13)) obj.ColVarcharMin = Convert.ToString(rdr.GetValue(13));
                    if (!rdr.IsDBNull(14)) obj.ColVarcharMax = Convert.ToString(rdr.GetValue(14));
                    if (!rdr.IsDBNull(15)) obj.ColVarchar2Min = Convert.ToString(rdr.GetValue(15));
                    if (!rdr.IsDBNull(16)) obj.ColVarchar2Max = Convert.ToString(rdr.GetValue(16));
                    if (!rdr.IsDBNull(17)) obj.ColNvarchar2Min = Convert.ToString(rdr.GetValue(17));
                    if (!rdr.IsDBNull(18)) obj.ColNvarchar2Max = Convert.ToString(rdr.GetValue(18));
                    if (!rdr.IsDBNull(19)) obj.ColCharMin = Convert.ToString(rdr.GetValue(19));
                    if (!rdr.IsDBNull(20)) obj.ColCharMax = Convert.ToString(rdr.GetValue(20));
                    if (!rdr.IsDBNull(21)) obj.ColNcharMin = Convert.ToString(rdr.GetValue(21));
                    if (!rdr.IsDBNull(22)) obj.ColNcharMax = Convert.ToString(rdr.GetValue(22));
                    if (!rdr.IsDBNull(23)) obj.ColDate = (OracleDate?)rdr.GetOracleValue(23);
                    if (!rdr.IsDBNull(24)) obj.ColTimestamp = (OracleTimeStamp?)rdr.GetOracleValue(24);
                    if (!rdr.IsDBNull(25)) obj.ColTimestampPrec0 = (OracleTimeStamp?)rdr.GetOracleValue(25);
                    if (!rdr.IsDBNull(26)) obj.ColTimestampPrec9 = (OracleTimeStamp?)rdr.GetOracleValue(26);
                    if (!rdr.IsDBNull(27)) obj.ColTimestampTZ = (OracleTimeStampTZ?)rdr.GetOracleValue(27);
                    if (!rdr.IsDBNull(28)) obj.ColTimestampTZPrec0 = (OracleTimeStampTZ?)rdr.GetOracleValue(28);
                    if (!rdr.IsDBNull(29)) obj.ColTimestampTZPrec9 = (OracleTimeStampTZ?)rdr.GetOracleValue(29);
                    if (!rdr.IsDBNull(30)) obj.ColTimestampLTZ = (OracleTimeStampLTZ?)rdr.GetOracleValue(30);
                    if (!rdr.IsDBNull(31)) obj.ColTimestampLTZPrec0 = (OracleTimeStampLTZ?)rdr.GetOracleValue(31);
                    if (!rdr.IsDBNull(32)) obj.ColTimestampLTZPrec9 = (OracleTimeStampLTZ?)rdr.GetOracleValue(32);
                    if (!rdr.IsDBNull(33)) obj.ColBlob = (OracleBlob)rdr.GetOracleBlob(33);
                    if (!rdr.IsDBNull(34)) obj.ColClob = (OracleClob)rdr.GetOracleClob(34);
                    if (!rdr.IsDBNull(35)) obj.ColNclob = (OracleClob)rdr.GetOracleClob(35);
                    if (!rdr.IsDBNull(36)) obj.Abstract = Convert.ToString(rdr.GetValue(36));
                    if (!rdr.IsDBNull(37)) obj.Base = Convert.ToString(rdr.GetValue(37));
                    if (!rdr.IsDBNull(38)) obj.Void = Convert.ToString(rdr.GetValue(38));
                    if (!rdr.IsDBNull(39)) obj.Class = Convert.ToString(rdr.GetValue(39));
                    if (!rdr.IsDBNull(40)) obj.Namespace = Convert.ToString(rdr.GetValue(40));
                    if (!rdr.IsDBNull(41)) obj.Readonly = Convert.ToString(rdr.GetValue(41));
                    if (!rdr.IsDBNull(42)) obj.Partial = Convert.ToString(rdr.GetValue(42));
                    if (!rdr.IsDBNull(43)) obj.Const = Convert.ToString(rdr.GetValue(43));
                    if (!rdr.IsDBNull(44)) obj.Using = Convert.ToString(rdr.GetValue(44));
                    if (!rdr.IsDBNull(45)) obj.ColLast = Convert.ToString(rdr.GetValue(45));
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultIFltrPkgRecUsedTTableBigFltUsed

        public interface ITTableBig {
            OracleDecimal? Id { set; }
            OracleDecimal? ColNumberId { set; }
            OracleDecimal? ColInteger { set; }
            OracleDecimal? ColInt { set; }
            OracleDecimal? ColSmallint { set; }
            OracleDecimal? ColNumeric { set; }
            OracleDecimal? ColDecimal { set; }
            OracleDecimal? ColNumber { set; }
            OracleDecimal? ColDoublePrecision { set; }
            OracleDecimal? ColFloat { set; }
            OracleDecimal? ColReal { set; }
            Single? ColBinaryFloat { set; }
            Double? ColBinaryDouble { set; }
            String ColVarcharMin { set; }
            String ColVarcharMax { set; }
            String ColVarchar2Min { set; }
            String ColVarchar2Max { set; }
            String ColNvarchar2Min { set; }
            String ColNvarchar2Max { set; }
            String ColCharMin { set; }
            String ColCharMax { set; }
            String ColNcharMin { set; }
            String ColNcharMax { set; }
            OracleDate? ColDate { set; }
            OracleTimeStamp? ColTimestamp { set; }
            OracleTimeStamp? ColTimestampPrec0 { set; }
            OracleTimeStamp? ColTimestampPrec9 { set; }
            OracleTimeStampTZ? ColTimestampTZ { set; }
            OracleTimeStampTZ? ColTimestampTZPrec0 { set; }
            OracleTimeStampTZ? ColTimestampTZPrec9 { set; }
            OracleTimeStampLTZ? ColTimestampLTZ { set; }
            OracleTimeStampLTZ? ColTimestampLTZPrec0 { set; }
            OracleTimeStampLTZ? ColTimestampLTZPrec9 { set; }
            OracleBlob ColBlob { set; }
            OracleClob ColClob { set; }
            OracleClob ColNclob { set; }
            String Abstract { set; }
            String Base { set; }
            String Void { set; }
            String Class { set; }
            String Namespace { set; }
            String Readonly { set; }
            String Partial { set; }
            String Const { set; }
            String Using { set; }
            String ColLast { set; }
        } // ITTableBig

        public ICollection<TypeITTableBig> ReadResultITTableBig<TypeITTableBig>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where TypeITTableBig : class, ITTableBig, new() {
            ICollection<TypeITTableBig> __ret = new List<TypeITTableBig>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    TypeITTableBig obj = new TypeITTableBig();
                    if (!rdr.IsDBNull(0)) obj.Id = (OracleDecimal?)rdr.GetOracleValue(0);
                    if (!rdr.IsDBNull(1)) obj.ColNumberId = (OracleDecimal?)rdr.GetOracleValue(1);
                    if (!rdr.IsDBNull(2)) obj.ColInteger = (OracleDecimal?)rdr.GetOracleValue(2);
                    if (!rdr.IsDBNull(3)) obj.ColInt = (OracleDecimal?)rdr.GetOracleValue(3);
                    if (!rdr.IsDBNull(4)) obj.ColSmallint = (OracleDecimal?)rdr.GetOracleValue(4);
                    if (!rdr.IsDBNull(5)) obj.ColNumeric = (OracleDecimal?)rdr.GetOracleValue(5);
                    if (!rdr.IsDBNull(6)) obj.ColDecimal = (OracleDecimal?)rdr.GetOracleValue(6);
                    if (!rdr.IsDBNull(7)) obj.ColNumber = (OracleDecimal?)rdr.GetOracleValue(7);
                    if (!rdr.IsDBNull(8)) obj.ColDoublePrecision = (OracleDecimal?)rdr.GetOracleValue(8);
                    if (!rdr.IsDBNull(9)) obj.ColFloat = (OracleDecimal?)rdr.GetOracleValue(9);
                    if (!rdr.IsDBNull(10)) obj.ColReal = (OracleDecimal?)rdr.GetOracleValue(10);
                    if (!rdr.IsDBNull(11)) obj.ColBinaryFloat = Convert.ToSingle(rdr.GetValue(11));
                    if (!rdr.IsDBNull(12)) obj.ColBinaryDouble = Convert.ToDouble(rdr.GetValue(12));
                    if (!rdr.IsDBNull(13)) obj.ColVarcharMin = Convert.ToString(rdr.GetValue(13));
                    if (!rdr.IsDBNull(14)) obj.ColVarcharMax = Convert.ToString(rdr.GetValue(14));
                    if (!rdr.IsDBNull(15)) obj.ColVarchar2Min = Convert.ToString(rdr.GetValue(15));
                    if (!rdr.IsDBNull(16)) obj.ColVarchar2Max = Convert.ToString(rdr.GetValue(16));
                    if (!rdr.IsDBNull(17)) obj.ColNvarchar2Min = Convert.ToString(rdr.GetValue(17));
                    if (!rdr.IsDBNull(18)) obj.ColNvarchar2Max = Convert.ToString(rdr.GetValue(18));
                    if (!rdr.IsDBNull(19)) obj.ColCharMin = Convert.ToString(rdr.GetValue(19));
                    if (!rdr.IsDBNull(20)) obj.ColCharMax = Convert.ToString(rdr.GetValue(20));
                    if (!rdr.IsDBNull(21)) obj.ColNcharMin = Convert.ToString(rdr.GetValue(21));
                    if (!rdr.IsDBNull(22)) obj.ColNcharMax = Convert.ToString(rdr.GetValue(22));
                    if (!rdr.IsDBNull(23)) obj.ColDate = (OracleDate?)rdr.GetOracleValue(23);
                    if (!rdr.IsDBNull(24)) obj.ColTimestamp = (OracleTimeStamp?)rdr.GetOracleValue(24);
                    if (!rdr.IsDBNull(25)) obj.ColTimestampPrec0 = (OracleTimeStamp?)rdr.GetOracleValue(25);
                    if (!rdr.IsDBNull(26)) obj.ColTimestampPrec9 = (OracleTimeStamp?)rdr.GetOracleValue(26);
                    if (!rdr.IsDBNull(27)) obj.ColTimestampTZ = (OracleTimeStampTZ?)rdr.GetOracleValue(27);
                    if (!rdr.IsDBNull(28)) obj.ColTimestampTZPrec0 = (OracleTimeStampTZ?)rdr.GetOracleValue(28);
                    if (!rdr.IsDBNull(29)) obj.ColTimestampTZPrec9 = (OracleTimeStampTZ?)rdr.GetOracleValue(29);
                    if (!rdr.IsDBNull(30)) obj.ColTimestampLTZ = (OracleTimeStampLTZ?)rdr.GetOracleValue(30);
                    if (!rdr.IsDBNull(31)) obj.ColTimestampLTZPrec0 = (OracleTimeStampLTZ?)rdr.GetOracleValue(31);
                    if (!rdr.IsDBNull(32)) obj.ColTimestampLTZPrec9 = (OracleTimeStampLTZ?)rdr.GetOracleValue(32);
                    if (!rdr.IsDBNull(33)) obj.ColBlob = (OracleBlob)rdr.GetOracleBlob(33);
                    if (!rdr.IsDBNull(34)) obj.ColClob = (OracleClob)rdr.GetOracleClob(34);
                    if (!rdr.IsDBNull(35)) obj.ColNclob = (OracleClob)rdr.GetOracleClob(35);
                    if (!rdr.IsDBNull(36)) obj.Abstract = Convert.ToString(rdr.GetValue(36));
                    if (!rdr.IsDBNull(37)) obj.Base = Convert.ToString(rdr.GetValue(37));
                    if (!rdr.IsDBNull(38)) obj.Void = Convert.ToString(rdr.GetValue(38));
                    if (!rdr.IsDBNull(39)) obj.Class = Convert.ToString(rdr.GetValue(39));
                    if (!rdr.IsDBNull(40)) obj.Namespace = Convert.ToString(rdr.GetValue(40));
                    if (!rdr.IsDBNull(41)) obj.Readonly = Convert.ToString(rdr.GetValue(41));
                    if (!rdr.IsDBNull(42)) obj.Partial = Convert.ToString(rdr.GetValue(42));
                    if (!rdr.IsDBNull(43)) obj.Const = Convert.ToString(rdr.GetValue(43));
                    if (!rdr.IsDBNull(44)) obj.Using = Convert.ToString(rdr.GetValue(44));
                    if (!rdr.IsDBNull(45)) obj.ColLast = Convert.ToString(rdr.GetValue(45));
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITTableBig

        public interface ITTableBigChar {
            OracleDecimal? Id { set; }
            String ColVarcharMin { set; }
            String ColVarcharMax { set; }
            String ColVarchar2Min { set; }
            String ColVarchar2Max { set; }
            String ColNvarchar2Min { set; }
            String ColNvarchar2Max { set; }
            String ColCharMin { set; }
            String ColCharMax { set; }
            String ColNcharMin { set; }
            String ColNcharMax { set; }
            String ColLast { set; }
        } // ITTableBigChar

        public ICollection<TypeITTableBigChar> ReadResultITTableBigChar<TypeITTableBigChar>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where TypeITTableBigChar : class, ITTableBigChar, new() {
            ICollection<TypeITTableBigChar> __ret = new List<TypeITTableBigChar>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    TypeITTableBigChar obj = new TypeITTableBigChar();
                    if (!rdr.IsDBNull(0)) obj.Id = (OracleDecimal?)rdr.GetOracleValue(0);
                    if (!rdr.IsDBNull(1)) obj.ColVarcharMin = Convert.ToString(rdr.GetValue(1));
                    if (!rdr.IsDBNull(2)) obj.ColVarcharMax = Convert.ToString(rdr.GetValue(2));
                    if (!rdr.IsDBNull(3)) obj.ColVarchar2Min = Convert.ToString(rdr.GetValue(3));
                    if (!rdr.IsDBNull(4)) obj.ColVarchar2Max = Convert.ToString(rdr.GetValue(4));
                    if (!rdr.IsDBNull(5)) obj.ColNvarchar2Min = Convert.ToString(rdr.GetValue(5));
                    if (!rdr.IsDBNull(6)) obj.ColNvarchar2Max = Convert.ToString(rdr.GetValue(6));
                    if (!rdr.IsDBNull(7)) obj.ColCharMin = Convert.ToString(rdr.GetValue(7));
                    if (!rdr.IsDBNull(8)) obj.ColCharMax = Convert.ToString(rdr.GetValue(8));
                    if (!rdr.IsDBNull(9)) obj.ColNcharMin = Convert.ToString(rdr.GetValue(9));
                    if (!rdr.IsDBNull(10)) obj.ColNcharMax = Convert.ToString(rdr.GetValue(10));
                    if (!rdr.IsDBNull(11)) obj.ColLast = Convert.ToString(rdr.GetValue(11));
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITTableBigChar

        public void DeleteRow(OracleDecimal? pId, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.DELETE_ROW", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_ID", OracleDbType.Decimal, pId, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DeleteRow

        public ICollection<TypeIFltrPkgRecUnusedTTableBigFltUnused> GetRowsTypedFltrUnused<TypeIFltrPkgRecUnusedTTableBigFltUnused>(out ICollection<TypeIFltrPkgRecUnusedTTableBigFltUnused> pRefCursor, out ICollection<TypeIFltrPkgRecUnusedTTableBigFltUnused> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeIFltrPkgRecUnusedTTableBigFltUnused : class, new() {
            ICollection<TypeIFltrPkgRecUnusedTTableBigFltUnused> __ret = new List<TypeIFltrPkgRecUnusedTTableBigFltUnused>(); pRefCursor = new List<TypeIFltrPkgRecUnusedTTableBigFltUnused>(); pRefCursor2 = new List<TypeIFltrPkgRecUnusedTTableBigFltUnused>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_FLTR_UNUSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeIFltrPkgRecUnusedTTableBigFltUnused>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeIFltrPkgRecUnusedTTableBigFltUnused>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeIFltrPkgRecUnusedTTableBigFltUnused>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedFltrUnused

        public ICollection<TypeIFltrPkgRecUnusedTTableBigFltUnused> GetRowsTypedFltrUnused<TypeIFltrPkgRecUnusedTTableBigFltUnused>(out ICollection<TypeIFltrPkgRecUnusedTTableBigFltUnused> pRefCursor, out ICollection<TypeIFltrPkgRecUnusedTTableBigFltUnused> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeIFltrPkgRecUnusedTTableBigFltUnused : class, IFltrPkgRecUnusedTTableBigFltUnused, new() {
            ICollection<TypeIFltrPkgRecUnusedTTableBigFltUnused> __ret = new List<TypeIFltrPkgRecUnusedTTableBigFltUnused>(); pRefCursor = new List<TypeIFltrPkgRecUnusedTTableBigFltUnused>(); pRefCursor2 = new List<TypeIFltrPkgRecUnusedTTableBigFltUnused>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_FLTR_UNUSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultIFltrPkgRecUnusedTTableBigFltUnused<TypeIFltrPkgRecUnusedTTableBigFltUnused>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultIFltrPkgRecUnusedTTableBigFltUnused<TypeIFltrPkgRecUnusedTTableBigFltUnused>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = ReadResultIFltrPkgRecUnusedTTableBigFltUnused<TypeIFltrPkgRecUnusedTTableBigFltUnused>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedFltrUnused

        public ICollection<TypeIFltrPkgRecUsedTTableBigFltUsed> GetRowsTypedFltrUsed<TypeIFltrPkgRecUsedTTableBigFltUsed>(out ICollection<TypeIFltrPkgRecUsedTTableBigFltUsed> pRefCursor, out ICollection<TypeIFltrPkgRecUsedTTableBigFltUsed> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeIFltrPkgRecUsedTTableBigFltUsed : class, new() {
            ICollection<TypeIFltrPkgRecUsedTTableBigFltUsed> __ret = new List<TypeIFltrPkgRecUsedTTableBigFltUsed>(); pRefCursor = new List<TypeIFltrPkgRecUsedTTableBigFltUsed>(); pRefCursor2 = new List<TypeIFltrPkgRecUsedTTableBigFltUsed>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_FLTR_USED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeIFltrPkgRecUsedTTableBigFltUsed>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeIFltrPkgRecUsedTTableBigFltUsed>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeIFltrPkgRecUsedTTableBigFltUsed>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedFltrUsed

        public ICollection<TypeIFltrPkgRecUsedTTableBigFltUsed> GetRowsTypedFltrUsed<TypeIFltrPkgRecUsedTTableBigFltUsed>(out ICollection<TypeIFltrPkgRecUsedTTableBigFltUsed> pRefCursor, out ICollection<TypeIFltrPkgRecUsedTTableBigFltUsed> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeIFltrPkgRecUsedTTableBigFltUsed : class, IFltrPkgRecUsedTTableBigFltUsed, new() {
            ICollection<TypeIFltrPkgRecUsedTTableBigFltUsed> __ret = new List<TypeIFltrPkgRecUsedTTableBigFltUsed>(); pRefCursor = new List<TypeIFltrPkgRecUsedTTableBigFltUsed>(); pRefCursor2 = new List<TypeIFltrPkgRecUsedTTableBigFltUsed>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_FLTR_USED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultIFltrPkgRecUsedTTableBigFltUsed<TypeIFltrPkgRecUsedTTableBigFltUsed>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultIFltrPkgRecUsedTTableBigFltUsed<TypeIFltrPkgRecUsedTTableBigFltUsed>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = ReadResultIFltrPkgRecUsedTTableBigFltUsed<TypeIFltrPkgRecUsedTTableBigFltUsed>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedFltrUsed

        public OracleDecimal? GetRowsTypedOut<TypeITTableBig>(out ICollection<TypeITTableBig> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableBig : class, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeITTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeITTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut

        public OracleDecimal? GetRowsTypedOut<TypeITTableBig>(out ICollection<TypeITTableBig> pRefCursor, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableBig : class, ITTableBig, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeITTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableBig<TypeITTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut

        public OracleDecimal? GetRowsTypedOut2<TypeITTableBig, TypeITTableBigChar>(out ICollection<TypeITTableBig> pRefCursor, out ICollection<TypeITTableBigChar> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableBig : class, new()
                where TypeITTableBigChar : class, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeITTableBig>(); pRefCursor2 = new List<TypeITTableBigChar>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeITTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeITTableBigChar>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2

        public OracleDecimal? GetRowsTypedOut2<TypeITTableBig, TypeITTableBigChar>(out ICollection<TypeITTableBig> pRefCursor, out ICollection<TypeITTableBigChar> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableBig : class, ITTableBig, new()
                where TypeITTableBigChar : class, ITTableBigChar, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeITTableBig>(); pRefCursor2 = new List<TypeITTableBigChar>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableBig<TypeITTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = ReadResultITTableBigChar<TypeITTableBigChar>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2

        public ICollection<TypeITTableBig> GetRowsTypedOut2Ret<TypeITTableBig, TypeITTableBigChar>(out ICollection<TypeITTableBig> pRefCursor, out ICollection<TypeITTableBigChar> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableBig : class, new()
                where TypeITTableBigChar : class, new() {
            ICollection<TypeITTableBig> __ret = new List<TypeITTableBig>(); pRefCursor = new List<TypeITTableBig>(); pRefCursor2 = new List<TypeITTableBigChar>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeITTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeITTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeITTableBigChar>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2Ret

        public ICollection<TypeITTableBig> GetRowsTypedOut2Ret<TypeITTableBig, TypeITTableBigChar>(out ICollection<TypeITTableBig> pRefCursor, out ICollection<TypeITTableBigChar> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableBig : class, ITTableBig, new()
                where TypeITTableBigChar : class, ITTableBigChar, new() {
            ICollection<TypeITTableBig> __ret = new List<TypeITTableBig>(); pRefCursor = new List<TypeITTableBig>(); pRefCursor2 = new List<TypeITTableBigChar>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableBig<TypeITTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableBig<TypeITTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = ReadResultITTableBigChar<TypeITTableBigChar>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2Ret

        public ICollection<TypeITTableBig> GetRowsTypedOutRet<TypeITTableBig>(out ICollection<TypeITTableBig> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableBig : class, new() {
            ICollection<TypeITTableBig> __ret = new List<TypeITTableBig>(); pRefCursor = new List<TypeITTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeITTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeITTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOutRet

        public ICollection<TypeITTableBig> GetRowsTypedOutRet<TypeITTableBig>(out ICollection<TypeITTableBig> pRefCursor, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableBig : class, ITTableBig, new() {
            ICollection<TypeITTableBig> __ret = new List<TypeITTableBig>(); pRefCursor = new List<TypeITTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableBig<TypeITTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableBig<TypeITTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOutRet

        public ICollection<TypeITTableBig> GetRowsTypedRet<TypeITTableBig>(
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableBig : class, new() {
            ICollection<TypeITTableBig> __ret = new List<TypeITTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeITTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet

        public ICollection<TypeITTableBig> GetRowsTypedRet<TypeITTableBig>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableBig : class, ITTableBig, new() {
            ICollection<TypeITTableBig> __ret = new List<TypeITTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableBig<TypeITTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet

        // **PROC IGNORED** - Code generation for REF CURSOR OF ROWTYPE type has not been implemented
        // public ICollection<TypeIGetRowsTypedTableRowTypeSomeRowType> GetRowsTypedTableRowType<TypeIGetRowsTypedTableRowTypeSomeRowType>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for REF CURSOR OF ROWTYPE type has not been implemented
        // public ICollection<TypeIGetRowsTypedTableRowTypeSomeRowType> GetRowsTypedTableRowType<TypeIGetRowsTypedTableRowTypeSomeRowType>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        public ICollection<TypeReturnUntyped> GetRowsUntypedFltrUnused<TypeReturnUntyped, TypeOutPRefCursorUntyped, TypeOutPRefCursor2Untyped>(out ICollection<TypeOutPRefCursorUntyped> pRefCursor, out ICollection<TypeOutPRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeReturnUntyped : class, new()
                where TypeOutPRefCursorUntyped : class, new()
                where TypeOutPRefCursor2Untyped : class, new() {
            ICollection<TypeReturnUntyped> __ret = new List<TypeReturnUntyped>(); pRefCursor = new List<TypeOutPRefCursorUntyped>(); pRefCursor2 = new List<TypeOutPRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_FLTR_UNUSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeReturnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeOutPRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeOutPRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedFltrUnused

        public DataTable GetRowsUntypedFltrUnused(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_FLTR_UNUSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedFltrUnused

        public ICollection<TypeReturnUntyped> GetRowsUntypedFltrUsed<TypeReturnUntyped, TypeOutPRefCursorUntyped, TypeOutPRefCursor2Untyped>(out ICollection<TypeOutPRefCursorUntyped> pRefCursor, out ICollection<TypeOutPRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeReturnUntyped : class, new()
                where TypeOutPRefCursorUntyped : class, new()
                where TypeOutPRefCursor2Untyped : class, new() {
            ICollection<TypeReturnUntyped> __ret = new List<TypeReturnUntyped>(); pRefCursor = new List<TypeOutPRefCursorUntyped>(); pRefCursor2 = new List<TypeOutPRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_FLTR_USED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeReturnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeOutPRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeOutPRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedFltrUsed

        public DataTable GetRowsUntypedFltrUsed(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_FLTR_USED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedFltrUsed

        public OracleDecimal? GetRowsUntypedOut<TypeOutPRefCursorUntyped>(out ICollection<TypeOutPRefCursorUntyped> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where TypeOutPRefCursorUntyped : class, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeOutPRefCursorUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeOutPRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut

        public OracleDecimal? GetRowsUntypedOut(out DataTable pRefCursor, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pRefCursor = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut

        public OracleDecimal? GetRowsUntypedOut2<TypeOutPRefCursorUntyped, TypeOutPRefCursor2Untyped>(out ICollection<TypeOutPRefCursorUntyped> pRefCursor, out ICollection<TypeOutPRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeOutPRefCursorUntyped : class, new()
                where TypeOutPRefCursor2Untyped : class, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeOutPRefCursorUntyped>(); pRefCursor2 = new List<TypeOutPRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeOutPRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeOutPRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2

        public OracleDecimal? GetRowsUntypedOut2(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2

        public ICollection<TypeReturnUntyped> GetRowsUntypedOut2Ret<TypeReturnUntyped, TypeOutPRefCursorUntyped, TypeOutPRefCursor2Untyped>(out ICollection<TypeOutPRefCursorUntyped> pRefCursor, out ICollection<TypeOutPRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeReturnUntyped : class, new()
                where TypeOutPRefCursorUntyped : class, new()
                where TypeOutPRefCursor2Untyped : class, new() {
            ICollection<TypeReturnUntyped> __ret = new List<TypeReturnUntyped>(); pRefCursor = new List<TypeOutPRefCursorUntyped>(); pRefCursor2 = new List<TypeOutPRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeReturnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeOutPRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeOutPRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2Ret

        public DataTable GetRowsUntypedOut2Ret(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2Ret

        public ICollection<TypeReturnUntyped> GetRowsUntypedOutRet<TypeReturnUntyped, TypeOutPRefCursorUntyped>(out ICollection<TypeOutPRefCursorUntyped> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where TypeReturnUntyped : class, new()
                where TypeOutPRefCursorUntyped : class, new() {
            ICollection<TypeReturnUntyped> __ret = new List<TypeReturnUntyped>(); pRefCursor = new List<TypeOutPRefCursorUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeReturnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeOutPRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOutRet

        public DataTable GetRowsUntypedOutRet(out DataTable pRefCursor, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOutRet

        public ICollection<TypeReturnUntyped> GetRowsUntypedRet<TypeReturnUntyped>(
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeReturnUntyped : class, new() {
            ICollection<TypeReturnUntyped> __ret = new List<TypeReturnUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeReturnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedRet

        public DataTable GetRowsUntypedRet(Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedRet

        public OracleDecimal? InsertRow(OracleDecimal? pColNumberId, OracleDecimal? pColInteger, OracleDecimal? pColInt, OracleDecimal? pColSmallint, 
                OracleDecimal? pColNumeric, OracleDecimal? pColDecimal, OracleDecimal? pColNumber, OracleDecimal? pColDoublePrecision, OracleDecimal? pColFloat, OracleDecimal? pColReal, 
                Single? pColBinaryFloat, Double? pColBinaryDouble, String pColVarcharMin, String pColVarcharMax, String pColVarchar2Min, String pColVarchar2Max, 
                String pColNvarchar2Min, String pColNvarchar2Max, String pColCharMin, String pColCharMax, String pColNcharMin, String pColNcharMax, 
                OracleDate? pColDate, OracleTimeStamp? pColTimestamp, OracleTimeStamp? pColTimestampPrec0, OracleTimeStamp? pColTimestampPrec9, OracleTimeStampTZ? pColTimestampTZ, OracleTimeStampTZ? pColTimestampTZPrec0, 
                OracleTimeStampTZ? pColTimestampTZPrec9, OracleTimeStampLTZ? pColTimestampLTZ, OracleTimeStampLTZ? pColTimestampLTZPrec0, OracleTimeStampLTZ? pColTimestampLTZPrec9, OracleBlob pColBlob, OracleClob pColClob, 
                OracleClob pColNclob, String @abstract, String @base, String @void, String @class, String @namespace, 
                String @readonly, String @partial, String @const, String @using, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.INSERT_ROW", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_ID", OracleDbType.Decimal, pColNumberId, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_INTEGER", OracleDbType.Decimal, pColInteger, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_INT", OracleDbType.Decimal, pColInt, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_SMALLINT", OracleDbType.Decimal, pColSmallint, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMERIC", OracleDbType.Decimal, pColNumeric, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_DECIMAL", OracleDbType.Decimal, pColDecimal, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER", OracleDbType.Decimal, pColNumber, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_DOUBLE_PRECISION", OracleDbType.Decimal, pColDoublePrecision, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_FLOAT", OracleDbType.Decimal, pColFloat, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_REAL", OracleDbType.Decimal, pColReal, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_BINARY_FLOAT", OracleDbType.BinaryFloat, pColBinaryFloat, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_BINARY_DOUBLE", OracleDbType.BinaryDouble, pColBinaryDouble, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_VARCHAR_MIN", OracleDbType.Varchar2, pColVarcharMin, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_VARCHAR_MAX", OracleDbType.Varchar2, pColVarcharMax, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_VARCHAR2_MIN", OracleDbType.Varchar2, pColVarchar2Min, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_VARCHAR2_MAX", OracleDbType.Varchar2, pColVarchar2Max, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NVARCHAR2_MIN", OracleDbType.NVarchar2, pColNvarchar2Min, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NVARCHAR2_MAX", OracleDbType.NVarchar2, pColNvarchar2Max, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_CHAR_MIN", OracleDbType.Char, pColCharMin, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_CHAR_MAX", OracleDbType.Char, pColCharMax, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NCHAR_MIN", OracleDbType.NChar, pColNcharMin, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NCHAR_MAX", OracleDbType.NChar, pColNcharMax, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_DATE", OracleDbType.Date, pColDate, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP", OracleDbType.TimeStamp, pColTimestamp, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_PREC0", OracleDbType.TimeStamp, pColTimestampPrec0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_PREC9", OracleDbType.TimeStamp, pColTimestampPrec9, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_T_Z", OracleDbType.TimeStampTZ, pColTimestampTZ, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_T_Z_PREC0", OracleDbType.TimeStampTZ, pColTimestampTZPrec0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_T_Z_PREC9", OracleDbType.TimeStampTZ, pColTimestampTZPrec9, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_L_T_Z", OracleDbType.TimeStampLTZ, pColTimestampLTZ, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_L_T_Z_PREC0", OracleDbType.TimeStampLTZ, pColTimestampLTZPrec0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_L_T_Z_PREC9", OracleDbType.TimeStampLTZ, pColTimestampLTZPrec9, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_BLOB", OracleDbType.Blob, pColBlob, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_CLOB", OracleDbType.Clob, pColClob, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NCLOB", OracleDbType.NClob, pColNclob, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("ABSTRACT", OracleDbType.Varchar2, @abstract, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("BASE", OracleDbType.Varchar2, @base, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VOID", OracleDbType.Varchar2, @void, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CLASS", OracleDbType.Varchar2, @class, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("NAMESPACE", OracleDbType.Varchar2, @namespace, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("READONLY", OracleDbType.Varchar2, @readonly, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("PARTIAL", OracleDbType.Varchar2, @partial, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CONST", OracleDbType.Varchar2, @const, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("USING", OracleDbType.Varchar2, @using, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // InsertRow

        // **PROC IGNORED** - .NET cannot send/receive a ROWTYPE type (apart from cursor)
        // public OracleDecimal? InsertRow(InsertRowPRowRowType pRow, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send a REF CURSOR type
        // public void ProcTypedCursorIn(ICollection<TypeITTableBig> pRefCursor, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send a REF CURSOR type
        // public void ProcTypedCursorInOut(ref ICollection<TypeITTableBig> pRefCursor, OracleConnection optionalPreexistingOpenConnection = null)

        public void TruncTable(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.TRUNC_TABLE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // TruncTable
    } // OdptPkgTableBig

    public sealed partial class OdptPkgTableCsKeyword : Schema.Odpt.Odpt.Safe.OdptAdapter {
        private OdptPkgTableCsKeyword() { }
        private static readonly OdptPkgTableCsKeyword _instance = new OdptPkgTableCsKeyword();
        public static OdptPkgTableCsKeyword Instance { get { return _instance; } }

        public void Proc(String @abstract, String @event, String @new, String @struct, 
                String @as, String @explicit, String @null, String @switch, String @base, String @extern, 
                String @object, String @this, String @bool, String @false, String @operator, String @throw, 
                String @break, String @finally, String @out, String @true, String @byte, String @fixed, 
                String @override, String @try, String @case, String @float, String @params, String @typeof, 
                String @catch, String @for, String @private, String @uint, String @char, String @foreach, 
                String @protected, String @ulong, String @checked, String @goto, String @public, String @unchecked, 
                String @class, String @if, String @readonly, String @unsafe, String @const, String @implicit, 
                String @ref, String @ushort, String @continue, String @in, String @return, String @using, 
                String @decimal, String @int, String @sbyte, String @virtual, String @default, String @interface, 
                String @sealed, String @volatile, String @delegate, String @internal, String @short, String @void, 
                String @do, String @is, String @sizeof, String @while, String @double, String @lock, 
                String @stackalloc, String @else, String @long, String @static, String @enum, String @namespace, 
                String @string, String @dynamic, String @get, String @let, String @partial, String @set, 
                String @value, String @var, String @where, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_CS_KEYWORD.PROC", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("ABSTRACT", OracleDbType.Varchar2, @abstract, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("EVENT", OracleDbType.Varchar2, @event, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("NEW", OracleDbType.Varchar2, @new, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("STRUCT", OracleDbType.Varchar2, @struct, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"as\"", OracleDbType.Varchar2, @as, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("EXPLICIT", OracleDbType.Varchar2, @explicit, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"null\"", OracleDbType.Varchar2, @null, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("SWITCH", OracleDbType.Varchar2, @switch, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("BASE", OracleDbType.Varchar2, @base, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("EXTERN", OracleDbType.Varchar2, @extern, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("OBJECT", OracleDbType.Varchar2, @object, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("THIS", OracleDbType.Varchar2, @this, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("BOOL", OracleDbType.Varchar2, @bool, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("FALSE", OracleDbType.Varchar2, @false, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("OPERATOR", OracleDbType.Varchar2, @operator, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("THROW", OracleDbType.Varchar2, @throw, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("BREAK", OracleDbType.Varchar2, @break, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("FINALLY", OracleDbType.Varchar2, @finally, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("OUT", OracleDbType.Varchar2, @out, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("TRUE", OracleDbType.Varchar2, @true, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("BYTE", OracleDbType.Varchar2, @byte, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("FIXED", OracleDbType.Varchar2, @fixed, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("OVERRIDE", OracleDbType.Varchar2, @override, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("TRY", OracleDbType.Varchar2, @try, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"case\"", OracleDbType.Varchar2, @case, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"float\"", OracleDbType.Varchar2, @float, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("PARAMS", OracleDbType.Varchar2, @params, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("TYPEOF", OracleDbType.Varchar2, @typeof, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CATCH", OracleDbType.Varchar2, @catch, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"for\"", OracleDbType.Varchar2, @for, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("PRIVATE", OracleDbType.Varchar2, @private, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("UINT", OracleDbType.Varchar2, @uint, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"char\"", OracleDbType.Varchar2, @char, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("FOREACH", OracleDbType.Varchar2, @foreach, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("PROTECTED", OracleDbType.Varchar2, @protected, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("ULONG", OracleDbType.Varchar2, @ulong, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CHECKED", OracleDbType.Varchar2, @checked, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"goto\"", OracleDbType.Varchar2, @goto, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"public\"", OracleDbType.Varchar2, @public, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("UNCHECKED", OracleDbType.Varchar2, @unchecked, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CLASS", OracleDbType.Varchar2, @class, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"if\"", OracleDbType.Varchar2, @if, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("READONLY", OracleDbType.Varchar2, @readonly, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("UNSAFE", OracleDbType.Varchar2, @unsafe, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CONST", OracleDbType.Varchar2, @const, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("IMPLICIT", OracleDbType.Varchar2, @implicit, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("REF", OracleDbType.Varchar2, @ref, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("USHORT", OracleDbType.Varchar2, @ushort, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CONTINUE", OracleDbType.Varchar2, @continue, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"in\"", OracleDbType.Varchar2, @in, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("RETURN", OracleDbType.Varchar2, @return, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("USING", OracleDbType.Varchar2, @using, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"decimal\"", OracleDbType.Varchar2, @decimal, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("INT", OracleDbType.Varchar2, @int, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("SBYTE", OracleDbType.Varchar2, @sbyte, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VIRTUAL", OracleDbType.Varchar2, @virtual, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"default\"", OracleDbType.Varchar2, @default, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("INTERFACE", OracleDbType.Varchar2, @interface, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("SEALED", OracleDbType.Varchar2, @sealed, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VOLATILE", OracleDbType.Varchar2, @volatile, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("DELEGATE", OracleDbType.Varchar2, @delegate, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("INTERNAL", OracleDbType.Varchar2, @internal, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("SHORT", OracleDbType.Varchar2, @short, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VOID", OracleDbType.Varchar2, @void, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("DO", OracleDbType.Varchar2, @do, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"is\"", OracleDbType.Varchar2, @is, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("SIZEOF", OracleDbType.Varchar2, @sizeof, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("WHILE", OracleDbType.Varchar2, @while, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("DOUBLE", OracleDbType.Varchar2, @double, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"lock\"", OracleDbType.Varchar2, @lock, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("STACKALLOC", OracleDbType.Varchar2, @stackalloc, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"else\"", OracleDbType.Varchar2, @else, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"long\"", OracleDbType.Varchar2, @long, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("STATIC", OracleDbType.Varchar2, @static, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("ENUM", OracleDbType.Varchar2, @enum, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("NAMESPACE", OracleDbType.Varchar2, @namespace, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("STRING", OracleDbType.Varchar2, @string, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("DYNAMIC", OracleDbType.Varchar2, @dynamic, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("GET", OracleDbType.Varchar2, @get, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("LET", OracleDbType.Varchar2, @let, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("PARTIAL", OracleDbType.Varchar2, @partial, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"set\"", OracleDbType.Varchar2, @set, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VALUE", OracleDbType.Varchar2, @value, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VAR", OracleDbType.Varchar2, @var, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"where\"", OracleDbType.Varchar2, @where, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // Proc
    } // OdptPkgTableCsKeyword

    public sealed partial class OdptPkgTableNumber : Schema.Odpt.Odpt.Safe.OdptAdapter {
        private OdptPkgTableNumber() { }
        private static readonly OdptPkgTableNumber _instance = new OdptPkgTableNumber();
        public static OdptPkgTableNumber Instance { get { return _instance; } }

        public interface ITTableNumber {
            OracleDecimal? Id { set; }
            OracleDecimal? ColNumber { set; }
            SByte? ColNumber1 { set; }
            SByte? ColNumber2 { set; }
            Int16? ColNumber3 { set; }
            Int16? ColNumber4 { set; }
            Int32? ColNumber5 { set; }
            Int32? ColNumber6 { set; }
            Int32? ColNumber7 { set; }
            Int32? ColNumber8 { set; }
            Int32? ColNumber9 { set; }
            OracleDecimal? ColNumber10 { set; }
            OracleDecimal? ColNumber18 { set; }
            OracleDecimal? ColNumber19 { set; }
            OracleDecimal? ColNumber38 { set; }
            SByte? ColNumber1Scale0 { set; }
            SByte? ColNumber2Scale0 { set; }
            Int16? ColNumber3Scale0 { set; }
            Int16? ColNumber4Scale0 { set; }
            Int32? ColNumber5Scale0 { set; }
            Int32? ColNumber9Scale0 { set; }
            OracleDecimal? ColNumber10Scale0 { set; }
            OracleDecimal? ColNumber18Scale0 { set; }
            OracleDecimal? ColNumber19Scale0 { set; }
            OracleDecimal? ColNumber28Scale0 { set; }
            OracleDecimal? ColNumber29Scale0 { set; }
            OracleDecimal? ColNumber38Scale0 { set; }
            OracleDecimal? ColNumber2Scale1 { set; }
            OracleDecimal? ColNumber5Scale3 { set; }
            OracleDecimal? ColNumber15Scale11 { set; }
            OracleDecimal? ColNumber31Scale21 { set; }
            OracleDecimal? ColNumber38Scale37 { set; }
            OracleDecimal? ColNumberLast { set; }
        } // ITTableNumber

        public ICollection<TypeITTableNumber> ReadResultITTableNumber<TypeITTableNumber>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where TypeITTableNumber : class, ITTableNumber, new() {
            ICollection<TypeITTableNumber> __ret = new List<TypeITTableNumber>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    TypeITTableNumber obj = new TypeITTableNumber();
                    if (!rdr.IsDBNull(0)) obj.Id = (OracleDecimal?)rdr.GetOracleValue(0);
                    if (!rdr.IsDBNull(1)) obj.ColNumber = (OracleDecimal?)rdr.GetOracleValue(1);
                    if (!rdr.IsDBNull(2)) obj.ColNumber1 = Convert.ToSByte(rdr.GetValue(2));
                    if (!rdr.IsDBNull(3)) obj.ColNumber2 = Convert.ToSByte(rdr.GetValue(3));
                    if (!rdr.IsDBNull(4)) obj.ColNumber3 = Convert.ToInt16(rdr.GetValue(4));
                    if (!rdr.IsDBNull(5)) obj.ColNumber4 = Convert.ToInt16(rdr.GetValue(5));
                    if (!rdr.IsDBNull(6)) obj.ColNumber5 = Convert.ToInt32(rdr.GetValue(6));
                    if (!rdr.IsDBNull(7)) obj.ColNumber6 = Convert.ToInt32(rdr.GetValue(7));
                    if (!rdr.IsDBNull(8)) obj.ColNumber7 = Convert.ToInt32(rdr.GetValue(8));
                    if (!rdr.IsDBNull(9)) obj.ColNumber8 = Convert.ToInt32(rdr.GetValue(9));
                    if (!rdr.IsDBNull(10)) obj.ColNumber9 = Convert.ToInt32(rdr.GetValue(10));
                    if (!rdr.IsDBNull(11)) obj.ColNumber10 = (OracleDecimal?)rdr.GetOracleValue(11);
                    if (!rdr.IsDBNull(12)) obj.ColNumber18 = (OracleDecimal?)rdr.GetOracleValue(12);
                    if (!rdr.IsDBNull(13)) obj.ColNumber19 = (OracleDecimal?)rdr.GetOracleValue(13);
                    if (!rdr.IsDBNull(14)) obj.ColNumber38 = (OracleDecimal?)rdr.GetOracleValue(14);
                    if (!rdr.IsDBNull(15)) obj.ColNumber1Scale0 = Convert.ToSByte(rdr.GetValue(15));
                    if (!rdr.IsDBNull(16)) obj.ColNumber2Scale0 = Convert.ToSByte(rdr.GetValue(16));
                    if (!rdr.IsDBNull(17)) obj.ColNumber3Scale0 = Convert.ToInt16(rdr.GetValue(17));
                    if (!rdr.IsDBNull(18)) obj.ColNumber4Scale0 = Convert.ToInt16(rdr.GetValue(18));
                    if (!rdr.IsDBNull(19)) obj.ColNumber5Scale0 = Convert.ToInt32(rdr.GetValue(19));
                    if (!rdr.IsDBNull(20)) obj.ColNumber9Scale0 = Convert.ToInt32(rdr.GetValue(20));
                    if (!rdr.IsDBNull(21)) obj.ColNumber10Scale0 = (OracleDecimal?)rdr.GetOracleValue(21);
                    if (!rdr.IsDBNull(22)) obj.ColNumber18Scale0 = (OracleDecimal?)rdr.GetOracleValue(22);
                    if (!rdr.IsDBNull(23)) obj.ColNumber19Scale0 = (OracleDecimal?)rdr.GetOracleValue(23);
                    if (!rdr.IsDBNull(24)) obj.ColNumber28Scale0 = (OracleDecimal?)rdr.GetOracleValue(24);
                    if (!rdr.IsDBNull(25)) obj.ColNumber29Scale0 = (OracleDecimal?)rdr.GetOracleValue(25);
                    if (!rdr.IsDBNull(26)) obj.ColNumber38Scale0 = (OracleDecimal?)rdr.GetOracleValue(26);
                    if (!rdr.IsDBNull(27)) obj.ColNumber2Scale1 = (OracleDecimal?)rdr.GetOracleValue(27);
                    if (!rdr.IsDBNull(28)) obj.ColNumber5Scale3 = (OracleDecimal?)rdr.GetOracleValue(28);
                    if (!rdr.IsDBNull(29)) obj.ColNumber15Scale11 = (OracleDecimal?)rdr.GetOracleValue(29);
                    if (!rdr.IsDBNull(30)) obj.ColNumber31Scale21 = (OracleDecimal?)rdr.GetOracleValue(30);
                    if (!rdr.IsDBNull(31)) obj.ColNumber38Scale37 = (OracleDecimal?)rdr.GetOracleValue(31);
                    if (!rdr.IsDBNull(32)) obj.ColNumberLast = (OracleDecimal?)rdr.GetOracleValue(32);
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITTableNumber

        public interface ITTableNumberDec {
            OracleDecimal? Id { set; }
            OracleDecimal? ColNumber { set; }
            OracleDecimal? ColNumber2Scale1 { set; }
            OracleDecimal? ColNumber5Scale3 { set; }
            OracleDecimal? ColNumber15Scale11 { set; }
            OracleDecimal? ColNumber31Scale21 { set; }
            OracleDecimal? ColNumber38Scale37 { set; }
            OracleDecimal? ColNumberLast { set; }
        } // ITTableNumberDec

        public ICollection<TypeITTableNumberDec> ReadResultITTableNumberDec<TypeITTableNumberDec>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where TypeITTableNumberDec : class, ITTableNumberDec, new() {
            ICollection<TypeITTableNumberDec> __ret = new List<TypeITTableNumberDec>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    TypeITTableNumberDec obj = new TypeITTableNumberDec();
                    if (!rdr.IsDBNull(0)) obj.Id = (OracleDecimal?)rdr.GetOracleValue(0);
                    if (!rdr.IsDBNull(1)) obj.ColNumber = (OracleDecimal?)rdr.GetOracleValue(1);
                    if (!rdr.IsDBNull(2)) obj.ColNumber2Scale1 = (OracleDecimal?)rdr.GetOracleValue(2);
                    if (!rdr.IsDBNull(3)) obj.ColNumber5Scale3 = (OracleDecimal?)rdr.GetOracleValue(3);
                    if (!rdr.IsDBNull(4)) obj.ColNumber15Scale11 = (OracleDecimal?)rdr.GetOracleValue(4);
                    if (!rdr.IsDBNull(5)) obj.ColNumber31Scale21 = (OracleDecimal?)rdr.GetOracleValue(5);
                    if (!rdr.IsDBNull(6)) obj.ColNumber38Scale37 = (OracleDecimal?)rdr.GetOracleValue(6);
                    if (!rdr.IsDBNull(7)) obj.ColNumberLast = (OracleDecimal?)rdr.GetOracleValue(7);
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITTableNumberDec

        public void DeleteRow(OracleDecimal? pId, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.DELETE_ROW", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_ID", OracleDbType.Decimal, pId, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DeleteRow

        public OracleDecimal? GetRowsTypedOut<TypeITTableNumber>(out ICollection<TypeITTableNumber> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableNumber : class, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeITTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeITTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut

        public OracleDecimal? GetRowsTypedOut<TypeITTableNumber>(out ICollection<TypeITTableNumber> pRefCursor, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableNumber : class, ITTableNumber, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeITTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableNumber<TypeITTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut

        public OracleDecimal? GetRowsTypedOut2<TypeITTableNumber, TypeITTableNumberDec>(out ICollection<TypeITTableNumber> pRefCursor, out ICollection<TypeITTableNumberDec> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableNumber : class, new()
                where TypeITTableNumberDec : class, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeITTableNumber>(); pRefCursor2 = new List<TypeITTableNumberDec>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeITTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeITTableNumberDec>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2

        public OracleDecimal? GetRowsTypedOut2<TypeITTableNumber, TypeITTableNumberDec>(out ICollection<TypeITTableNumber> pRefCursor, out ICollection<TypeITTableNumberDec> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableNumber : class, ITTableNumber, new()
                where TypeITTableNumberDec : class, ITTableNumberDec, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeITTableNumber>(); pRefCursor2 = new List<TypeITTableNumberDec>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableNumber<TypeITTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = ReadResultITTableNumberDec<TypeITTableNumberDec>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2

        public ICollection<TypeITTableNumber> GetRowsTypedOut2Ret<TypeITTableNumber, TypeITTableNumberDec>(out ICollection<TypeITTableNumber> pRefCursor, out ICollection<TypeITTableNumberDec> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableNumber : class, new()
                where TypeITTableNumberDec : class, new() {
            ICollection<TypeITTableNumber> __ret = new List<TypeITTableNumber>(); pRefCursor = new List<TypeITTableNumber>(); pRefCursor2 = new List<TypeITTableNumberDec>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeITTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeITTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeITTableNumberDec>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2Ret

        public ICollection<TypeITTableNumber> GetRowsTypedOut2Ret<TypeITTableNumber, TypeITTableNumberDec>(out ICollection<TypeITTableNumber> pRefCursor, out ICollection<TypeITTableNumberDec> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableNumber : class, ITTableNumber, new()
                where TypeITTableNumberDec : class, ITTableNumberDec, new() {
            ICollection<TypeITTableNumber> __ret = new List<TypeITTableNumber>(); pRefCursor = new List<TypeITTableNumber>(); pRefCursor2 = new List<TypeITTableNumberDec>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableNumber<TypeITTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableNumber<TypeITTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = ReadResultITTableNumberDec<TypeITTableNumberDec>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2Ret

        public ICollection<TypeITTableNumber> GetRowsTypedOutRet<TypeITTableNumber>(out ICollection<TypeITTableNumber> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableNumber : class, new() {
            ICollection<TypeITTableNumber> __ret = new List<TypeITTableNumber>(); pRefCursor = new List<TypeITTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeITTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeITTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOutRet

        public ICollection<TypeITTableNumber> GetRowsTypedOutRet<TypeITTableNumber>(out ICollection<TypeITTableNumber> pRefCursor, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableNumber : class, ITTableNumber, new() {
            ICollection<TypeITTableNumber> __ret = new List<TypeITTableNumber>(); pRefCursor = new List<TypeITTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableNumber<TypeITTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableNumber<TypeITTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOutRet

        public ICollection<TypeITTableNumber> GetRowsTypedRet<TypeITTableNumber>(
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableNumber : class, new() {
            ICollection<TypeITTableNumber> __ret = new List<TypeITTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeITTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet

        public ICollection<TypeITTableNumber> GetRowsTypedRet<TypeITTableNumber>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeITTableNumber : class, ITTableNumber, new() {
            ICollection<TypeITTableNumber> __ret = new List<TypeITTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableNumber<TypeITTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet

        public OracleDecimal? GetRowsUntypedOut<TypeOutPRefCursorUntyped>(out ICollection<TypeOutPRefCursorUntyped> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where TypeOutPRefCursorUntyped : class, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeOutPRefCursorUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeOutPRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut

        public OracleDecimal? GetRowsUntypedOut(out DataTable pRefCursor, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pRefCursor = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut

        public OracleDecimal? GetRowsUntypedOut2<TypeOutPRefCursorUntyped, TypeOutPRefCursor2Untyped>(out ICollection<TypeOutPRefCursorUntyped> pRefCursor, out ICollection<TypeOutPRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeOutPRefCursorUntyped : class, new()
                where TypeOutPRefCursor2Untyped : class, new() {
            OracleDecimal? __ret = null; pRefCursor = new List<TypeOutPRefCursorUntyped>(); pRefCursor2 = new List<TypeOutPRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeOutPRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeOutPRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2

        public OracleDecimal? GetRowsUntypedOut2(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2

        public ICollection<TypeReturnUntyped> GetRowsUntypedOut2Ret<TypeReturnUntyped, TypeOutPRefCursorUntyped, TypeOutPRefCursor2Untyped>(out ICollection<TypeOutPRefCursorUntyped> pRefCursor, out ICollection<TypeOutPRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeReturnUntyped : class, new()
                where TypeOutPRefCursorUntyped : class, new()
                where TypeOutPRefCursor2Untyped : class, new() {
            ICollection<TypeReturnUntyped> __ret = new List<TypeReturnUntyped>(); pRefCursor = new List<TypeOutPRefCursorUntyped>(); pRefCursor2 = new List<TypeOutPRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeReturnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeOutPRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<TypeOutPRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2Ret

        public DataTable GetRowsUntypedOut2Ret(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2Ret

        public ICollection<TypeReturnUntyped> GetRowsUntypedOutRet<TypeReturnUntyped, TypeOutPRefCursorUntyped>(out ICollection<TypeOutPRefCursorUntyped> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where TypeReturnUntyped : class, new()
                where TypeOutPRefCursorUntyped : class, new() {
            ICollection<TypeReturnUntyped> __ret = new List<TypeReturnUntyped>(); pRefCursor = new List<TypeOutPRefCursorUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeReturnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<TypeOutPRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOutRet

        public DataTable GetRowsUntypedOutRet(out DataTable pRefCursor, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOutRet

        public ICollection<TypeReturnUntyped> GetRowsUntypedRet<TypeReturnUntyped>(
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where TypeReturnUntyped : class, new() {
            ICollection<TypeReturnUntyped> __ret = new List<TypeReturnUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<TypeReturnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedRet

        public DataTable GetRowsUntypedRet(Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedRet

        public OracleDecimal? InsertRow(OracleDecimal? pColNumber, SByte? pColNumber1, SByte? pColNumber2, Int16? pColNumber3, 
                Int16? pColNumber4, Int32? pColNumber5, Int32? pColNumber6, Int32? pColNumber7, Int32? pColNumber8, Int32? pColNumber9, 
                OracleDecimal? pColNumber10, OracleDecimal? pColNumber18, OracleDecimal? pColNumber19, OracleDecimal? pColNumber38, SByte? pColNumber1Scale0, SByte? pColNumber2Scale0, 
                Int16? pColNumber3Scale0, Int16? pColNumber4Scale0, Int32? pColNumber5Scale0, Int32? pColNumber9Scale0, OracleDecimal? pColNumber10Scale0, OracleDecimal? pColNumber18Scale0, 
                OracleDecimal? pColNumber19Scale0, OracleDecimal? pColNumber28Scale0, OracleDecimal? pColNumber29Scale0, OracleDecimal? pColNumber38Scale0, OracleDecimal? pColNumber2Scale1, OracleDecimal? pColNumber5Scale3, 
                OracleDecimal? pColNumber15Scale11, OracleDecimal? pColNumber31Scale21, OracleDecimal? pColNumber38Scale37, OracleDecimal? pColNumberLast, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleDecimal? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.INSERT_ROW", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER", OracleDbType.Decimal, pColNumber, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_1", OracleDbType.Byte, pColNumber1, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_2", OracleDbType.Byte, pColNumber2, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_3", OracleDbType.Int16, pColNumber3, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_4", OracleDbType.Int16, pColNumber4, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_5", OracleDbType.Int32, pColNumber5, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_6", OracleDbType.Int32, pColNumber6, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_7", OracleDbType.Int32, pColNumber7, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_8", OracleDbType.Int32, pColNumber8, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_9", OracleDbType.Int32, pColNumber9, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_10", OracleDbType.Decimal, pColNumber10, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_18", OracleDbType.Decimal, pColNumber18, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_19", OracleDbType.Decimal, pColNumber19, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_38", OracleDbType.Decimal, pColNumber38, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_1_SCALE_0", OracleDbType.Byte, pColNumber1Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_2_SCALE_0", OracleDbType.Byte, pColNumber2Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_3_SCALE_0", OracleDbType.Int16, pColNumber3Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_4_SCALE_0", OracleDbType.Int16, pColNumber4Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_5_SCALE_0", OracleDbType.Int32, pColNumber5Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_9_SCALE_0", OracleDbType.Int32, pColNumber9Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_10_SCALE_0", OracleDbType.Decimal, pColNumber10Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_18_SCALE_0", OracleDbType.Decimal, pColNumber18Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_19_SCALE_0", OracleDbType.Decimal, pColNumber19Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_28_SCALE_0", OracleDbType.Decimal, pColNumber28Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_29_SCALE_0", OracleDbType.Decimal, pColNumber29Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_38_SCALE_0", OracleDbType.Decimal, pColNumber38Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_2_SCALE_1", OracleDbType.Decimal, pColNumber2Scale1, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_5_SCALE_3", OracleDbType.Decimal, pColNumber5Scale3, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_15_SCALE_11", OracleDbType.Decimal, pColNumber15Scale11, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_31_SCALE_21", OracleDbType.Decimal, pColNumber31Scale21, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_38_SCALE_37", OracleDbType.Decimal, pColNumber38Scale37, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_LAST", OracleDbType.Decimal, pColNumberLast, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? OracleDecimal.Null
                        : (OracleDecimal?)__cmd.Parameters["!RETURN"].Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // InsertRow

        // **PROC IGNORED** - .NET cannot send/receive a ROWTYPE type (apart from cursor)
        // public OracleDecimal? InsertRow(InsertRowPRowRowType pRow, OracleConnection optionalPreexistingOpenConnection = null)

        public void TruncTable(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.TRUNC_TABLE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // TruncTable
    } // OdptPkgTableNumber
} // Schema.Odpt.Odpt.Safe.Package