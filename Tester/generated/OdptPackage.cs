//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by Odapter 1.07.
//     Direct edits will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using Oracle.ManagedDataAccess.Client;
using Oracle.ManagedDataAccess.Types;
using System.Collections;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Serialization;
using System.Linq;
using Odapter;

namespace Schema.Odpt.Package {

    public sealed partial class FltrPkgEmpty : Schema.Odpt.OdptAdapter {
        private FltrPkgEmpty() { }
        private static readonly FltrPkgEmpty _instance = new FltrPkgEmpty();
        public static FltrPkgEmpty Instance { get { return _instance; } }
    } // FltrPkgEmpty

    public sealed partial class FltrPkgRecUnused : Schema.Odpt.OdptAdapter {
        private FltrPkgRecUnused() { }
        private static readonly FltrPkgRecUnused _instance = new FltrPkgRecUnused();
        public static FltrPkgRecUnused Instance { get { return _instance; } }
    } // FltrPkgRecUnused

    public sealed partial class FltrPkgRecUsed : Schema.Odpt.OdptAdapter {
        private FltrPkgRecUsed() { }
        private static readonly FltrPkgRecUsed _instance = new FltrPkgRecUsed();
        public static FltrPkgRecUsed Instance { get { return _instance; } }

        public interface ITTableBigFltUsed {
            Int64? Id { set; }
            Int64? ColNumberId { set; }
            Int64? ColInteger { set; }
            Int64? ColInt { set; }
            Int64? ColSmallint { set; }
            Int64? ColNumeric { set; }
            Int64? ColDecimal { set; }
            Decimal? ColNumber { set; }
            Decimal? ColDoublePrecision { set; }
            Decimal? ColFloat { set; }
            Decimal? ColReal { set; }
            Single? ColBinaryFloat { set; }
            Double? ColBinaryDouble { set; }
            String ColVarcharMin { set; }
            String ColVarcharMax { set; }
            String ColVarchar2Min { set; }
            String ColVarchar2Max { set; }
            String ColNvarchar2Min { set; }
            String ColNvarchar2Max { set; }
            String ColCharMin { set; }
            String ColCharMax { set; }
            String ColNcharMin { set; }
            String ColNcharMax { set; }
            DateTime? ColDate { set; }
            DateTime? ColTimestamp { set; }
            DateTime? ColTimestampPrec0 { set; }
            DateTime? ColTimestampPrec9 { set; }
            DateTimeOffset? ColTimestampTZ { set; }
            DateTimeOffset? ColTimestampTZPrec0 { set; }
            DateTimeOffset? ColTimestampTZPrec9 { set; }
            DateTime? ColTimestampLTZ { set; }
            DateTime? ColTimestampLTZPrec0 { set; }
            DateTime? ColTimestampLTZPrec9 { set; }
            Byte[] ColBlob { set; }
            String ColClob { set; }
            String ColNclob { set; }
            String Abstract { set; }
            String Base { set; }
            String Void { set; }
            String Class { set; }
            String Namespace { set; }
            String Readonly { set; }
            String Partial { set; }
            String Const { set; }
            String Using { set; }
            String ColLast { set; }
        } // ITTableBigFltUsed

        [DataContract(Namespace="http://odpt.business.com")][Serializable()]
        public abstract partial class TTableBigFltUsed : Schema.Odpt.OdptPackageRecord, ITTableBigFltUsed {
            private Byte propertyToEnsuresPartialClassNamesAreUniqueAtCompileTime { get; set; }
            [DataMember(Order=0, IsRequired=false)][XmlElement(Order=0, IsNullable=true)]
            public virtual Int64? Id { get { return this.id; } set { this.id = value; } } protected Int64? id;
            [DataMember(Order=1, IsRequired=false)][XmlElement(Order=1, IsNullable=true)]
            public virtual Int64? ColNumberId { get { return this.colNumberId; } set { this.colNumberId = value; } } protected Int64? colNumberId;
            [DataMember(Order=2, IsRequired=false)][XmlElement(Order=2, IsNullable=true)]
            public virtual Int64? ColInteger { get { return this.colInteger; } set { this.colInteger = value; } } protected Int64? colInteger;
            [DataMember(Order=3, IsRequired=false)][XmlElement(Order=3, IsNullable=true)]
            public virtual Int64? ColInt { get { return this.colInt; } set { this.colInt = value; } } protected Int64? colInt;
            [DataMember(Order=4, IsRequired=false)][XmlElement(Order=4, IsNullable=true)]
            public virtual Int64? ColSmallint { get { return this.colSmallint; } set { this.colSmallint = value; } } protected Int64? colSmallint;
            [DataMember(Order=5, IsRequired=false)][XmlElement(Order=5, IsNullable=true)]
            public virtual Int64? ColNumeric { get { return this.colNumeric; } set { this.colNumeric = value; } } protected Int64? colNumeric;
            [DataMember(Order=6, IsRequired=false)][XmlElement(Order=6, IsNullable=true)]
            public virtual Int64? ColDecimal { get { return this.colDecimal; } set { this.colDecimal = value; } } protected Int64? colDecimal;
            [DataMember(Order=7, IsRequired=false)][XmlElement(Order=7, IsNullable=true)]
            public virtual Decimal? ColNumber { get { return this.colNumber; } set { this.colNumber = value; } } protected Decimal? colNumber;
            [DataMember(Order=8, IsRequired=false)][XmlElement(Order=8, IsNullable=true)]
            public virtual Decimal? ColDoublePrecision { get { return this.colDoublePrecision; } set { this.colDoublePrecision = value; } } protected Decimal? colDoublePrecision;
            [DataMember(Order=9, IsRequired=false)][XmlElement(Order=9, IsNullable=true)]
            public virtual Decimal? ColFloat { get { return this.colFloat; } set { this.colFloat = value; } } protected Decimal? colFloat;
            [DataMember(Order=10, IsRequired=false)][XmlElement(Order=10, IsNullable=true)]
            public virtual Decimal? ColReal { get { return this.colReal; } set { this.colReal = value; } } protected Decimal? colReal;
            [DataMember(Order=11, IsRequired=false)][XmlElement(Order=11, IsNullable=true)]
            public virtual Single? ColBinaryFloat { get { return this.colBinaryFloat; } set { this.colBinaryFloat = value; } } protected Single? colBinaryFloat;
            [DataMember(Order=12, IsRequired=false)][XmlElement(Order=12, IsNullable=true)]
            public virtual Double? ColBinaryDouble { get { return this.colBinaryDouble; } set { this.colBinaryDouble = value; } } protected Double? colBinaryDouble;
            [DataMember(Order=13, IsRequired=false)][XmlElement(Order=13, IsNullable=true)]
            public virtual String ColVarcharMin { get { return this.colVarcharMin; } set { this.colVarcharMin = value; } } protected String colVarcharMin;
            [DataMember(Order=14, IsRequired=false)][XmlElement(Order=14, IsNullable=true)]
            public virtual String ColVarcharMax { get { return this.colVarcharMax; } set { this.colVarcharMax = value; } } protected String colVarcharMax;
            [DataMember(Order=15, IsRequired=false)][XmlElement(Order=15, IsNullable=true)]
            public virtual String ColVarchar2Min { get { return this.colVarchar2Min; } set { this.colVarchar2Min = value; } } protected String colVarchar2Min;
            [DataMember(Order=16, IsRequired=false)][XmlElement(Order=16, IsNullable=true)]
            public virtual String ColVarchar2Max { get { return this.colVarchar2Max; } set { this.colVarchar2Max = value; } } protected String colVarchar2Max;
            [DataMember(Order=17, IsRequired=false)][XmlElement(Order=17, IsNullable=true)]
            public virtual String ColNvarchar2Min { get { return this.colNvarchar2Min; } set { this.colNvarchar2Min = value; } } protected String colNvarchar2Min;
            [DataMember(Order=18, IsRequired=false)][XmlElement(Order=18, IsNullable=true)]
            public virtual String ColNvarchar2Max { get { return this.colNvarchar2Max; } set { this.colNvarchar2Max = value; } } protected String colNvarchar2Max;
            [DataMember(Order=19, IsRequired=false)][XmlElement(Order=19, IsNullable=true)]
            public virtual String ColCharMin { get { return this.colCharMin; } set { this.colCharMin = value; } } protected String colCharMin;
            [DataMember(Order=20, IsRequired=false)][XmlElement(Order=20, IsNullable=true)]
            public virtual String ColCharMax { get { return this.colCharMax; } set { this.colCharMax = value; } } protected String colCharMax;
            [DataMember(Order=21, IsRequired=false)][XmlElement(Order=21, IsNullable=true)]
            public virtual String ColNcharMin { get { return this.colNcharMin; } set { this.colNcharMin = value; } } protected String colNcharMin;
            [DataMember(Order=22, IsRequired=false)][XmlElement(Order=22, IsNullable=true)]
            public virtual String ColNcharMax { get { return this.colNcharMax; } set { this.colNcharMax = value; } } protected String colNcharMax;
            [DataMember(Order=23, IsRequired=false)][XmlElement(Order=23, IsNullable=true)]
            public virtual DateTime? ColDate { get { return this.colDate; } set { this.colDate = value; } } protected DateTime? colDate;
            [DataMember(Order=24, IsRequired=false)][XmlElement(Order=24, IsNullable=true)]
            public virtual DateTime? ColTimestamp { get { return this.colTimestamp; } set { this.colTimestamp = value; } } protected DateTime? colTimestamp;
            [DataMember(Order=25, IsRequired=false)][XmlElement(Order=25, IsNullable=true)]
            public virtual DateTime? ColTimestampPrec0 { get { return this.colTimestampPrec0; } set { this.colTimestampPrec0 = value; } } protected DateTime? colTimestampPrec0;
            [DataMember(Order=26, IsRequired=false)][XmlElement(Order=26, IsNullable=true)]
            public virtual DateTime? ColTimestampPrec9 { get { return this.colTimestampPrec9; } set { this.colTimestampPrec9 = value; } } protected DateTime? colTimestampPrec9;
            [DataMember(Order=27, IsRequired=false)][XmlElement(Order=27, IsNullable=true)]
            public virtual DateTimeOffset? ColTimestampTZ { get { return this.colTimestampTZ; } set { this.colTimestampTZ = value; } } protected DateTimeOffset? colTimestampTZ;
            [DataMember(Order=28, IsRequired=false)][XmlElement(Order=28, IsNullable=true)]
            public virtual DateTimeOffset? ColTimestampTZPrec0 { get { return this.colTimestampTZPrec0; } set { this.colTimestampTZPrec0 = value; } } protected DateTimeOffset? colTimestampTZPrec0;
            [DataMember(Order=29, IsRequired=false)][XmlElement(Order=29, IsNullable=true)]
            public virtual DateTimeOffset? ColTimestampTZPrec9 { get { return this.colTimestampTZPrec9; } set { this.colTimestampTZPrec9 = value; } } protected DateTimeOffset? colTimestampTZPrec9;
            [DataMember(Order=30, IsRequired=false)][XmlElement(Order=30, IsNullable=true)]
            public virtual DateTime? ColTimestampLTZ { get { return this.colTimestampLTZ; } set { this.colTimestampLTZ = value; } } protected DateTime? colTimestampLTZ;
            [DataMember(Order=31, IsRequired=false)][XmlElement(Order=31, IsNullable=true)]
            public virtual DateTime? ColTimestampLTZPrec0 { get { return this.colTimestampLTZPrec0; } set { this.colTimestampLTZPrec0 = value; } } protected DateTime? colTimestampLTZPrec0;
            [DataMember(Order=32, IsRequired=false)][XmlElement(Order=32, IsNullable=true)]
            public virtual DateTime? ColTimestampLTZPrec9 { get { return this.colTimestampLTZPrec9; } set { this.colTimestampLTZPrec9 = value; } } protected DateTime? colTimestampLTZPrec9;
            [DataMember(Order=33, IsRequired=false)][XmlElement(Order=33, IsNullable=true)]
            public virtual Byte[] ColBlob { get { return this.colBlob; } set { this.colBlob = value; } } protected Byte[] colBlob;
            [DataMember(Order=34, IsRequired=false)][XmlElement(Order=34, IsNullable=true)]
            public virtual String ColClob { get { return this.colClob; } set { this.colClob = value; } } protected String colClob;
            [DataMember(Order=35, IsRequired=false)][XmlElement(Order=35, IsNullable=true)]
            public virtual String ColNclob { get { return this.colNclob; } set { this.colNclob = value; } } protected String colNclob;
            [DataMember(Order=36, IsRequired=false)][XmlElement(Order=36, IsNullable=true)]
            public virtual String Abstract { get { return this.@abstract; } set { this.@abstract = value; } } protected String @abstract;
            [DataMember(Order=37, IsRequired=false)][XmlElement(Order=37, IsNullable=true)]
            public virtual String Base { get { return this.@base; } set { this.@base = value; } } protected String @base;
            [DataMember(Order=38, IsRequired=false)][XmlElement(Order=38, IsNullable=true)]
            public virtual String Void { get { return this.@void; } set { this.@void = value; } } protected String @void;
            [DataMember(Order=39, IsRequired=false)][XmlElement(Order=39, IsNullable=true)]
            public virtual String Class { get { return this.@class; } set { this.@class = value; } } protected String @class;
            [DataMember(Order=40, IsRequired=false)][XmlElement(Order=40, IsNullable=true)]
            public virtual String Namespace { get { return this.@namespace; } set { this.@namespace = value; } } protected String @namespace;
            [DataMember(Order=41, IsRequired=false)][XmlElement(Order=41, IsNullable=true)]
            public virtual String Readonly { get { return this.@readonly; } set { this.@readonly = value; } } protected String @readonly;
            [DataMember(Order=42, IsRequired=false)][XmlElement(Order=42, IsNullable=true)]
            public virtual String Partial { get { return this.@partial; } set { this.@partial = value; } } protected String @partial;
            [DataMember(Order=43, IsRequired=false)][XmlElement(Order=43, IsNullable=true)]
            public virtual String Const { get { return this.@const; } set { this.@const = value; } } protected String @const;
            [DataMember(Order=44, IsRequired=false)][XmlElement(Order=44, IsNullable=true)]
            public virtual String Using { get { return this.@using; } set { this.@using = value; } } protected String @using;
            [DataMember(Order=45, IsRequired=false)][XmlElement(Order=45, IsNullable=true)]
            public virtual String ColLast { get { return this.colLast; } set { this.colLast = value; } } protected String colLast;
        } // TTableBigFltUsed

        public ICollection<T_TTableBigFltUsed> ReadResultITTableBigFltUsed<T_TTableBigFltUsed>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where T_TTableBigFltUsed : class, ITTableBigFltUsed, new()   {
            ICollection<T_TTableBigFltUsed> __ret = new List<T_TTableBigFltUsed>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    T_TTableBigFltUsed obj = new T_TTableBigFltUsed();
                    if (!rdr.IsDBNull(0)) obj.Id = Convert.ToInt64(rdr.GetValue(0));
                    if (!rdr.IsDBNull(1)) obj.ColNumberId = Convert.ToInt64(rdr.GetValue(1));
                    if (!rdr.IsDBNull(2)) obj.ColInteger = Convert.ToInt64(rdr.GetValue(2));
                    if (!rdr.IsDBNull(3)) obj.ColInt = Convert.ToInt64(rdr.GetValue(3));
                    if (!rdr.IsDBNull(4)) obj.ColSmallint = Convert.ToInt64(rdr.GetValue(4));
                    if (!rdr.IsDBNull(5)) obj.ColNumeric = Convert.ToInt64(rdr.GetValue(5));
                    if (!rdr.IsDBNull(6)) obj.ColDecimal = Convert.ToInt64(rdr.GetValue(6));
                    if (!rdr.IsDBNull(7)) obj.ColNumber = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(7), 28);
                    if (!rdr.IsDBNull(8)) obj.ColDoublePrecision = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(8), 28);
                    if (!rdr.IsDBNull(9)) obj.ColFloat = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(9), 28);
                    if (!rdr.IsDBNull(10)) obj.ColReal = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(10), 28);
                    if (!rdr.IsDBNull(11)) obj.ColBinaryFloat = Convert.ToSingle(rdr.GetValue(11));
                    if (!rdr.IsDBNull(12)) obj.ColBinaryDouble = Convert.ToDouble(rdr.GetValue(12));
                    if (!rdr.IsDBNull(13)) obj.ColVarcharMin = Convert.ToString(rdr.GetValue(13));
                    if (!rdr.IsDBNull(14)) obj.ColVarcharMax = Convert.ToString(rdr.GetValue(14));
                    if (!rdr.IsDBNull(15)) obj.ColVarchar2Min = Convert.ToString(rdr.GetValue(15));
                    if (!rdr.IsDBNull(16)) obj.ColVarchar2Max = Convert.ToString(rdr.GetValue(16));
                    if (!rdr.IsDBNull(17)) obj.ColNvarchar2Min = Convert.ToString(rdr.GetValue(17));
                    if (!rdr.IsDBNull(18)) obj.ColNvarchar2Max = Convert.ToString(rdr.GetValue(18));
                    if (!rdr.IsDBNull(19)) obj.ColCharMin = Convert.ToString(rdr.GetValue(19));
                    if (!rdr.IsDBNull(20)) obj.ColCharMax = Convert.ToString(rdr.GetValue(20));
                    if (!rdr.IsDBNull(21)) obj.ColNcharMin = Convert.ToString(rdr.GetValue(21));
                    if (!rdr.IsDBNull(22)) obj.ColNcharMax = Convert.ToString(rdr.GetValue(22));
                    if (!rdr.IsDBNull(23)) obj.ColDate = Convert.ToDateTime(rdr.GetValue(23));
                    if (!rdr.IsDBNull(24)) obj.ColTimestamp = Convert.ToDateTime(rdr.GetValue(24));
                    if (!rdr.IsDBNull(25)) obj.ColTimestampPrec0 = Convert.ToDateTime(rdr.GetValue(25));
                    if (!rdr.IsDBNull(26)) obj.ColTimestampPrec9 = Convert.ToDateTime(rdr.GetValue(26));
                    if (!rdr.IsDBNull(27)) obj.ColTimestampTZ = DateTimeOffset.Parse(rdr.GetValue(27).ToString());
                    if (!rdr.IsDBNull(28)) obj.ColTimestampTZPrec0 = DateTimeOffset.Parse(rdr.GetValue(28).ToString());
                    if (!rdr.IsDBNull(29)) obj.ColTimestampTZPrec9 = DateTimeOffset.Parse(rdr.GetValue(29).ToString());
                    if (!rdr.IsDBNull(30)) obj.ColTimestampLTZ = Convert.ToDateTime(rdr.GetValue(30));
                    if (!rdr.IsDBNull(31)) obj.ColTimestampLTZPrec0 = Convert.ToDateTime(rdr.GetValue(31));
                    if (!rdr.IsDBNull(32)) obj.ColTimestampLTZPrec9 = Convert.ToDateTime(rdr.GetValue(32));
                    if (!rdr.IsDBNull(33)) obj.ColBlob = rdr.GetOracleBlob(33).Value;
                    if (!rdr.IsDBNull(34)) obj.ColClob = rdr.GetOracleClob(34).Value;
                    if (!rdr.IsDBNull(35)) obj.ColNclob = rdr.GetOracleClob(35).Value;
                    if (!rdr.IsDBNull(36)) obj.Abstract = Convert.ToString(rdr.GetValue(36));
                    if (!rdr.IsDBNull(37)) obj.Base = Convert.ToString(rdr.GetValue(37));
                    if (!rdr.IsDBNull(38)) obj.Void = Convert.ToString(rdr.GetValue(38));
                    if (!rdr.IsDBNull(39)) obj.Class = Convert.ToString(rdr.GetValue(39));
                    if (!rdr.IsDBNull(40)) obj.Namespace = Convert.ToString(rdr.GetValue(40));
                    if (!rdr.IsDBNull(41)) obj.Readonly = Convert.ToString(rdr.GetValue(41));
                    if (!rdr.IsDBNull(42)) obj.Partial = Convert.ToString(rdr.GetValue(42));
                    if (!rdr.IsDBNull(43)) obj.Const = Convert.ToString(rdr.GetValue(43));
                    if (!rdr.IsDBNull(44)) obj.Using = Convert.ToString(rdr.GetValue(44));
                    if (!rdr.IsDBNull(45)) obj.ColLast = Convert.ToString(rdr.GetValue(45));
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITTableBigFltUsed

        public ICollection<T_TTableBigFltUsed> GetRowsTypedRet<T_TTableBigFltUsed>(
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBigFltUsed : class, new() {
            ICollection<T_TTableBigFltUsed> __ret = new List<T_TTableBigFltUsed>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.FLTR_PKG_REC_USED.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_TTableBigFltUsed>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet

        public ICollection<T_TTableBigFltUsed> GetRowsTypedRet<T_TTableBigFltUsed>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBigFltUsed : class, ITTableBigFltUsed, new() {
            ICollection<T_TTableBigFltUsed> __ret = new List<T_TTableBigFltUsed>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.FLTR_PKG_REC_USED.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableBigFltUsed<T_TTableBigFltUsed>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet
    } // FltrPkgRecUsed

    public sealed partial class OdptPkgEmpty : Schema.Odpt.OdptAdapter {
        private OdptPkgEmpty() { }
        private static readonly OdptPkgEmpty _instance = new OdptPkgEmpty();
        public static OdptPkgEmpty Instance { get { return _instance; } }
    } // OdptPkgEmpty

    public sealed partial class OdptPkgIncludeexclamationpointchar : Schema.Odpt.OdptAdapter {
        private OdptPkgIncludeexclamationpointchar() { }
        private static readonly OdptPkgIncludeexclamationpointchar _instance = new OdptPkgIncludeexclamationpointchar();
        public static OdptPkgIncludeexclamationpointchar Instance { get { return _instance; } }
    } // OdptPkgIncludeexclamationpointchar

    public sealed partial class OdptPkgIncludepercentchar : Schema.Odpt.OdptAdapter {
        private OdptPkgIncludepercentchar() { }
        private static readonly OdptPkgIncludepercentchar _instance = new OdptPkgIncludepercentchar();
        public static OdptPkgIncludepercentchar Instance { get { return _instance; } }
    } // OdptPkgIncludepercentchar

    public sealed partial class OdptPkgIncludeampersandchar : Schema.Odpt.OdptAdapter {
        private OdptPkgIncludeampersandchar() { }
        private static readonly OdptPkgIncludeampersandchar _instance = new OdptPkgIncludeampersandchar();
        public static OdptPkgIncludeampersandchar Instance { get { return _instance; } }
    } // OdptPkgIncludeampersandchar

    public sealed partial class OdptPkgLog : Schema.Odpt.OdptAdapter {
        private OdptPkgLog() { }
        private static readonly OdptPkgLog _instance = new OdptPkgLog();
        public static OdptPkgLog Instance { get { return _instance; } }

        public void DeleteLog(SByte? pSeverity, DateTime? pToDate, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.DELETE_LOG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SEVERITY", OracleDbType.Byte, pSeverity, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_TO_DATE", OracleDbType.TimeStamp, pToDate, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DeleteLog

        public void GetDistinctCriteria(out IList<String> pSources, out IList<String> pInterfaces, out IList<String> pUserNames, Decimal? pMaxAgeInDays = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            pSources = new List<String>(); pInterfaces = new List<String>(); pUserNames = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.GET_DISTINCT_CRITERIA", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("P_SOURCES", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_SOURCES"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_SOURCES"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_SOURCES"].ArrayBindSize[_i] = 100; }

                    __cmd.Parameters.Add(new OracleParameter("P_INTERFACES", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_INTERFACES"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_INTERFACES"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_INTERFACES"].ArrayBindSize[_i] = 200; }

                    __cmd.Parameters.Add(new OracleParameter("P_USER_NAMES", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_USER_NAMES"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_USER_NAMES"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_USER_NAMES"].ArrayBindSize[_i] = 128; }
                    if (pMaxAgeInDays != null) __cmd.Parameters.Add(new OracleParameter("P_MAX_AGE_IN_DAYS", OracleDbType.Decimal, pMaxAgeInDays, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    pSources = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_SOURCES"].Value as OracleString[]).Length; _i++)
                        pSources.Add((__cmd.Parameters["P_SOURCES"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_SOURCES"].Value as OracleString[])[_i].ToString())));

                    pInterfaces = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_INTERFACES"].Value as OracleString[]).Length; _i++)
                        pInterfaces.Add((__cmd.Parameters["P_INTERFACES"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_INTERFACES"].Value as OracleString[])[_i].ToString())));

                    pUserNames = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_USER_NAMES"].Value as OracleString[]).Length; _i++)
                        pUserNames.Add((__cmd.Parameters["P_USER_NAMES"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_USER_NAMES"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // GetDistinctCriteria

        public ICollection<T_returnUntyped> GetLog<T_returnUntyped>(DateTime? pLogDtFrom = null, DateTime? pLogDtTo = null, String pUserName = null, String pInterface = null, 
                SByte? pSeverity = null, String pSource = null, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_returnUntyped : class, new() {
            ICollection<T_returnUntyped> __ret = new List<T_returnUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.GET_LOG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    if (pLogDtFrom != null) __cmd.Parameters.Add(new OracleParameter("P_LOG_DT_FROM", OracleDbType.TimeStamp, pLogDtFrom, ParameterDirection.Input));
                    if (pLogDtTo != null) __cmd.Parameters.Add(new OracleParameter("P_LOG_DT_TO", OracleDbType.TimeStamp, pLogDtTo, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));
                    if (pSeverity != null) __cmd.Parameters.Add(new OracleParameter("P_SEVERITY", OracleDbType.Byte, pSeverity, ParameterDirection.Input));
                    if (pSource != null) __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_returnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetLog

        public DataTable GetLog(DateTime? pLogDtFrom = null, DateTime? pLogDtTo = null, String pUserName = null, String pInterface = null, 
                SByte? pSeverity = null, String pSource = null, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.GET_LOG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    if (pLogDtFrom != null) __cmd.Parameters.Add(new OracleParameter("P_LOG_DT_FROM", OracleDbType.TimeStamp, pLogDtFrom, ParameterDirection.Input));
                    if (pLogDtTo != null) __cmd.Parameters.Add(new OracleParameter("P_LOG_DT_TO", OracleDbType.TimeStamp, pLogDtTo, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));
                    if (pSeverity != null) __cmd.Parameters.Add(new OracleParameter("P_SEVERITY", OracleDbType.Byte, pSeverity, ParameterDirection.Input));
                    if (pSource != null) __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetLog

        public void GetSeverity(out IList<SByte?> pSeverities, out IList<String> pSeverityDescriptions, OracleConnection optionalPreexistingOpenConnection = null) {
            pSeverities = new List<SByte?>(); pSeverityDescriptions = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.GET_SEVERITY", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("P_SEVERITIES", OracleDbType.Byte, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_SEVERITIES"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_SEVERITY_DESCRIPTIONS", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].ArrayBindSize[_i] = 10; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    pSeverities = new List<SByte?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_SEVERITIES"].Value as OracleDecimal[]).Length; _i++)
                        pSeverities.Add((__cmd.Parameters["P_SEVERITIES"].Value as OracleDecimal[])[_i].IsNull
                            ? (SByte?)null 
                            : Convert.ToSByte(((__cmd.Parameters["P_SEVERITIES"].Value as OracleDecimal[])[_i].ToString())));

                    pSeverityDescriptions = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].Value as OracleString[]).Length; _i++)
                        pSeverityDescriptions.Add((__cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_SEVERITY_DESCRIPTIONS"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // GetSeverity

        public void InsertLog(SByte? pSeverity, String pSource, String pMsg, String pUserName = null, 
                String pInterface = null, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.INSERT_LOG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SEVERITY", OracleDbType.Byte, pSeverity, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // InsertLog

        public void InsertLogDebug(String pSource, String pMsg, String pUserName = null, String pInterface = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.INSERT_LOG_DEBUG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // InsertLogDebug

        public void InsertLogError(String pSource, String pMsg, String pUserName = null, String pInterface = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.INSERT_LOG_ERROR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // InsertLogError

        public void InsertLogInfo(String pSource, String pMsg, String pUserName = null, String pInterface = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.INSERT_LOG_INFO", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // InsertLogInfo

        public void InsertLogWarning(String pSource, String pMsg, String pUserName = null, String pInterface = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.INSERT_LOG_WARNING", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_SOURCE", OracleDbType.Varchar2, pSource, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));
                    if (pUserName != null) __cmd.Parameters.Add(new OracleParameter("P_USER_NAME", OracleDbType.Varchar2, pUserName, ParameterDirection.Input));
                    if (pInterface != null) __cmd.Parameters.Add(new OracleParameter("P_INTERFACE", OracleDbType.Varchar2, pInterface, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // InsertLogWarning

        public void LogMsg(String pPkg, String pProc, String pMsg, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.LOG_MSG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_PKG", OracleDbType.Varchar2, pPkg, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PROC", OracleDbType.Varchar2, pProc, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_MSG", OracleDbType.Varchar2, pMsg, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // LogMsg

        public void SetLogOff(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.SET_LOG_OFF", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // SetLogOff

        public void SetLogOn(Decimal? pMethod = null, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.SET_LOG_ON", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    if (pMethod != null) __cmd.Parameters.Add(new OracleParameter("P_METHOD", OracleDbType.Decimal, pMethod, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // SetLogOn

        public SByte? TypeSeverityDebug(OracleConnection optionalPreexistingOpenConnection = null) {
            SByte? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.TYPE_SEVERITY_DEBUG", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Byte, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (SByte?)null
                        : Convert.ToSByte(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // TypeSeverityDebug

        public SByte? TypeSeverityError(OracleConnection optionalPreexistingOpenConnection = null) {
            SByte? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.TYPE_SEVERITY_ERROR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Byte, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (SByte?)null
                        : Convert.ToSByte(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // TypeSeverityError

        public SByte? TypeSeverityInfo(OracleConnection optionalPreexistingOpenConnection = null) {
            SByte? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.TYPE_SEVERITY_INFO", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Byte, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (SByte?)null
                        : Convert.ToSByte(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // TypeSeverityInfo

        public SByte? TypeSeverityWarning(OracleConnection optionalPreexistingOpenConnection = null) {
            SByte? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_LOG.TYPE_SEVERITY_WARNING", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Byte, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (SByte?)null
                        : Convert.ToSByte(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // TypeSeverityWarning
    } // OdptPkgLog

    public sealed partial class OdptPkgMain : Schema.Odpt.OdptAdapter {
        private OdptPkgMain() { }
        private static readonly OdptPkgMain _instance = new OdptPkgMain();
        public static OdptPkgMain Instance { get { return _instance; } }

        // **RECORD IGNORED** - .NET cannot send/receive an associative array type field in a record
        // public abstract partial class TIgnoreAaInteger : Schema.Odpt.OdptPackageRecord, ITIgnoreAaInteger {

        // **RECORD IGNORED** - Code generation for BFILE type has not been implemented
        // public abstract partial class TIgnoreBfile : Schema.Odpt.OdptPackageRecord, ITIgnoreBfile {

        // **RECORD IGNORED** - .NET cannot send/receive a PL/SQL BOOLEAN type
        // public abstract partial class TIgnoreBoolean : Schema.Odpt.OdptPackageRecord, ITIgnoreBoolean {

        // **RECORD IGNORED** - Code generation for LONG type will not be implemented due to Oracle deprecation
        // public abstract partial class TIgnoreLong : Schema.Odpt.OdptPackageRecord, ITIgnoreLong {

        // **RECORD IGNORED** - Code generation for LONG RAW type will not be implemented due to Oracle deprecation
        // public abstract partial class TIgnoreLongRaw : Schema.Odpt.OdptPackageRecord, ITIgnoreLongRaw {

        // **RECORD IGNORED** - Code generation for RAW type has not been implemented
        // public abstract partial class TIgnoreRaw : Schema.Odpt.OdptPackageRecord, ITIgnoreRaw {

        // **RECORD IGNORED** - Code generation for ROWID type has not been implemented
        // public abstract partial class TIgnoreRowid : Schema.Odpt.OdptPackageRecord, ITIgnoreRowid {

        // **RECORD IGNORED** - Code generation for UROWID type has not been implemented
        // public abstract partial class TIgnoreUrowid : Schema.Odpt.OdptPackageRecord, ITIgnoreUrowid {

        // **RECORD IGNORED** - XMLTYPE type is not available in ODP.NET managed
        // public abstract partial class TIgnoreXmltype : Schema.Odpt.OdptPackageRecord, ITIgnoreXmltype {

        public interface ITRecFldSameName {
            Decimal? FNumber { set; }
            Decimal? TRecFldSameNameTRecFldSameName { set; }
        } // ITRecFldSameName

        [DataContract(Namespace="http://odpt.business.com")][Serializable()]
        public abstract partial class TRecFldSameName : Schema.Odpt.OdptPackageRecord, ITRecFldSameName {
            private Byte propertyToEnsuresPartialClassNamesAreUniqueAtCompileTime { get; set; }
            [DataMember(Order=0, IsRequired=false)][XmlElement(Order=0, IsNullable=true)]
            public virtual Decimal? FNumber { get { return this.fNumber; } set { this.fNumber = value; } } protected Decimal? fNumber;
            [DataMember(Order=1, IsRequired=false)][XmlElement(Order=1, IsNullable=true)]
            public virtual Decimal? TRecFldSameNameTRecFldSameName { get { return this.tRecFldSameName; } set { this.tRecFldSameName = value; } } protected Decimal? tRecFldSameName;
        } // TRecFldSameName

        public ICollection<T_TRecFldSameName> ReadResultITRecFldSameName<T_TRecFldSameName>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where T_TRecFldSameName : class, ITRecFldSameName, new()   {
            ICollection<T_TRecFldSameName> __ret = new List<T_TRecFldSameName>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    T_TRecFldSameName obj = new T_TRecFldSameName();
                    if (!rdr.IsDBNull(0)) obj.FNumber = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(0), 28);
                    if (!rdr.IsDBNull(1)) obj.TRecFldSameNameTRecFldSameName = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(1), 28);
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITRecFldSameName

        public void DupSignature1(Int64? pParamIn1, ref Int64? pParamInOut1, out Int64? pParamOut1, OracleConnection optionalPreexistingOpenConnection = null) {
            pParamOut1 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN1", OracleDbType.Int64, pParamIn1, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT1", OracleDbType.Int64, pParamInOut1, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT1", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pParamInOut1 = __cmd.Parameters["P_PARAM_IN_OUT1"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_IN_OUT1"].Value.ToString());
                    pParamOut1 = __cmd.Parameters["P_PARAM_OUT1"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_OUT1"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DupSignature1

        public void DupSignature2(Int64? pParamIn2, ref Int64? pParamInOut2, out Int64? pParamOut2, OracleConnection optionalPreexistingOpenConnection = null) {
            pParamOut2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN2", OracleDbType.Int64, pParamIn2, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT2", OracleDbType.Int64, pParamInOut2, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT2", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pParamInOut2 = __cmd.Parameters["P_PARAM_IN_OUT2"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_IN_OUT2"].Value.ToString());
                    pParamOut2 = __cmd.Parameters["P_PARAM_OUT2"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_OUT2"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DupSignature2

        public void DupSignature3(Int64? pParamIn3, ref Int64? pParamInOut3, out Int64? pParamOut3, OracleConnection optionalPreexistingOpenConnection = null) {
            pParamOut3 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN3", OracleDbType.Int64, pParamIn3, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT3", OracleDbType.Int64, pParamInOut3, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT3", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pParamInOut3 = __cmd.Parameters["P_PARAM_IN_OUT3"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_IN_OUT3"].Value.ToString());
                    pParamOut3 = __cmd.Parameters["P_PARAM_OUT3"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_OUT3"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DupSignature3

        public Int64? DupSignature4(Int64? pParamIn1, ref Int64? pParamInOut1, out Int64? pParamOut1, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pParamOut1 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN1", OracleDbType.Int64, pParamIn1, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT1", OracleDbType.Int64, pParamInOut1, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT1", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut1 = __cmd.Parameters["P_PARAM_IN_OUT1"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_IN_OUT1"].Value.ToString());
                    pParamOut1 = __cmd.Parameters["P_PARAM_OUT1"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_OUT1"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignature4

        public Int64? DupSignature5(Int64? pParamIn2, ref Int64? pParamInOut2, out Int64? pParamOut2, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pParamOut2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN2", OracleDbType.Int64, pParamIn2, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT2", OracleDbType.Int64, pParamInOut2, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT2", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut2 = __cmd.Parameters["P_PARAM_IN_OUT2"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_IN_OUT2"].Value.ToString());
                    pParamOut2 = __cmd.Parameters["P_PARAM_OUT2"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_OUT2"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignature5

        public Int64? DupSignature6(Int64? pParamIn3, ref Int64? pParamInOut3, out Int64? pParamOut3, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pParamOut3 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN3", OracleDbType.Int64, pParamIn3, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT3", OracleDbType.Int64, pParamInOut3, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT3", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut3 = __cmd.Parameters["P_PARAM_IN_OUT3"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_IN_OUT3"].Value.ToString());
                    pParamOut3 = __cmd.Parameters["P_PARAM_OUT3"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_PARAM_OUT3"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignature6

        public DateTime? DupSignatureTranslatedDate1(DateTime? pParamIn, ref DateTime? pParamInOut, out DateTime? pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            DateTime? __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_DATE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Date, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.Date, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.Date, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.Date, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_PARAM_IN_OUT"].Value.ToString());
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_PARAM_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedDate1

        public DateTime? DupSignatureTranslatedDate2(DateTime? pParamIn, ref DateTime? pParamInOut, out DateTime? pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            DateTime? __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_DATE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.TimeStamp, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.TimeStamp, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.TimeStamp, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.TimeStamp, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_PARAM_IN_OUT"].Value.ToString());
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_PARAM_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedDate2

        public String DupSignatureTranslatedStr1(String pParamIn, ref String pParamInOut, out String pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.Varchar2, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.Varchar2, 32767, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.Varchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_IN_OUT"].Value.ToString());
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr1

        public String DupSignatureTranslatedStr2(String pParamIn, ref String pParamInOut, out String pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NVarchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.NVarchar2, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.NVarchar2, 32767, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.NVarchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_IN_OUT"].Value.ToString());
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr2

        public String DupSignatureTranslatedStr3(String pParamIn, ref String pParamInOut, out String pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Char, 2000, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.Char, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.Char, 2000, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.Char, 2000, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_IN_OUT"].Value.ToString());
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr3

        public String DupSignatureTranslatedStr4(String pParamIn, ref String pParamInOut, out String pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NChar, 2000, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.NChar, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.NChar, 2000, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.NChar, 2000, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_IN_OUT"].Value.ToString());
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_PARAM_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr4

        public String DupSignatureTranslatedStr5(String pParamIn, ref String pParamInOut, out String pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Clob, 2147483647, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.Clob, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.Clob, 2147483647, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.Clob, 2147483647, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["!RETURN"].Value).Value;
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["P_PARAM_IN_OUT"].Value).Value;
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["P_PARAM_OUT"].Value).Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr5

        public String DupSignatureTranslatedStr6(String pParamIn, ref String pParamInOut, out String pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIGNATURE_TRANSLATED_STR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NClob, 2147483647, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.NClob, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.NClob, 2147483647, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.NClob, 2147483647, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["!RETURN"].Value).Value;
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["P_PARAM_IN_OUT"].Value).Value;
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["P_PARAM_OUT"].Value).Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSignatureTranslatedStr6

        // **PROC IGNORED** - Code generation for LONG type will not be implemented due to Oracle deprecation
        // public Byte[] DupSigTranslatedByteArr(Byte[] pParamIn, ref Byte[] pParamInOut, out Byte[] pParamOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for BFILE type has not been implemented
        // public Byte[] DupSigTranslatedByteArr(Byte[] pParamIn, ref Byte[] pParamInOut, out Byte[] pParamOut, OracleConnection optionalPreexistingOpenConnection = null)

        public Byte[] DupSigTranslatedByteArr(Byte[] pParamIn, ref Byte[] pParamInOut, out Byte[] pParamOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Byte[] __ret = null; pParamOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.DUP_SIG_TRANSLATED_BYTE_ARR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Blob, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN", OracleDbType.Blob, pParamIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_IN_OUT", OracleDbType.Blob, pParamInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_OUT", OracleDbType.Blob, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Byte[])null
                        : ((OracleBlob)__cmd.Parameters["!RETURN"].Value).Value;
                    pParamInOut = __cmd.Parameters["P_PARAM_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Byte[])null
                        : ((OracleBlob)__cmd.Parameters["P_PARAM_IN_OUT"].Value).Value;
                    pParamOut = __cmd.Parameters["P_PARAM_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Byte[])null
                        : ((OracleBlob)__cmd.Parameters["P_PARAM_OUT"].Value).Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // DupSigTranslatedByteArr

        // **PROC IGNORED** - Code generation for RAW type has not been implemented
        // public Byte[] DupSigTranslatedByteArr(Byte[] pParamIn, ref Byte[] pParamInOut, out Byte[] pParamOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<Double?> FuncAaBinaryDouble(IList<Double?> pIn, ref IList<Double?> pInOut, out IList<Double?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Double?> __ret = new List<Double?>(); pOut = new List<Double?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_BINARY_DOUBLE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.BinaryDouble, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.BinaryDouble, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Double?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.BinaryDouble, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Double?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.BinaryDouble, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Double?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Double?)null 
                            : Convert.ToDouble(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Double?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Double?)null 
                            : Convert.ToDouble(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Double?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Double?)null 
                            : Convert.ToDouble(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaBinaryDouble

        public IList<Single?> FuncAaBinaryFloat(IList<Single?> pIn, ref IList<Single?> pInOut, out IList<Single?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Single?> __ret = new List<Single?>(); pOut = new List<Single?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_BINARY_FLOAT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.BinaryFloat, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.BinaryFloat, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Single?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.BinaryFloat, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Single?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.BinaryFloat, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Single?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Single?)null 
                            : Convert.ToSingle(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Single?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Single?)null 
                            : Convert.ToSingle(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Single?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Single?)null 
                            : Convert.ToSingle(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaBinaryFloat

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaBinaryInteger(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BLOB type
        // public IList<Byte[]> FuncAaBlob(IList<Byte[]> pIn, ref IList<Byte[]> pInOut, out IList<Byte[]> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a PL/SQL BOOLEAN type
        // public IList<Boolean> FuncAaBoolean(IList<Boolean> pIn, ref IList<Boolean> pInOut, out IList<Boolean> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<String> FuncAaChar(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<String> __ret = new List<String>(); pOut = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_CHAR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Char, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["!RETURN"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["!RETURN"].ArrayBindSize[_i] = 2000; }

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Char, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Char, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new String[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_IN_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_IN_OUT"].ArrayBindSize[_i] = 2000; }

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Char, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_OUT"].ArrayBindSize[_i] = 2000; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleString[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].ToString())));

                    pInOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleString[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].ToString())));

                    pOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleString[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaChar

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a CLOB type
        // public IList<String> FuncAaClob(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<DateTime?> FuncAaDate(IList<DateTime?> pIn, ref IList<DateTime?> pInOut, out IList<DateTime?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<DateTime?> __ret = new List<DateTime?>(); pOut = new List<DateTime?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_DATE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Date, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Date, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new DateTime?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Date, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new DateTime?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Date, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<DateTime?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDate[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDate[])[_i].IsNull
                            ? (DateTime?)null 
                            : Convert.ToDateTime(((__cmd.Parameters["!RETURN"].Value as OracleDate[])[_i].ToString())));

                    pInOut = new List<DateTime?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDate[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDate[])[_i].IsNull
                            ? (DateTime?)null 
                            : Convert.ToDateTime(((__cmd.Parameters["P_IN_OUT"].Value as OracleDate[])[_i].ToString())));

                    pOut = new List<DateTime?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDate[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDate[])[_i].IsNull
                            ? (DateTime?)null 
                            : Convert.ToDateTime(((__cmd.Parameters["P_OUT"].Value as OracleDate[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaDate

        public IList<Int64?> FuncAaDecimal(IList<Int64?> pIn, ref IList<Int64?> pInOut, out IList<Int64?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Int64?> __ret = new List<Int64?>(); pOut = new List<Int64?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_DECIMAL", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Int64?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int64, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Int64?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int64, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaDecimal

        public IList<Decimal?> FuncAaDoublePrecision(IList<Decimal?> pIn, ref IList<Decimal?> pInOut, out IList<Decimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Decimal?> __ret = new List<Decimal?>(); pOut = new List<Decimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_DOUBLE_PRECISION", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Decimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Decimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaDoublePrecision

        public IList<Decimal?> FuncAaFloat(IList<Decimal?> pIn, ref IList<Decimal?> pInOut, out IList<Decimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Decimal?> __ret = new List<Decimal?>(); pOut = new List<Decimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_FLOAT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Decimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Decimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaFloat

        public IList<Int64?> FuncAaInteger(IList<Int64?> pIn, ref IList<Int64?> pInOut, out IList<Int64?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Int64?> __ret = new List<Int64?>(); pOut = new List<Int64?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_INTEGER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Int64?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int64, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Int64?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int64, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaInteger

        public Int64? FuncAaIntegerInCnt(IList<Int64?> pIn, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_INTEGER_IN_CNT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Int64?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaIntegerInCnt

        public IList<Int64?> FuncAaIntegerV(IList<Int64?> pIn, ref IList<Int64?> pInOut, out IList<Int64?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Int64?> __ret = new List<Int64?>(); pOut = new List<Int64?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_INTEGER_V", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Int64?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int64, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Int64?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int64, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaIntegerV

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaNatural(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaNaturaln(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<String> FuncAaNchar(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<String> __ret = new List<String>(); pOut = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_NCHAR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NChar, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["!RETURN"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["!RETURN"].ArrayBindSize[_i] = 1000; }

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.NChar, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.NChar, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new String[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_IN_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_IN_OUT"].ArrayBindSize[_i] = 1000; }

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.NChar, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_OUT"].ArrayBindSize[_i] = 1000; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleString[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].ToString())));

                    pInOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleString[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].ToString())));

                    pOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleString[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaNchar

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a NCLOB type
        // public IList<String> FuncAaNclob(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<Decimal?> FuncAaNumber(IList<Decimal?> pIn, ref IList<Decimal?> pInOut, out IList<Decimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Decimal?> __ret = new List<Decimal?>(); pOut = new List<Decimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_NUMBER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Decimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Decimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaNumber

        public IList<Int64?> FuncAaNumeric(IList<Int64?> pIn, ref IList<Int64?> pInOut, out IList<Int64?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Int64?> __ret = new List<Int64?>(); pOut = new List<Int64?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_NUMERIC", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Int64?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int64, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Int64?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int64, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaNumeric

        public IList<String> FuncAaNvarchar2(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<String> __ret = new List<String>(); pOut = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_NVARCHAR2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NVarchar2, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["!RETURN"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["!RETURN"].ArrayBindSize[_i] = 2000; }

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.NVarchar2, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.NVarchar2, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new String[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_IN_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_IN_OUT"].ArrayBindSize[_i] = 2000; }

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.NVarchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_OUT"].ArrayBindSize[_i] = 2000; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleString[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].ToString())));

                    pInOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleString[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].ToString())));

                    pOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleString[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaNvarchar2

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaPlsInteger(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaPositive(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a BINARY_INTEGER type
        // public IList<Int32?> FuncAaPositiven(IList<Int32?> pIn, ref IList<Int32?> pInOut, out IList<Int32?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<Decimal?> FuncAaReal(IList<Decimal?> pIn, ref IList<Decimal?> pInOut, out IList<Decimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Decimal?> __ret = new List<Decimal?>(); pOut = new List<Decimal?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_REAL", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Decimal?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Decimal?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Decimal?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Decimal?)null 
                            : Convert.ToDecimal(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaReal

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a PL/SQL RECORD type
        // public IList<TTableBig> FuncAaRecord(IList<TTableBig> pIn, ref IList<TTableBig> pInOut, out IList<TTableBig> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a ROWTYPE type
        // public IList<FuncAaRowSomeRowType> FuncAaRow(IList<FuncAaRowSomeRowType> pIn, ref IList<FuncAaRowSomeRowType> pInOut, out IList<FuncAaRowSomeRowType> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<Int64?> FuncAaSmallint(IList<Int64?> pIn, ref IList<Int64?> pInOut, out IList<Int64?> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<Int64?> __ret = new List<Int64?>(); pOut = new List<Int64?>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_SMALLINT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new Int64?[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int64, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new Int64?[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int64, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleDecimal[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["!RETURN"].Value as OracleDecimal[])[_i].ToString())));

                    pInOut = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_IN_OUT"].Value as OracleDecimal[])[_i].ToString())));

                    pOut = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleDecimal[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_OUT"].Value as OracleDecimal[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaSmallint

        public IList<String> FuncAaString(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<String> __ret = new List<String>(); pOut = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_STRING", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["!RETURN"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["!RETURN"].ArrayBindSize[_i] = 32767; }

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Varchar2, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new String[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_IN_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_IN_OUT"].ArrayBindSize[_i] = 32767; }

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_OUT"].ArrayBindSize[_i] = 32767; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleString[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].ToString())));

                    pInOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleString[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].ToString())));

                    pOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleString[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaString

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a TIMESTAMP type
        // public IList<DateTime?> FuncAaTimestamp(IList<DateTime?> pIn, ref IList<DateTime?> pInOut, out IList<DateTime?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a TIMESTAMP type
        // public IList<DateTime?> FuncAaTimestampPrec0(IList<DateTime?> pIn, ref IList<DateTime?> pInOut, out IList<DateTime?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array of a TIMESTAMP type
        // public IList<DateTime?> FuncAaTimestampPrec9(IList<DateTime?> pIn, ref IList<DateTime?> pInOut, out IList<DateTime?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public IList<String> FuncAaVarchar2(IList<String> pIn, ref IList<String> pInOut, out IList<String> pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            IList<String> __ret = new List<String>(); pOut = new List<String>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_VARCHAR2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 65535, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters["!RETURN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["!RETURN"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["!RETURN"].ArrayBindSize[_i] = 4000; }

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Varchar2, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT"].Value = (pInOut == null || pInOut.Count == 0 ? new String[]{} : pInOut.ToArray());
                    __cmd.Parameters["P_IN_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_IN_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_IN_OUT"].ArrayBindSize[_i] = 4000; }

                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Varchar2, 65535, null, ParameterDirection.Output));
                    __cmd.Parameters["P_OUT"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters["P_OUT"].ArrayBindSize = new int[65535];
                    for (int _i = 0; _i < 65535; _i++) { __cmd.Parameters["P_OUT"].ArrayBindSize[_i] = 4000; }

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();

                    __ret = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["!RETURN"].Value as OracleString[]).Length; _i++)
                        __ret.Add((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["!RETURN"].Value as OracleString[])[_i].ToString())));

                    pInOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT"].Value as OracleString[]).Length; _i++)
                        pInOut.Add((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_IN_OUT"].Value as OracleString[])[_i].ToString())));

                    pOut = new List<String>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_OUT"].Value as OracleString[]).Length; _i++)
                        pOut.Add((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].IsNull
                            ? (String)null 
                            : Convert.ToString(((__cmd.Parameters["P_OUT"].Value as OracleString[])[_i].ToString())));
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaVarchar2

        public Int64? FuncAaVarchar2InCnt(IList<String> pIn, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_AA_VARCHAR2_IN_CNT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));

                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, (pIn == null ? 0 : pIn.Count), null, ParameterDirection.Input));
                    __cmd.Parameters["P_IN"].Value = (pIn == null || pIn.Count == 0 ? new String[]{} : pIn.ToArray());
                    __cmd.Parameters["P_IN"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncAaVarchar2InCnt

        // **PROC IGNORED** - ANYDATA type is not available in ODP.NET managed
        // public  FuncAnydata( pIn, ref  pInOut, out  pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - ANYDATASET type is not available in ODP.NET managed
        // public  FuncAnydataset( pIn, ref  pInOut, out  pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - ANYTYPE type is not available in ODP.NET managed
        // public  FuncAnytype( pIn, ref  pInOut, out  pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for BFILE type has not been implemented
        // public Byte[] FuncBfile(Byte[] pIn, ref Byte[] pInOut, out Byte[] pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public Double? FuncBinaryDouble(Double? pIn, ref Double? pInOut, out Double? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Double? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_BINARY_DOUBLE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.BinaryDouble, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.BinaryDouble, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.BinaryDouble, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.BinaryDouble, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Double?)null
                        : Convert.ToDouble(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Double?)null
                        : Convert.ToDouble(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Double?)null
                        : Convert.ToDouble(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncBinaryDouble

        public Single? FuncBinaryFloat(Single? pIn, ref Single? pInOut, out Single? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Single? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_BINARY_FLOAT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.BinaryFloat, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.BinaryFloat, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.BinaryFloat, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.BinaryFloat, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Single?)null
                        : Convert.ToSingle(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Single?)null
                        : Convert.ToSingle(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Single?)null
                        : Convert.ToSingle(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncBinaryFloat

        public Int32? FuncBinaryInteger(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_BINARY_INTEGER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncBinaryInteger

        public Byte[] FuncBlob(Byte[] pIn, ref Byte[] pInOut, out Byte[] pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Byte[] __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_BLOB", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Blob, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Blob, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Blob, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Blob, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Byte[])null
                        : ((OracleBlob)__cmd.Parameters["!RETURN"].Value).Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Byte[])null
                        : ((OracleBlob)__cmd.Parameters["P_IN_OUT"].Value).Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Byte[])null
                        : ((OracleBlob)__cmd.Parameters["P_OUT"].Value).Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncBlob

        // **PROC IGNORED** - .NET cannot send/receive a PL/SQL BOOLEAN type
        // public Boolean FuncBoolean(Boolean pIn, ref Boolean pInOut, out Boolean pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public String FuncChar(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_CHAR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Char, 2000, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Char, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Char, 2000, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Char, 2000, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncChar

        public String FuncClob(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_CLOB", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Clob, 2147483647, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Clob, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Clob, 2147483647, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Clob, 2147483647, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["!RETURN"].Value).Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["P_IN_OUT"].Value).Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["P_OUT"].Value).Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncClob

        // **PROC IGNORED** - .NET cannot send/receive an associative array type field in a record
        // public ICollection<T_TIgnoreAaInteger> FuncCursorIgnoreAaInteger<T_TIgnoreAaInteger>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive an associative array type field in a record
        // public ICollection<T_TIgnoreAaInteger> FuncCursorIgnoreAaInteger<T_TIgnoreAaInteger>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for BFILE type has not been implemented
        // public ICollection<T_TIgnoreBfile> FuncCursorIgnoreBfile<T_TIgnoreBfile>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for BFILE type has not been implemented
        // public ICollection<T_TIgnoreBfile> FuncCursorIgnoreBfile<T_TIgnoreBfile>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive a PL/SQL BOOLEAN type
        // public ICollection<T_TIgnoreBoolean> FuncCursorIgnoreBoolean<T_TIgnoreBoolean>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive a PL/SQL BOOLEAN type
        // public ICollection<T_TIgnoreBoolean> FuncCursorIgnoreBoolean<T_TIgnoreBoolean>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG type will not be implemented due to Oracle deprecation
        // public ICollection<T_TIgnoreLong> FuncCursorIgnoreLong<T_TIgnoreLong>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG type will not be implemented due to Oracle deprecation
        // public ICollection<T_TIgnoreLong> FuncCursorIgnoreLong<T_TIgnoreLong>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG RAW type will not be implemented due to Oracle deprecation
        // public ICollection<T_TIgnoreLongRaw> FuncCursorIgnoreLongRaw<T_TIgnoreLongRaw>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG RAW type will not be implemented due to Oracle deprecation
        // public ICollection<T_TIgnoreLongRaw> FuncCursorIgnoreLongRaw<T_TIgnoreLongRaw>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for RAW type has not been implemented
        // public ICollection<T_TIgnoreRaw> FuncCursorIgnoreRaw<T_TIgnoreRaw>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for RAW type has not been implemented
        // public ICollection<T_TIgnoreRaw> FuncCursorIgnoreRaw<T_TIgnoreRaw>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for ROWID type has not been implemented
        // public ICollection<T_TIgnoreRowid> FuncCursorIgnoreRowid<T_TIgnoreRowid>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for ROWID type has not been implemented
        // public ICollection<T_TIgnoreRowid> FuncCursorIgnoreRowid<T_TIgnoreRowid>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for UROWID type has not been implemented
        // public ICollection<T_TIgnoreUrowid> FuncCursorIgnoreUrowid<T_TIgnoreUrowid>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for UROWID type has not been implemented
        // public ICollection<T_TIgnoreUrowid> FuncCursorIgnoreUrowid<T_TIgnoreUrowid>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - XMLTYPE type is not available in ODP.NET managed
        // public ICollection<T_TIgnoreXmltype> FuncCursorIgnoreXmltype<T_TIgnoreXmltype>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - XMLTYPE type is not available in ODP.NET managed
        // public ICollection<T_TIgnoreXmltype> FuncCursorIgnoreXmltype<T_TIgnoreXmltype>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        public DateTime? FuncDate(DateTime? pIn, ref DateTime? pInOut, out DateTime? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            DateTime? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_DATE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Date, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Date, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Date, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Date, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncDate

        public Int64? FuncDecimal(Int64? pIn, ref Int64? pInOut, out Int64? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_DECIMAL", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int64, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncDecimal

        public Decimal? FuncDoublePrecision(Decimal? pIn, ref Decimal? pInOut, out Decimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Decimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_DOUBLE_PRECISION", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncDoublePrecision

        public Decimal? FuncFloat(Decimal? pIn, ref Decimal? pInOut, out Decimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Decimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_FLOAT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncFloat

        public Int64? FuncInt(Int64? pIn, ref Int64? pInOut, out Int64? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_INT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int64, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncInt

        public Int64? FuncInteger(Int64? pIn, ref Int64? pInOut, out Int64? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_INTEGER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int64, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncInteger

        // **PROC IGNORED** - Code generation for INTERVAL DAY TO SECOND type has not been implemented
        // public TimeSpan? FuncIntervalDayToSecond(TimeSpan? pIn, ref TimeSpan? pInOut, out TimeSpan? pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for INTERVAL YEAR TO MONTH type has not been implemented
        // public TimeSpan? FuncIntervalYearToMonth(TimeSpan? pIn, ref TimeSpan? pInOut, out TimeSpan? pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG type will not be implemented due to Oracle deprecation
        // public Byte[] FuncLong(Byte[] pIn, ref Byte[] pInOut, out Byte[] pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for LONG RAW type will not be implemented due to Oracle deprecation
        // public Byte[] FuncLongRaw(Byte[] pIn, ref Byte[] pInOut, out Byte[] pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public Int32? FuncNatural(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NATURAL", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNatural

        public Int32? FuncNaturaln(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NATURALN", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNaturaln

        public String FuncNchar(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NCHAR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NChar, 2000, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.NChar, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.NChar, 2000, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.NChar, 2000, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNchar

        public String FuncNclob(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NCLOB", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NClob, 2147483647, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.NClob, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.NClob, 2147483647, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.NClob, 2147483647, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["!RETURN"].Value).Value;
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["P_IN_OUT"].Value).Value;
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : ((OracleClob)__cmd.Parameters["P_OUT"].Value).Value;
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNclob

        public Decimal? FuncNoParam(OracleConnection optionalPreexistingOpenConnection = null) {
            Decimal? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NO_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNoParam

        // **PROC IGNORED** - Code generation for NESTED TABLE type has not been implemented
        // public IList<Decimal?> FuncNtNumber(IList<Decimal?> pIn, ref IList<Decimal?> pInOut, out IList<Decimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public Decimal? FuncNumber(Decimal? pIn, ref Decimal? pInOut, out Decimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Decimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NUMBER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNumber

        public Int64? FuncNumeric(Int64? pIn, ref Int64? pInOut, out Int64? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NUMERIC", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int64, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNumeric

        public String FuncNvarchar2(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_NVARCHAR2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.NVarchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.NVarchar2, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.NVarchar2, 32767, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.NVarchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncNvarchar2

        // **PROC IGNORED** - OBJECT type is not available in ODP.NET managed
        // public OdptBigOt FuncObjectType(OdptBigOt pIn, ref OdptBigOt pInOut, out OdptBigOt pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public Decimal? FuncOptionalParam(Decimal? pInNumberRequired, ref Decimal? pInOutNumberRequired, Decimal? pInNumberOptional = null, String pInVarchar2Optional = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            Decimal? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_OPTIONAL_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_REQUIRED", OracleDbType.Decimal, pInNumberRequired, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_NUMBER_REQUIRED", OracleDbType.Decimal, pInOutNumberRequired, ParameterDirection.InputOutput));
                    if (pInNumberOptional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_OPTIONAL", OracleDbType.Decimal, pInNumberOptional, ParameterDirection.Input));
                    if (pInVarchar2Optional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_VARCHAR2_OPTIONAL", OracleDbType.Varchar2, pInVarchar2Optional, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOutNumberRequired = __cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncOptionalParam

        public Decimal? FuncOptionalParamReversed(Decimal? pInNumberRequired, ref Decimal? pInOutNumberRequired, Decimal? pInNumberOptional = null, String pInVarchar2Optional = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            Decimal? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_OPTIONAL_PARAM_REVERSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_REQUIRED", OracleDbType.Decimal, pInNumberRequired, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_NUMBER_REQUIRED", OracleDbType.Decimal, pInOutNumberRequired, ParameterDirection.InputOutput));
                    if (pInNumberOptional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_OPTIONAL", OracleDbType.Decimal, pInNumberOptional, ParameterDirection.Input));
                    if (pInVarchar2Optional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_VARCHAR2_OPTIONAL", OracleDbType.Varchar2, pInVarchar2Optional, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOutNumberRequired = __cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncOptionalParamReversed

        public Int32? FuncPlsInteger(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_PLS_INTEGER", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncPlsInteger

        public Int32? FuncPositive(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_POSITIVE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncPositive

        public Int32? FuncPositiven(Int32? pIn, ref Int32? pInOut, out Int32? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int32? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_POSITIVEN", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int32, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int32, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int32, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int32, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int32?)null
                        : Convert.ToInt32(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncPositiven

        // **PROC IGNORED** - Code generation for RAW type has not been implemented
        // public Byte[] FuncRaw(Byte[] pIn, ref Byte[] pInOut, out Byte[] pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public Decimal? FuncReal(Decimal? pIn, ref Decimal? pInOut, out Decimal? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Decimal? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_REAL", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Decimal, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Decimal, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Decimal, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Decimal, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncReal

        // **PROC IGNORED** - .NET cannot send/receive a PL/SQL RECORD type (apart from cursor)
        // public TTableBig FuncRecord(TTableBig pIn, ref TTableBig pInOut, out TTableBig pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - REF type is not available in ODP.NET managed
        // public String FuncRef(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send/receive a ROWTYPE type (apart from cursor)
        // public FuncRowSomeRowType FuncRow(FuncRowPInRowType pIn, ref FuncRowPInOutRowType pInOut, out FuncRowPOutRowType pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for ROWID type has not been implemented
        // public String FuncRowid(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public Int64? FuncSmallint(Int64? pIn, ref Int64? pInOut, out Int64? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_SMALLINT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Int64, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncSmallint

        public String FuncString(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_STRING", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Varchar2, 32767, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Varchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncString

        public DateTime? FuncTimestamp(DateTime? pIn, ref DateTime? pInOut, out DateTime? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            DateTime? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_TIMESTAMP", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.TimeStamp, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.TimeStamp, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.TimeStamp, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.TimeStamp, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncTimestamp

        public DateTime? FuncTimestampWLTimeZone(DateTime? pIn, ref DateTime? pInOut, out DateTime? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            DateTime? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_TIMESTAMP_W_L_TIME_ZONE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.TimeStampLTZ, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.TimeStampLTZ, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.TimeStampLTZ, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.TimeStampLTZ, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncTimestampWLTimeZone

        public DateTimeOffset? FuncTimestampWTimeZone(DateTimeOffset? pIn, ref DateTimeOffset? pInOut, out DateTimeOffset? pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            DateTimeOffset? __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_TIMESTAMP_W_TIME_ZONE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.TimeStampTZ, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.TimeStampTZ, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.TimeStampTZ, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.TimeStampTZ, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (DateTimeOffset?)null
                        : DateTimeOffset.Parse(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTimeOffset?)null
                        : DateTimeOffset.Parse(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (DateTimeOffset?)null
                        : DateTimeOffset.Parse(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncTimestampWTimeZone

        // **PROC IGNORED** - Code generation for UROWID type has not been implemented
        // public String FuncUrowid(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public String FuncVarchar(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_VARCHAR", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Varchar2, 32767, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Varchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncVarchar

        public String FuncVarchar2(String pIn, ref String pInOut, out String pOut, OracleConnection optionalPreexistingOpenConnection = null) {
            String __ret = null; pOut = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.FUNC_VARCHAR2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Varchar2, 32767, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Varchar2, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT", OracleDbType.Varchar2, 32767, pInOut, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT", OracleDbType.Varchar2, 32767, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["!RETURN"].Value.ToString());
                    pInOut = __cmd.Parameters["P_IN_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT"].Value.ToString());
                    pOut = __cmd.Parameters["P_OUT"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_OUT"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // FuncVarchar2

        // **PROC IGNORED** - Code generation for VARRAY type has not been implemented
        // public IList<Decimal?> FuncVaNumber(IList<Decimal?> pIn, ref IList<Decimal?> pInOut, out IList<Decimal?> pOut, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - XMLTYPE type is not available in ODP.NET managed
        // public XmlDocument FuncXmltype(XmlDocument pIn, ref XmlDocument pInOut, out XmlDocument pOut, OracleConnection optionalPreexistingOpenConnection = null)

        public ICollection<T_TRecFldSameName> GetRefCurRecFldSameName<T_TRecFldSameName>(
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TRecFldSameName : class, new() {
            ICollection<T_TRecFldSameName> __ret = new List<T_TRecFldSameName>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.GET_REF_CUR_REC_FLD_SAME_NAME", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_TRecFldSameName>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRefCurRecFldSameName

        public ICollection<T_TRecFldSameName> GetRefCurRecFldSameName<T_TRecFldSameName>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TRecFldSameName : class, ITRecFldSameName, new() {
            ICollection<T_TRecFldSameName> __ret = new List<T_TRecFldSameName>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.GET_REF_CUR_REC_FLD_SAME_NAME", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITRecFldSameName<T_TRecFldSameName>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRefCurRecFldSameName

        public void ProcBinaryDoubleConst(out Double? pMinNormal, out Double? pMaxNormal, OracleConnection optionalPreexistingOpenConnection = null) {
            pMinNormal = null; pMaxNormal = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_BINARY_DOUBLE_CONST", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_MIN_NORMAL", OracleDbType.BinaryDouble, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_MAX_NORMAL", OracleDbType.BinaryDouble, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pMinNormal = __cmd.Parameters["P_MIN_NORMAL"].Status == OracleParameterStatus.NullFetched
                        ? (Double?)null
                        : Convert.ToDouble(__cmd.Parameters["P_MIN_NORMAL"].Value.ToString());
                    pMaxNormal = __cmd.Parameters["P_MAX_NORMAL"].Status == OracleParameterStatus.NullFetched
                        ? (Double?)null
                        : Convert.ToDouble(__cmd.Parameters["P_MAX_NORMAL"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcBinaryDoubleConst

        public void ProcBinaryFloatConst(out Single? pMinNormal, out Single? pMaxNormal, OracleConnection optionalPreexistingOpenConnection = null) {
            pMinNormal = null; pMaxNormal = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_BINARY_FLOAT_CONST", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_MIN_NORMAL", OracleDbType.BinaryFloat, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_MAX_NORMAL", OracleDbType.BinaryFloat, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pMinNormal = __cmd.Parameters["P_MIN_NORMAL"].Status == OracleParameterStatus.NullFetched
                        ? (Single?)null
                        : Convert.ToSingle(__cmd.Parameters["P_MIN_NORMAL"].Value.ToString());
                    pMaxNormal = __cmd.Parameters["P_MAX_NORMAL"].Status == OracleParameterStatus.NullFetched
                        ? (Single?)null
                        : Convert.ToSingle(__cmd.Parameters["P_MAX_NORMAL"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcBinaryFloatConst

        public void ProcNocopyIncrement(Int64? pIn, ref Int64? pInOutNocopy, out Int64? pOutNocopy, OracleConnection optionalPreexistingOpenConnection = null) {
            pOutNocopy = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_NOCOPY_INCREMENT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_IN", OracleDbType.Int64, pIn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_NOCOPY", OracleDbType.Int64, pInOutNocopy, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OUT_NOCOPY", OracleDbType.Int64, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pInOutNocopy = __cmd.Parameters["P_IN_OUT_NOCOPY"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_IN_OUT_NOCOPY"].Value.ToString());
                    pOutNocopy = __cmd.Parameters["P_OUT_NOCOPY"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["P_OUT_NOCOPY"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcNocopyIncrement

        public void ProcNoParam(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_NO_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcNoParam

        public void ProcOptionalParam(Decimal? pInNumberRequired, ref Decimal? pInOutNumberRequired, Decimal? pInNumberOptional = null, String pInVarchar2Optional = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_OPTIONAL_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_REQUIRED", OracleDbType.Decimal, pInNumberRequired, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_NUMBER_REQUIRED", OracleDbType.Decimal, pInOutNumberRequired, ParameterDirection.InputOutput));
                    if (pInNumberOptional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_OPTIONAL", OracleDbType.Decimal, pInNumberOptional, ParameterDirection.Input));
                    if (pInVarchar2Optional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_VARCHAR2_OPTIONAL", OracleDbType.Varchar2, pInVarchar2Optional, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pInOutNumberRequired = __cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcOptionalParam

        public void ProcOptionalParamReversed(Decimal? pInNumberRequired, ref Decimal? pInOutNumberRequired, Decimal? pInNumberOptional = null, String pInVarchar2Optional = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_OPTIONAL_PARAM_REVERSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_REQUIRED", OracleDbType.Decimal, pInNumberRequired, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_NUMBER_REQUIRED", OracleDbType.Decimal, pInOutNumberRequired, ParameterDirection.InputOutput));
                    if (pInNumberOptional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER_OPTIONAL", OracleDbType.Decimal, pInNumberOptional, ParameterDirection.Input));
                    if (pInVarchar2Optional != null) __cmd.Parameters.Add(new OracleParameter("P_IN_VARCHAR2_OPTIONAL", OracleDbType.Varchar2, pInVarchar2Optional, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pInOutNumberRequired = __cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Status == OracleParameterStatus.NullFetched
                        ? (Decimal?)null
                        : Convert.ToDecimal(__cmd.Parameters["P_IN_OUT_NUMBER_REQUIRED"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcOptionalParamReversed

        public void ProcRaiseException(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_RAISE_EXCEPTION", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcRaiseException

        public void ProcUnderscoreSuffix(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_UNDERSCORE_SUFFIX", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcUnderscoreSuffix

        public void ProcUnderscoreSuffixExtraunderscore(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_MAIN.PROC_UNDERSCORE_SUFFIX_", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // ProcUnderscoreSuffixExtraunderscore
    } // OdptPkgMain

    public sealed partial class OdptPkgSql : Schema.Odpt.OdptAdapter {
        private OdptPkgSql() { }
        private static readonly OdptPkgSql _instance = new OdptPkgSql();
        public static OdptPkgSql Instance { get { return _instance; } }

        // **PROC IGNORED** - .NET cannot send/receive a PL/SQL BOOLEAN type
        // public void WhereCondition(ref String pWhere, String pOperand1, String pOperator, String pOperand2, 
        //        Boolean pOr, OracleConnection optionalPreexistingOpenConnection = null)

        public void WhereCondition(ref String pWhere, String pOperand1, String pOperator, String pOperand2, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_SQL.WHERE_CONDITION", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_WHERE", OracleDbType.Varchar2, 32767, pWhere, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_OPERAND1", OracleDbType.Varchar2, pOperand1, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_OPERATOR", OracleDbType.Varchar2, pOperator, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_OPERAND2", OracleDbType.Varchar2, pOperand2, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pWhere = __cmd.Parameters["P_WHERE"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_WHERE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // WhereCondition

        public void WhereConditionParam(ref String pWhere, String pColumn, String pOperator, String pParamName, 
                String pParamValue, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_SQL.WHERE_CONDITION_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_WHERE", OracleDbType.Varchar2, 32767, pWhere, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_COLUMN", OracleDbType.Varchar2, pColumn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_OPERATOR", OracleDbType.Varchar2, pOperator, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_NAME", OracleDbType.Varchar2, pParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_VALUE", OracleDbType.Varchar2, pParamValue, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pWhere = __cmd.Parameters["P_WHERE"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_WHERE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // WhereConditionParam

        public void WhereConditionParam(ref String pWhere, String pColumn, String pOperator, String pParamName, 
                DateTime? pParamValue, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_SQL.WHERE_CONDITION_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_WHERE", OracleDbType.Varchar2, 32767, pWhere, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_COLUMN", OracleDbType.Varchar2, pColumn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_OPERATOR", OracleDbType.Varchar2, pOperator, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_NAME", OracleDbType.Varchar2, pParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_PARAM_VALUE", OracleDbType.TimeStamp, pParamValue, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pWhere = __cmd.Parameters["P_WHERE"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_WHERE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // WhereConditionParam

        public void WhereConditionRangeParam(ref String pWhere, String pColumn, String pFromParamName, String pFromParamValue, 
                String pToParamName, String pToParamValue, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_SQL.WHERE_CONDITION_RANGE_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_WHERE", OracleDbType.Varchar2, 32767, pWhere, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_COLUMN", OracleDbType.Varchar2, pColumn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_FROM_PARAM_NAME", OracleDbType.Varchar2, pFromParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_FROM_PARAM_VALUE", OracleDbType.Varchar2, pFromParamValue, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_TO_PARAM_NAME", OracleDbType.Varchar2, pToParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_TO_PARAM_VALUE", OracleDbType.Varchar2, pToParamValue, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pWhere = __cmd.Parameters["P_WHERE"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_WHERE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // WhereConditionRangeParam

        public void WhereConditionRangeParam(ref String pWhere, String pColumn, String pFromParamName, DateTime? pFromParamValue, 
                String pToParamName, DateTime? pToParamValue, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_SQL.WHERE_CONDITION_RANGE_PARAM", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_WHERE", OracleDbType.Varchar2, 32767, pWhere, ParameterDirection.InputOutput));
                    __cmd.Parameters.Add(new OracleParameter("P_COLUMN", OracleDbType.Varchar2, pColumn, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_FROM_PARAM_NAME", OracleDbType.Varchar2, pFromParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_FROM_PARAM_VALUE", OracleDbType.TimeStamp, pFromParamValue, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_TO_PARAM_NAME", OracleDbType.Varchar2, pToParamName, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_TO_PARAM_VALUE", OracleDbType.TimeStamp, pToParamValue, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    pWhere = __cmd.Parameters["P_WHERE"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_WHERE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // WhereConditionRangeParam
    } // OdptPkgSql

    public sealed partial class OdptPkgTableBig : Schema.Odpt.OdptAdapter {
        private OdptPkgTableBig() { }
        private static readonly OdptPkgTableBig _instance = new OdptPkgTableBig();
        public static OdptPkgTableBig Instance { get { return _instance; } }

        public interface ITTableBigFltUnused {
            Int64? Id { set; }
            Int64? ColNumberId { set; }
            Int64? ColInteger { set; }
            Int64? ColInt { set; }
            Int64? ColSmallint { set; }
            Int64? ColNumeric { set; }
            Int64? ColDecimal { set; }
            Decimal? ColNumber { set; }
            Decimal? ColDoublePrecision { set; }
            Decimal? ColFloat { set; }
            Decimal? ColReal { set; }
            Single? ColBinaryFloat { set; }
            Double? ColBinaryDouble { set; }
            String ColVarcharMin { set; }
            String ColVarcharMax { set; }
            String ColVarchar2Min { set; }
            String ColVarchar2Max { set; }
            String ColNvarchar2Min { set; }
            String ColNvarchar2Max { set; }
            String ColCharMin { set; }
            String ColCharMax { set; }
            String ColNcharMin { set; }
            String ColNcharMax { set; }
            DateTime? ColDate { set; }
            DateTime? ColTimestamp { set; }
            DateTime? ColTimestampPrec0 { set; }
            DateTime? ColTimestampPrec9 { set; }
            DateTimeOffset? ColTimestampTZ { set; }
            DateTimeOffset? ColTimestampTZPrec0 { set; }
            DateTimeOffset? ColTimestampTZPrec9 { set; }
            DateTime? ColTimestampLTZ { set; }
            DateTime? ColTimestampLTZPrec0 { set; }
            DateTime? ColTimestampLTZPrec9 { set; }
            Byte[] ColBlob { set; }
            String ColClob { set; }
            String ColNclob { set; }
            String Abstract { set; }
            String Base { set; }
            String Void { set; }
            String Class { set; }
            String Namespace { set; }
            String Readonly { set; }
            String Partial { set; }
            String Const { set; }
            String Using { set; }
            String ColLast { set; }
        } // ITTableBigFltUnused

        [DataContract(Namespace="http://odpt.business.com")][Serializable()]
        public abstract partial class TTableBigFltUnused : Schema.Odpt.OdptPackageRecord, ITTableBigFltUnused {
            private Byte propertyToEnsuresPartialClassNamesAreUniqueAtCompileTime { get; set; }
            [DataMember(Order=0, IsRequired=false)][XmlElement(Order=0, IsNullable=true)]
            public virtual Int64? Id { get { return this.id; } set { this.id = value; } } protected Int64? id;
            [DataMember(Order=1, IsRequired=false)][XmlElement(Order=1, IsNullable=true)]
            public virtual Int64? ColNumberId { get { return this.colNumberId; } set { this.colNumberId = value; } } protected Int64? colNumberId;
            [DataMember(Order=2, IsRequired=false)][XmlElement(Order=2, IsNullable=true)]
            public virtual Int64? ColInteger { get { return this.colInteger; } set { this.colInteger = value; } } protected Int64? colInteger;
            [DataMember(Order=3, IsRequired=false)][XmlElement(Order=3, IsNullable=true)]
            public virtual Int64? ColInt { get { return this.colInt; } set { this.colInt = value; } } protected Int64? colInt;
            [DataMember(Order=4, IsRequired=false)][XmlElement(Order=4, IsNullable=true)]
            public virtual Int64? ColSmallint { get { return this.colSmallint; } set { this.colSmallint = value; } } protected Int64? colSmallint;
            [DataMember(Order=5, IsRequired=false)][XmlElement(Order=5, IsNullable=true)]
            public virtual Int64? ColNumeric { get { return this.colNumeric; } set { this.colNumeric = value; } } protected Int64? colNumeric;
            [DataMember(Order=6, IsRequired=false)][XmlElement(Order=6, IsNullable=true)]
            public virtual Int64? ColDecimal { get { return this.colDecimal; } set { this.colDecimal = value; } } protected Int64? colDecimal;
            [DataMember(Order=7, IsRequired=false)][XmlElement(Order=7, IsNullable=true)]
            public virtual Decimal? ColNumber { get { return this.colNumber; } set { this.colNumber = value; } } protected Decimal? colNumber;
            [DataMember(Order=8, IsRequired=false)][XmlElement(Order=8, IsNullable=true)]
            public virtual Decimal? ColDoublePrecision { get { return this.colDoublePrecision; } set { this.colDoublePrecision = value; } } protected Decimal? colDoublePrecision;
            [DataMember(Order=9, IsRequired=false)][XmlElement(Order=9, IsNullable=true)]
            public virtual Decimal? ColFloat { get { return this.colFloat; } set { this.colFloat = value; } } protected Decimal? colFloat;
            [DataMember(Order=10, IsRequired=false)][XmlElement(Order=10, IsNullable=true)]
            public virtual Decimal? ColReal { get { return this.colReal; } set { this.colReal = value; } } protected Decimal? colReal;
            [DataMember(Order=11, IsRequired=false)][XmlElement(Order=11, IsNullable=true)]
            public virtual Single? ColBinaryFloat { get { return this.colBinaryFloat; } set { this.colBinaryFloat = value; } } protected Single? colBinaryFloat;
            [DataMember(Order=12, IsRequired=false)][XmlElement(Order=12, IsNullable=true)]
            public virtual Double? ColBinaryDouble { get { return this.colBinaryDouble; } set { this.colBinaryDouble = value; } } protected Double? colBinaryDouble;
            [DataMember(Order=13, IsRequired=false)][XmlElement(Order=13, IsNullable=true)]
            public virtual String ColVarcharMin { get { return this.colVarcharMin; } set { this.colVarcharMin = value; } } protected String colVarcharMin;
            [DataMember(Order=14, IsRequired=false)][XmlElement(Order=14, IsNullable=true)]
            public virtual String ColVarcharMax { get { return this.colVarcharMax; } set { this.colVarcharMax = value; } } protected String colVarcharMax;
            [DataMember(Order=15, IsRequired=false)][XmlElement(Order=15, IsNullable=true)]
            public virtual String ColVarchar2Min { get { return this.colVarchar2Min; } set { this.colVarchar2Min = value; } } protected String colVarchar2Min;
            [DataMember(Order=16, IsRequired=false)][XmlElement(Order=16, IsNullable=true)]
            public virtual String ColVarchar2Max { get { return this.colVarchar2Max; } set { this.colVarchar2Max = value; } } protected String colVarchar2Max;
            [DataMember(Order=17, IsRequired=false)][XmlElement(Order=17, IsNullable=true)]
            public virtual String ColNvarchar2Min { get { return this.colNvarchar2Min; } set { this.colNvarchar2Min = value; } } protected String colNvarchar2Min;
            [DataMember(Order=18, IsRequired=false)][XmlElement(Order=18, IsNullable=true)]
            public virtual String ColNvarchar2Max { get { return this.colNvarchar2Max; } set { this.colNvarchar2Max = value; } } protected String colNvarchar2Max;
            [DataMember(Order=19, IsRequired=false)][XmlElement(Order=19, IsNullable=true)]
            public virtual String ColCharMin { get { return this.colCharMin; } set { this.colCharMin = value; } } protected String colCharMin;
            [DataMember(Order=20, IsRequired=false)][XmlElement(Order=20, IsNullable=true)]
            public virtual String ColCharMax { get { return this.colCharMax; } set { this.colCharMax = value; } } protected String colCharMax;
            [DataMember(Order=21, IsRequired=false)][XmlElement(Order=21, IsNullable=true)]
            public virtual String ColNcharMin { get { return this.colNcharMin; } set { this.colNcharMin = value; } } protected String colNcharMin;
            [DataMember(Order=22, IsRequired=false)][XmlElement(Order=22, IsNullable=true)]
            public virtual String ColNcharMax { get { return this.colNcharMax; } set { this.colNcharMax = value; } } protected String colNcharMax;
            [DataMember(Order=23, IsRequired=false)][XmlElement(Order=23, IsNullable=true)]
            public virtual DateTime? ColDate { get { return this.colDate; } set { this.colDate = value; } } protected DateTime? colDate;
            [DataMember(Order=24, IsRequired=false)][XmlElement(Order=24, IsNullable=true)]
            public virtual DateTime? ColTimestamp { get { return this.colTimestamp; } set { this.colTimestamp = value; } } protected DateTime? colTimestamp;
            [DataMember(Order=25, IsRequired=false)][XmlElement(Order=25, IsNullable=true)]
            public virtual DateTime? ColTimestampPrec0 { get { return this.colTimestampPrec0; } set { this.colTimestampPrec0 = value; } } protected DateTime? colTimestampPrec0;
            [DataMember(Order=26, IsRequired=false)][XmlElement(Order=26, IsNullable=true)]
            public virtual DateTime? ColTimestampPrec9 { get { return this.colTimestampPrec9; } set { this.colTimestampPrec9 = value; } } protected DateTime? colTimestampPrec9;
            [DataMember(Order=27, IsRequired=false)][XmlElement(Order=27, IsNullable=true)]
            public virtual DateTimeOffset? ColTimestampTZ { get { return this.colTimestampTZ; } set { this.colTimestampTZ = value; } } protected DateTimeOffset? colTimestampTZ;
            [DataMember(Order=28, IsRequired=false)][XmlElement(Order=28, IsNullable=true)]
            public virtual DateTimeOffset? ColTimestampTZPrec0 { get { return this.colTimestampTZPrec0; } set { this.colTimestampTZPrec0 = value; } } protected DateTimeOffset? colTimestampTZPrec0;
            [DataMember(Order=29, IsRequired=false)][XmlElement(Order=29, IsNullable=true)]
            public virtual DateTimeOffset? ColTimestampTZPrec9 { get { return this.colTimestampTZPrec9; } set { this.colTimestampTZPrec9 = value; } } protected DateTimeOffset? colTimestampTZPrec9;
            [DataMember(Order=30, IsRequired=false)][XmlElement(Order=30, IsNullable=true)]
            public virtual DateTime? ColTimestampLTZ { get { return this.colTimestampLTZ; } set { this.colTimestampLTZ = value; } } protected DateTime? colTimestampLTZ;
            [DataMember(Order=31, IsRequired=false)][XmlElement(Order=31, IsNullable=true)]
            public virtual DateTime? ColTimestampLTZPrec0 { get { return this.colTimestampLTZPrec0; } set { this.colTimestampLTZPrec0 = value; } } protected DateTime? colTimestampLTZPrec0;
            [DataMember(Order=32, IsRequired=false)][XmlElement(Order=32, IsNullable=true)]
            public virtual DateTime? ColTimestampLTZPrec9 { get { return this.colTimestampLTZPrec9; } set { this.colTimestampLTZPrec9 = value; } } protected DateTime? colTimestampLTZPrec9;
            [DataMember(Order=33, IsRequired=false)][XmlElement(Order=33, IsNullable=true)]
            public virtual Byte[] ColBlob { get { return this.colBlob; } set { this.colBlob = value; } } protected Byte[] colBlob;
            [DataMember(Order=34, IsRequired=false)][XmlElement(Order=34, IsNullable=true)]
            public virtual String ColClob { get { return this.colClob; } set { this.colClob = value; } } protected String colClob;
            [DataMember(Order=35, IsRequired=false)][XmlElement(Order=35, IsNullable=true)]
            public virtual String ColNclob { get { return this.colNclob; } set { this.colNclob = value; } } protected String colNclob;
            [DataMember(Order=36, IsRequired=false)][XmlElement(Order=36, IsNullable=true)]
            public virtual String Abstract { get { return this.@abstract; } set { this.@abstract = value; } } protected String @abstract;
            [DataMember(Order=37, IsRequired=false)][XmlElement(Order=37, IsNullable=true)]
            public virtual String Base { get { return this.@base; } set { this.@base = value; } } protected String @base;
            [DataMember(Order=38, IsRequired=false)][XmlElement(Order=38, IsNullable=true)]
            public virtual String Void { get { return this.@void; } set { this.@void = value; } } protected String @void;
            [DataMember(Order=39, IsRequired=false)][XmlElement(Order=39, IsNullable=true)]
            public virtual String Class { get { return this.@class; } set { this.@class = value; } } protected String @class;
            [DataMember(Order=40, IsRequired=false)][XmlElement(Order=40, IsNullable=true)]
            public virtual String Namespace { get { return this.@namespace; } set { this.@namespace = value; } } protected String @namespace;
            [DataMember(Order=41, IsRequired=false)][XmlElement(Order=41, IsNullable=true)]
            public virtual String Readonly { get { return this.@readonly; } set { this.@readonly = value; } } protected String @readonly;
            [DataMember(Order=42, IsRequired=false)][XmlElement(Order=42, IsNullable=true)]
            public virtual String Partial { get { return this.@partial; } set { this.@partial = value; } } protected String @partial;
            [DataMember(Order=43, IsRequired=false)][XmlElement(Order=43, IsNullable=true)]
            public virtual String Const { get { return this.@const; } set { this.@const = value; } } protected String @const;
            [DataMember(Order=44, IsRequired=false)][XmlElement(Order=44, IsNullable=true)]
            public virtual String Using { get { return this.@using; } set { this.@using = value; } } protected String @using;
            [DataMember(Order=45, IsRequired=false)][XmlElement(Order=45, IsNullable=true)]
            public virtual String ColLast { get { return this.colLast; } set { this.colLast = value; } } protected String colLast;
        } // TTableBigFltUnused

        public ICollection<T_TTableBigFltUnused> ReadResultITTableBigFltUnused<T_TTableBigFltUnused>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where T_TTableBigFltUnused : class, ITTableBigFltUnused, new()   {
            ICollection<T_TTableBigFltUnused> __ret = new List<T_TTableBigFltUnused>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    T_TTableBigFltUnused obj = new T_TTableBigFltUnused();
                    if (!rdr.IsDBNull(0)) obj.Id = Convert.ToInt64(rdr.GetValue(0));
                    if (!rdr.IsDBNull(1)) obj.ColNumberId = Convert.ToInt64(rdr.GetValue(1));
                    if (!rdr.IsDBNull(2)) obj.ColInteger = Convert.ToInt64(rdr.GetValue(2));
                    if (!rdr.IsDBNull(3)) obj.ColInt = Convert.ToInt64(rdr.GetValue(3));
                    if (!rdr.IsDBNull(4)) obj.ColSmallint = Convert.ToInt64(rdr.GetValue(4));
                    if (!rdr.IsDBNull(5)) obj.ColNumeric = Convert.ToInt64(rdr.GetValue(5));
                    if (!rdr.IsDBNull(6)) obj.ColDecimal = Convert.ToInt64(rdr.GetValue(6));
                    if (!rdr.IsDBNull(7)) obj.ColNumber = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(7), 28);
                    if (!rdr.IsDBNull(8)) obj.ColDoublePrecision = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(8), 28);
                    if (!rdr.IsDBNull(9)) obj.ColFloat = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(9), 28);
                    if (!rdr.IsDBNull(10)) obj.ColReal = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(10), 28);
                    if (!rdr.IsDBNull(11)) obj.ColBinaryFloat = Convert.ToSingle(rdr.GetValue(11));
                    if (!rdr.IsDBNull(12)) obj.ColBinaryDouble = Convert.ToDouble(rdr.GetValue(12));
                    if (!rdr.IsDBNull(13)) obj.ColVarcharMin = Convert.ToString(rdr.GetValue(13));
                    if (!rdr.IsDBNull(14)) obj.ColVarcharMax = Convert.ToString(rdr.GetValue(14));
                    if (!rdr.IsDBNull(15)) obj.ColVarchar2Min = Convert.ToString(rdr.GetValue(15));
                    if (!rdr.IsDBNull(16)) obj.ColVarchar2Max = Convert.ToString(rdr.GetValue(16));
                    if (!rdr.IsDBNull(17)) obj.ColNvarchar2Min = Convert.ToString(rdr.GetValue(17));
                    if (!rdr.IsDBNull(18)) obj.ColNvarchar2Max = Convert.ToString(rdr.GetValue(18));
                    if (!rdr.IsDBNull(19)) obj.ColCharMin = Convert.ToString(rdr.GetValue(19));
                    if (!rdr.IsDBNull(20)) obj.ColCharMax = Convert.ToString(rdr.GetValue(20));
                    if (!rdr.IsDBNull(21)) obj.ColNcharMin = Convert.ToString(rdr.GetValue(21));
                    if (!rdr.IsDBNull(22)) obj.ColNcharMax = Convert.ToString(rdr.GetValue(22));
                    if (!rdr.IsDBNull(23)) obj.ColDate = Convert.ToDateTime(rdr.GetValue(23));
                    if (!rdr.IsDBNull(24)) obj.ColTimestamp = Convert.ToDateTime(rdr.GetValue(24));
                    if (!rdr.IsDBNull(25)) obj.ColTimestampPrec0 = Convert.ToDateTime(rdr.GetValue(25));
                    if (!rdr.IsDBNull(26)) obj.ColTimestampPrec9 = Convert.ToDateTime(rdr.GetValue(26));
                    if (!rdr.IsDBNull(27)) obj.ColTimestampTZ = DateTimeOffset.Parse(rdr.GetValue(27).ToString());
                    if (!rdr.IsDBNull(28)) obj.ColTimestampTZPrec0 = DateTimeOffset.Parse(rdr.GetValue(28).ToString());
                    if (!rdr.IsDBNull(29)) obj.ColTimestampTZPrec9 = DateTimeOffset.Parse(rdr.GetValue(29).ToString());
                    if (!rdr.IsDBNull(30)) obj.ColTimestampLTZ = Convert.ToDateTime(rdr.GetValue(30));
                    if (!rdr.IsDBNull(31)) obj.ColTimestampLTZPrec0 = Convert.ToDateTime(rdr.GetValue(31));
                    if (!rdr.IsDBNull(32)) obj.ColTimestampLTZPrec9 = Convert.ToDateTime(rdr.GetValue(32));
                    if (!rdr.IsDBNull(33)) obj.ColBlob = rdr.GetOracleBlob(33).Value;
                    if (!rdr.IsDBNull(34)) obj.ColClob = rdr.GetOracleClob(34).Value;
                    if (!rdr.IsDBNull(35)) obj.ColNclob = rdr.GetOracleClob(35).Value;
                    if (!rdr.IsDBNull(36)) obj.Abstract = Convert.ToString(rdr.GetValue(36));
                    if (!rdr.IsDBNull(37)) obj.Base = Convert.ToString(rdr.GetValue(37));
                    if (!rdr.IsDBNull(38)) obj.Void = Convert.ToString(rdr.GetValue(38));
                    if (!rdr.IsDBNull(39)) obj.Class = Convert.ToString(rdr.GetValue(39));
                    if (!rdr.IsDBNull(40)) obj.Namespace = Convert.ToString(rdr.GetValue(40));
                    if (!rdr.IsDBNull(41)) obj.Readonly = Convert.ToString(rdr.GetValue(41));
                    if (!rdr.IsDBNull(42)) obj.Partial = Convert.ToString(rdr.GetValue(42));
                    if (!rdr.IsDBNull(43)) obj.Const = Convert.ToString(rdr.GetValue(43));
                    if (!rdr.IsDBNull(44)) obj.Using = Convert.ToString(rdr.GetValue(44));
                    if (!rdr.IsDBNull(45)) obj.ColLast = Convert.ToString(rdr.GetValue(45));
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITTableBigFltUnused

        public interface ITTableBig {
            Int64? Id { set; }
            Int64? ColNumberId { set; }
            Int64? ColInteger { set; }
            Int64? ColInt { set; }
            Int64? ColSmallint { set; }
            Int64? ColNumeric { set; }
            Int64? ColDecimal { set; }
            Decimal? ColNumber { set; }
            Decimal? ColDoublePrecision { set; }
            Decimal? ColFloat { set; }
            Decimal? ColReal { set; }
            Single? ColBinaryFloat { set; }
            Double? ColBinaryDouble { set; }
            String ColVarcharMin { set; }
            String ColVarcharMax { set; }
            String ColVarchar2Min { set; }
            String ColVarchar2Max { set; }
            String ColNvarchar2Min { set; }
            String ColNvarchar2Max { set; }
            String ColCharMin { set; }
            String ColCharMax { set; }
            String ColNcharMin { set; }
            String ColNcharMax { set; }
            DateTime? ColDate { set; }
            DateTime? ColTimestamp { set; }
            DateTime? ColTimestampPrec0 { set; }
            DateTime? ColTimestampPrec9 { set; }
            DateTimeOffset? ColTimestampTZ { set; }
            DateTimeOffset? ColTimestampTZPrec0 { set; }
            DateTimeOffset? ColTimestampTZPrec9 { set; }
            DateTime? ColTimestampLTZ { set; }
            DateTime? ColTimestampLTZPrec0 { set; }
            DateTime? ColTimestampLTZPrec9 { set; }
            Byte[] ColBlob { set; }
            String ColClob { set; }
            String ColNclob { set; }
            String Abstract { set; }
            String Base { set; }
            String Void { set; }
            String Class { set; }
            String Namespace { set; }
            String Readonly { set; }
            String Partial { set; }
            String Const { set; }
            String Using { set; }
            String ColLast { set; }
        } // ITTableBig

        [DataContract(Namespace="http://odpt.business.com")][Serializable()]
        public abstract partial class TTableBig : Schema.Odpt.OdptPackageRecord, ITTableBig {
            private Byte propertyToEnsuresPartialClassNamesAreUniqueAtCompileTime { get; set; }
            [DataMember(Order=0, IsRequired=false)][XmlElement(Order=0, IsNullable=true)]
            public virtual Int64? Id { get { return this.id; } set { this.id = value; } } protected Int64? id;
            [DataMember(Order=1, IsRequired=false)][XmlElement(Order=1, IsNullable=true)]
            public virtual Int64? ColNumberId { get { return this.colNumberId; } set { this.colNumberId = value; } } protected Int64? colNumberId;
            [DataMember(Order=2, IsRequired=false)][XmlElement(Order=2, IsNullable=true)]
            public virtual Int64? ColInteger { get { return this.colInteger; } set { this.colInteger = value; } } protected Int64? colInteger;
            [DataMember(Order=3, IsRequired=false)][XmlElement(Order=3, IsNullable=true)]
            public virtual Int64? ColInt { get { return this.colInt; } set { this.colInt = value; } } protected Int64? colInt;
            [DataMember(Order=4, IsRequired=false)][XmlElement(Order=4, IsNullable=true)]
            public virtual Int64? ColSmallint { get { return this.colSmallint; } set { this.colSmallint = value; } } protected Int64? colSmallint;
            [DataMember(Order=5, IsRequired=false)][XmlElement(Order=5, IsNullable=true)]
            public virtual Int64? ColNumeric { get { return this.colNumeric; } set { this.colNumeric = value; } } protected Int64? colNumeric;
            [DataMember(Order=6, IsRequired=false)][XmlElement(Order=6, IsNullable=true)]
            public virtual Int64? ColDecimal { get { return this.colDecimal; } set { this.colDecimal = value; } } protected Int64? colDecimal;
            [DataMember(Order=7, IsRequired=false)][XmlElement(Order=7, IsNullable=true)]
            public virtual Decimal? ColNumber { get { return this.colNumber; } set { this.colNumber = value; } } protected Decimal? colNumber;
            [DataMember(Order=8, IsRequired=false)][XmlElement(Order=8, IsNullable=true)]
            public virtual Decimal? ColDoublePrecision { get { return this.colDoublePrecision; } set { this.colDoublePrecision = value; } } protected Decimal? colDoublePrecision;
            [DataMember(Order=9, IsRequired=false)][XmlElement(Order=9, IsNullable=true)]
            public virtual Decimal? ColFloat { get { return this.colFloat; } set { this.colFloat = value; } } protected Decimal? colFloat;
            [DataMember(Order=10, IsRequired=false)][XmlElement(Order=10, IsNullable=true)]
            public virtual Decimal? ColReal { get { return this.colReal; } set { this.colReal = value; } } protected Decimal? colReal;
            [DataMember(Order=11, IsRequired=false)][XmlElement(Order=11, IsNullable=true)]
            public virtual Single? ColBinaryFloat { get { return this.colBinaryFloat; } set { this.colBinaryFloat = value; } } protected Single? colBinaryFloat;
            [DataMember(Order=12, IsRequired=false)][XmlElement(Order=12, IsNullable=true)]
            public virtual Double? ColBinaryDouble { get { return this.colBinaryDouble; } set { this.colBinaryDouble = value; } } protected Double? colBinaryDouble;
            [DataMember(Order=13, IsRequired=false)][XmlElement(Order=13, IsNullable=true)]
            public virtual String ColVarcharMin { get { return this.colVarcharMin; } set { this.colVarcharMin = value; } } protected String colVarcharMin;
            [DataMember(Order=14, IsRequired=false)][XmlElement(Order=14, IsNullable=true)]
            public virtual String ColVarcharMax { get { return this.colVarcharMax; } set { this.colVarcharMax = value; } } protected String colVarcharMax;
            [DataMember(Order=15, IsRequired=false)][XmlElement(Order=15, IsNullable=true)]
            public virtual String ColVarchar2Min { get { return this.colVarchar2Min; } set { this.colVarchar2Min = value; } } protected String colVarchar2Min;
            [DataMember(Order=16, IsRequired=false)][XmlElement(Order=16, IsNullable=true)]
            public virtual String ColVarchar2Max { get { return this.colVarchar2Max; } set { this.colVarchar2Max = value; } } protected String colVarchar2Max;
            [DataMember(Order=17, IsRequired=false)][XmlElement(Order=17, IsNullable=true)]
            public virtual String ColNvarchar2Min { get { return this.colNvarchar2Min; } set { this.colNvarchar2Min = value; } } protected String colNvarchar2Min;
            [DataMember(Order=18, IsRequired=false)][XmlElement(Order=18, IsNullable=true)]
            public virtual String ColNvarchar2Max { get { return this.colNvarchar2Max; } set { this.colNvarchar2Max = value; } } protected String colNvarchar2Max;
            [DataMember(Order=19, IsRequired=false)][XmlElement(Order=19, IsNullable=true)]
            public virtual String ColCharMin { get { return this.colCharMin; } set { this.colCharMin = value; } } protected String colCharMin;
            [DataMember(Order=20, IsRequired=false)][XmlElement(Order=20, IsNullable=true)]
            public virtual String ColCharMax { get { return this.colCharMax; } set { this.colCharMax = value; } } protected String colCharMax;
            [DataMember(Order=21, IsRequired=false)][XmlElement(Order=21, IsNullable=true)]
            public virtual String ColNcharMin { get { return this.colNcharMin; } set { this.colNcharMin = value; } } protected String colNcharMin;
            [DataMember(Order=22, IsRequired=false)][XmlElement(Order=22, IsNullable=true)]
            public virtual String ColNcharMax { get { return this.colNcharMax; } set { this.colNcharMax = value; } } protected String colNcharMax;
            [DataMember(Order=23, IsRequired=false)][XmlElement(Order=23, IsNullable=true)]
            public virtual DateTime? ColDate { get { return this.colDate; } set { this.colDate = value; } } protected DateTime? colDate;
            [DataMember(Order=24, IsRequired=false)][XmlElement(Order=24, IsNullable=true)]
            public virtual DateTime? ColTimestamp { get { return this.colTimestamp; } set { this.colTimestamp = value; } } protected DateTime? colTimestamp;
            [DataMember(Order=25, IsRequired=false)][XmlElement(Order=25, IsNullable=true)]
            public virtual DateTime? ColTimestampPrec0 { get { return this.colTimestampPrec0; } set { this.colTimestampPrec0 = value; } } protected DateTime? colTimestampPrec0;
            [DataMember(Order=26, IsRequired=false)][XmlElement(Order=26, IsNullable=true)]
            public virtual DateTime? ColTimestampPrec9 { get { return this.colTimestampPrec9; } set { this.colTimestampPrec9 = value; } } protected DateTime? colTimestampPrec9;
            [DataMember(Order=27, IsRequired=false)][XmlElement(Order=27, IsNullable=true)]
            public virtual DateTimeOffset? ColTimestampTZ { get { return this.colTimestampTZ; } set { this.colTimestampTZ = value; } } protected DateTimeOffset? colTimestampTZ;
            [DataMember(Order=28, IsRequired=false)][XmlElement(Order=28, IsNullable=true)]
            public virtual DateTimeOffset? ColTimestampTZPrec0 { get { return this.colTimestampTZPrec0; } set { this.colTimestampTZPrec0 = value; } } protected DateTimeOffset? colTimestampTZPrec0;
            [DataMember(Order=29, IsRequired=false)][XmlElement(Order=29, IsNullable=true)]
            public virtual DateTimeOffset? ColTimestampTZPrec9 { get { return this.colTimestampTZPrec9; } set { this.colTimestampTZPrec9 = value; } } protected DateTimeOffset? colTimestampTZPrec9;
            [DataMember(Order=30, IsRequired=false)][XmlElement(Order=30, IsNullable=true)]
            public virtual DateTime? ColTimestampLTZ { get { return this.colTimestampLTZ; } set { this.colTimestampLTZ = value; } } protected DateTime? colTimestampLTZ;
            [DataMember(Order=31, IsRequired=false)][XmlElement(Order=31, IsNullable=true)]
            public virtual DateTime? ColTimestampLTZPrec0 { get { return this.colTimestampLTZPrec0; } set { this.colTimestampLTZPrec0 = value; } } protected DateTime? colTimestampLTZPrec0;
            [DataMember(Order=32, IsRequired=false)][XmlElement(Order=32, IsNullable=true)]
            public virtual DateTime? ColTimestampLTZPrec9 { get { return this.colTimestampLTZPrec9; } set { this.colTimestampLTZPrec9 = value; } } protected DateTime? colTimestampLTZPrec9;
            [DataMember(Order=33, IsRequired=false)][XmlElement(Order=33, IsNullable=true)]
            public virtual Byte[] ColBlob { get { return this.colBlob; } set { this.colBlob = value; } } protected Byte[] colBlob;
            [DataMember(Order=34, IsRequired=false)][XmlElement(Order=34, IsNullable=true)]
            public virtual String ColClob { get { return this.colClob; } set { this.colClob = value; } } protected String colClob;
            [DataMember(Order=35, IsRequired=false)][XmlElement(Order=35, IsNullable=true)]
            public virtual String ColNclob { get { return this.colNclob; } set { this.colNclob = value; } } protected String colNclob;
            [DataMember(Order=36, IsRequired=false)][XmlElement(Order=36, IsNullable=true)]
            public virtual String Abstract { get { return this.@abstract; } set { this.@abstract = value; } } protected String @abstract;
            [DataMember(Order=37, IsRequired=false)][XmlElement(Order=37, IsNullable=true)]
            public virtual String Base { get { return this.@base; } set { this.@base = value; } } protected String @base;
            [DataMember(Order=38, IsRequired=false)][XmlElement(Order=38, IsNullable=true)]
            public virtual String Void { get { return this.@void; } set { this.@void = value; } } protected String @void;
            [DataMember(Order=39, IsRequired=false)][XmlElement(Order=39, IsNullable=true)]
            public virtual String Class { get { return this.@class; } set { this.@class = value; } } protected String @class;
            [DataMember(Order=40, IsRequired=false)][XmlElement(Order=40, IsNullable=true)]
            public virtual String Namespace { get { return this.@namespace; } set { this.@namespace = value; } } protected String @namespace;
            [DataMember(Order=41, IsRequired=false)][XmlElement(Order=41, IsNullable=true)]
            public virtual String Readonly { get { return this.@readonly; } set { this.@readonly = value; } } protected String @readonly;
            [DataMember(Order=42, IsRequired=false)][XmlElement(Order=42, IsNullable=true)]
            public virtual String Partial { get { return this.@partial; } set { this.@partial = value; } } protected String @partial;
            [DataMember(Order=43, IsRequired=false)][XmlElement(Order=43, IsNullable=true)]
            public virtual String Const { get { return this.@const; } set { this.@const = value; } } protected String @const;
            [DataMember(Order=44, IsRequired=false)][XmlElement(Order=44, IsNullable=true)]
            public virtual String Using { get { return this.@using; } set { this.@using = value; } } protected String @using;
            [DataMember(Order=45, IsRequired=false)][XmlElement(Order=45, IsNullable=true)]
            public virtual String ColLast { get { return this.colLast; } set { this.colLast = value; } } protected String colLast;
        } // TTableBig

        public ICollection<T_TTableBig> ReadResultITTableBig<T_TTableBig>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where T_TTableBig : class, ITTableBig, new()   {
            ICollection<T_TTableBig> __ret = new List<T_TTableBig>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    T_TTableBig obj = new T_TTableBig();
                    if (!rdr.IsDBNull(0)) obj.Id = Convert.ToInt64(rdr.GetValue(0));
                    if (!rdr.IsDBNull(1)) obj.ColNumberId = Convert.ToInt64(rdr.GetValue(1));
                    if (!rdr.IsDBNull(2)) obj.ColInteger = Convert.ToInt64(rdr.GetValue(2));
                    if (!rdr.IsDBNull(3)) obj.ColInt = Convert.ToInt64(rdr.GetValue(3));
                    if (!rdr.IsDBNull(4)) obj.ColSmallint = Convert.ToInt64(rdr.GetValue(4));
                    if (!rdr.IsDBNull(5)) obj.ColNumeric = Convert.ToInt64(rdr.GetValue(5));
                    if (!rdr.IsDBNull(6)) obj.ColDecimal = Convert.ToInt64(rdr.GetValue(6));
                    if (!rdr.IsDBNull(7)) obj.ColNumber = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(7), 28);
                    if (!rdr.IsDBNull(8)) obj.ColDoublePrecision = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(8), 28);
                    if (!rdr.IsDBNull(9)) obj.ColFloat = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(9), 28);
                    if (!rdr.IsDBNull(10)) obj.ColReal = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(10), 28);
                    if (!rdr.IsDBNull(11)) obj.ColBinaryFloat = Convert.ToSingle(rdr.GetValue(11));
                    if (!rdr.IsDBNull(12)) obj.ColBinaryDouble = Convert.ToDouble(rdr.GetValue(12));
                    if (!rdr.IsDBNull(13)) obj.ColVarcharMin = Convert.ToString(rdr.GetValue(13));
                    if (!rdr.IsDBNull(14)) obj.ColVarcharMax = Convert.ToString(rdr.GetValue(14));
                    if (!rdr.IsDBNull(15)) obj.ColVarchar2Min = Convert.ToString(rdr.GetValue(15));
                    if (!rdr.IsDBNull(16)) obj.ColVarchar2Max = Convert.ToString(rdr.GetValue(16));
                    if (!rdr.IsDBNull(17)) obj.ColNvarchar2Min = Convert.ToString(rdr.GetValue(17));
                    if (!rdr.IsDBNull(18)) obj.ColNvarchar2Max = Convert.ToString(rdr.GetValue(18));
                    if (!rdr.IsDBNull(19)) obj.ColCharMin = Convert.ToString(rdr.GetValue(19));
                    if (!rdr.IsDBNull(20)) obj.ColCharMax = Convert.ToString(rdr.GetValue(20));
                    if (!rdr.IsDBNull(21)) obj.ColNcharMin = Convert.ToString(rdr.GetValue(21));
                    if (!rdr.IsDBNull(22)) obj.ColNcharMax = Convert.ToString(rdr.GetValue(22));
                    if (!rdr.IsDBNull(23)) obj.ColDate = Convert.ToDateTime(rdr.GetValue(23));
                    if (!rdr.IsDBNull(24)) obj.ColTimestamp = Convert.ToDateTime(rdr.GetValue(24));
                    if (!rdr.IsDBNull(25)) obj.ColTimestampPrec0 = Convert.ToDateTime(rdr.GetValue(25));
                    if (!rdr.IsDBNull(26)) obj.ColTimestampPrec9 = Convert.ToDateTime(rdr.GetValue(26));
                    if (!rdr.IsDBNull(27)) obj.ColTimestampTZ = DateTimeOffset.Parse(rdr.GetValue(27).ToString());
                    if (!rdr.IsDBNull(28)) obj.ColTimestampTZPrec0 = DateTimeOffset.Parse(rdr.GetValue(28).ToString());
                    if (!rdr.IsDBNull(29)) obj.ColTimestampTZPrec9 = DateTimeOffset.Parse(rdr.GetValue(29).ToString());
                    if (!rdr.IsDBNull(30)) obj.ColTimestampLTZ = Convert.ToDateTime(rdr.GetValue(30));
                    if (!rdr.IsDBNull(31)) obj.ColTimestampLTZPrec0 = Convert.ToDateTime(rdr.GetValue(31));
                    if (!rdr.IsDBNull(32)) obj.ColTimestampLTZPrec9 = Convert.ToDateTime(rdr.GetValue(32));
                    if (!rdr.IsDBNull(33)) obj.ColBlob = rdr.GetOracleBlob(33).Value;
                    if (!rdr.IsDBNull(34)) obj.ColClob = rdr.GetOracleClob(34).Value;
                    if (!rdr.IsDBNull(35)) obj.ColNclob = rdr.GetOracleClob(35).Value;
                    if (!rdr.IsDBNull(36)) obj.Abstract = Convert.ToString(rdr.GetValue(36));
                    if (!rdr.IsDBNull(37)) obj.Base = Convert.ToString(rdr.GetValue(37));
                    if (!rdr.IsDBNull(38)) obj.Void = Convert.ToString(rdr.GetValue(38));
                    if (!rdr.IsDBNull(39)) obj.Class = Convert.ToString(rdr.GetValue(39));
                    if (!rdr.IsDBNull(40)) obj.Namespace = Convert.ToString(rdr.GetValue(40));
                    if (!rdr.IsDBNull(41)) obj.Readonly = Convert.ToString(rdr.GetValue(41));
                    if (!rdr.IsDBNull(42)) obj.Partial = Convert.ToString(rdr.GetValue(42));
                    if (!rdr.IsDBNull(43)) obj.Const = Convert.ToString(rdr.GetValue(43));
                    if (!rdr.IsDBNull(44)) obj.Using = Convert.ToString(rdr.GetValue(44));
                    if (!rdr.IsDBNull(45)) obj.ColLast = Convert.ToString(rdr.GetValue(45));
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITTableBig

        public interface ITTableBigChar {
            Int64? Id { set; }
            String ColVarcharMin { set; }
            String ColVarcharMax { set; }
            String ColVarchar2Min { set; }
            String ColVarchar2Max { set; }
            String ColNvarchar2Min { set; }
            String ColNvarchar2Max { set; }
            String ColCharMin { set; }
            String ColCharMax { set; }
            String ColNcharMin { set; }
            String ColNcharMax { set; }
            String ColLast { set; }
        } // ITTableBigChar

        [DataContract(Namespace="http://odpt.business.com")][Serializable()]
        public abstract partial class TTableBigChar : Schema.Odpt.OdptPackageRecord, ITTableBigChar {
            private Byte propertyToEnsuresPartialClassNamesAreUniqueAtCompileTime { get; set; }
            [DataMember(Order=0, IsRequired=false)][XmlElement(Order=0, IsNullable=true)]
            public virtual Int64? Id { get { return this.id; } set { this.id = value; } } protected Int64? id;
            [DataMember(Order=1, IsRequired=false)][XmlElement(Order=1, IsNullable=true)]
            public virtual String ColVarcharMin { get { return this.colVarcharMin; } set { this.colVarcharMin = value; } } protected String colVarcharMin;
            [DataMember(Order=2, IsRequired=false)][XmlElement(Order=2, IsNullable=true)]
            public virtual String ColVarcharMax { get { return this.colVarcharMax; } set { this.colVarcharMax = value; } } protected String colVarcharMax;
            [DataMember(Order=3, IsRequired=false)][XmlElement(Order=3, IsNullable=true)]
            public virtual String ColVarchar2Min { get { return this.colVarchar2Min; } set { this.colVarchar2Min = value; } } protected String colVarchar2Min;
            [DataMember(Order=4, IsRequired=false)][XmlElement(Order=4, IsNullable=true)]
            public virtual String ColVarchar2Max { get { return this.colVarchar2Max; } set { this.colVarchar2Max = value; } } protected String colVarchar2Max;
            [DataMember(Order=5, IsRequired=false)][XmlElement(Order=5, IsNullable=true)]
            public virtual String ColNvarchar2Min { get { return this.colNvarchar2Min; } set { this.colNvarchar2Min = value; } } protected String colNvarchar2Min;
            [DataMember(Order=6, IsRequired=false)][XmlElement(Order=6, IsNullable=true)]
            public virtual String ColNvarchar2Max { get { return this.colNvarchar2Max; } set { this.colNvarchar2Max = value; } } protected String colNvarchar2Max;
            [DataMember(Order=7, IsRequired=false)][XmlElement(Order=7, IsNullable=true)]
            public virtual String ColCharMin { get { return this.colCharMin; } set { this.colCharMin = value; } } protected String colCharMin;
            [DataMember(Order=8, IsRequired=false)][XmlElement(Order=8, IsNullable=true)]
            public virtual String ColCharMax { get { return this.colCharMax; } set { this.colCharMax = value; } } protected String colCharMax;
            [DataMember(Order=9, IsRequired=false)][XmlElement(Order=9, IsNullable=true)]
            public virtual String ColNcharMin { get { return this.colNcharMin; } set { this.colNcharMin = value; } } protected String colNcharMin;
            [DataMember(Order=10, IsRequired=false)][XmlElement(Order=10, IsNullable=true)]
            public virtual String ColNcharMax { get { return this.colNcharMax; } set { this.colNcharMax = value; } } protected String colNcharMax;
            [DataMember(Order=11, IsRequired=false)][XmlElement(Order=11, IsNullable=true)]
            public virtual String ColLast { get { return this.colLast; } set { this.colLast = value; } } protected String colLast;
        } // TTableBigChar

        public ICollection<T_TTableBigChar> ReadResultITTableBigChar<T_TTableBigChar>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where T_TTableBigChar : class, ITTableBigChar, new()   {
            ICollection<T_TTableBigChar> __ret = new List<T_TTableBigChar>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    T_TTableBigChar obj = new T_TTableBigChar();
                    if (!rdr.IsDBNull(0)) obj.Id = Convert.ToInt64(rdr.GetValue(0));
                    if (!rdr.IsDBNull(1)) obj.ColVarcharMin = Convert.ToString(rdr.GetValue(1));
                    if (!rdr.IsDBNull(2)) obj.ColVarcharMax = Convert.ToString(rdr.GetValue(2));
                    if (!rdr.IsDBNull(3)) obj.ColVarchar2Min = Convert.ToString(rdr.GetValue(3));
                    if (!rdr.IsDBNull(4)) obj.ColVarchar2Max = Convert.ToString(rdr.GetValue(4));
                    if (!rdr.IsDBNull(5)) obj.ColNvarchar2Min = Convert.ToString(rdr.GetValue(5));
                    if (!rdr.IsDBNull(6)) obj.ColNvarchar2Max = Convert.ToString(rdr.GetValue(6));
                    if (!rdr.IsDBNull(7)) obj.ColCharMin = Convert.ToString(rdr.GetValue(7));
                    if (!rdr.IsDBNull(8)) obj.ColCharMax = Convert.ToString(rdr.GetValue(8));
                    if (!rdr.IsDBNull(9)) obj.ColNcharMin = Convert.ToString(rdr.GetValue(9));
                    if (!rdr.IsDBNull(10)) obj.ColNcharMax = Convert.ToString(rdr.GetValue(10));
                    if (!rdr.IsDBNull(11)) obj.ColLast = Convert.ToString(rdr.GetValue(11));
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITTableBigChar

        public void DeleteRow(Int64? pId, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.DELETE_ROW", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_ID", OracleDbType.Int64, pId, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DeleteRow

        public ICollection<T_TTableBigFltUnused> GetRowsTypedFltrUnused<T_TTableBigFltUnused>(out ICollection<T_TTableBigFltUnused> pRefCursor, out ICollection<T_TTableBigFltUnused> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBigFltUnused : class, new() {
            ICollection<T_TTableBigFltUnused> __ret = new List<T_TTableBigFltUnused>(); pRefCursor = new List<T_TTableBigFltUnused>(); pRefCursor2 = new List<T_TTableBigFltUnused>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_FLTR_UNUSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_TTableBigFltUnused>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_TTableBigFltUnused>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_TTableBigFltUnused>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedFltrUnused

        public ICollection<T_TTableBigFltUnused> GetRowsTypedFltrUnused<T_TTableBigFltUnused>(out ICollection<T_TTableBigFltUnused> pRefCursor, out ICollection<T_TTableBigFltUnused> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBigFltUnused : class, ITTableBigFltUnused, new() {
            ICollection<T_TTableBigFltUnused> __ret = new List<T_TTableBigFltUnused>(); pRefCursor = new List<T_TTableBigFltUnused>(); pRefCursor2 = new List<T_TTableBigFltUnused>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_FLTR_UNUSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableBigFltUnused<T_TTableBigFltUnused>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableBigFltUnused<T_TTableBigFltUnused>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = ReadResultITTableBigFltUnused<T_TTableBigFltUnused>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedFltrUnused

        public ICollection<T_TTableBigFltUsed> GetRowsTypedFltrUsed<T_TTableBigFltUsed>(out ICollection<T_TTableBigFltUsed> pRefCursor, out ICollection<T_TTableBigFltUsed> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBigFltUsed : class, new() {
            ICollection<T_TTableBigFltUsed> __ret = new List<T_TTableBigFltUsed>(); pRefCursor = new List<T_TTableBigFltUsed>(); pRefCursor2 = new List<T_TTableBigFltUsed>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_FLTR_USED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_TTableBigFltUsed>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_TTableBigFltUsed>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_TTableBigFltUsed>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedFltrUsed

        public ICollection<T_TTableBigFltUsed> GetRowsTypedFltrUsed<T_TTableBigFltUsed>(out ICollection<T_TTableBigFltUsed> pRefCursor, out ICollection<T_TTableBigFltUsed> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBigFltUsed : class, FltrPkgRecUsed.ITTableBigFltUsed, new() {
            ICollection<T_TTableBigFltUsed> __ret = new List<T_TTableBigFltUsed>(); pRefCursor = new List<T_TTableBigFltUsed>(); pRefCursor2 = new List<T_TTableBigFltUsed>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_FLTR_USED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = FltrPkgRecUsed.Instance.ReadResultITTableBigFltUsed<T_TTableBigFltUsed>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = FltrPkgRecUsed.Instance.ReadResultITTableBigFltUsed<T_TTableBigFltUsed>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = FltrPkgRecUsed.Instance.ReadResultITTableBigFltUsed<T_TTableBigFltUsed>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedFltrUsed

        public Int64? GetRowsTypedOut<T_TTableBig>(out ICollection<T_TTableBig> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBig : class, new() {
            Int64? __ret = null; pRefCursor = new List<T_TTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_TTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut

        public Int64? GetRowsTypedOut<T_TTableBig>(out ICollection<T_TTableBig> pRefCursor, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBig : class, ITTableBig, new() {
            Int64? __ret = null; pRefCursor = new List<T_TTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableBig<T_TTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut

        public Int64? GetRowsTypedOut2<T_TTableBig, T_TTableBigChar>(out ICollection<T_TTableBig> pRefCursor, out ICollection<T_TTableBigChar> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBig : class, new()
                where T_TTableBigChar : class, new() {
            Int64? __ret = null; pRefCursor = new List<T_TTableBig>(); pRefCursor2 = new List<T_TTableBigChar>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_TTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_TTableBigChar>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2

        public Int64? GetRowsTypedOut2<T_TTableBig, T_TTableBigChar>(out ICollection<T_TTableBig> pRefCursor, out ICollection<T_TTableBigChar> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBig : class, ITTableBig, new()
                where T_TTableBigChar : class, ITTableBigChar, new() {
            Int64? __ret = null; pRefCursor = new List<T_TTableBig>(); pRefCursor2 = new List<T_TTableBigChar>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableBig<T_TTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = ReadResultITTableBigChar<T_TTableBigChar>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2

        public ICollection<T_TTableBig> GetRowsTypedOut2Ret<T_TTableBig, T_TTableBigChar>(out ICollection<T_TTableBig> pRefCursor, out ICollection<T_TTableBigChar> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBig : class, new()
                where T_TTableBigChar : class, new() {
            ICollection<T_TTableBig> __ret = new List<T_TTableBig>(); pRefCursor = new List<T_TTableBig>(); pRefCursor2 = new List<T_TTableBigChar>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_TTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_TTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_TTableBigChar>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2Ret

        public ICollection<T_TTableBig> GetRowsTypedOut2Ret<T_TTableBig, T_TTableBigChar>(out ICollection<T_TTableBig> pRefCursor, out ICollection<T_TTableBigChar> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBig : class, ITTableBig, new()
                where T_TTableBigChar : class, ITTableBigChar, new() {
            ICollection<T_TTableBig> __ret = new List<T_TTableBig>(); pRefCursor = new List<T_TTableBig>(); pRefCursor2 = new List<T_TTableBigChar>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableBig<T_TTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableBig<T_TTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = ReadResultITTableBigChar<T_TTableBigChar>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2Ret

        public ICollection<T_TTableBig> GetRowsTypedOutRet<T_TTableBig>(out ICollection<T_TTableBig> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBig : class, new() {
            ICollection<T_TTableBig> __ret = new List<T_TTableBig>(); pRefCursor = new List<T_TTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_TTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_TTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOutRet

        public ICollection<T_TTableBig> GetRowsTypedOutRet<T_TTableBig>(out ICollection<T_TTableBig> pRefCursor, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBig : class, ITTableBig, new() {
            ICollection<T_TTableBig> __ret = new List<T_TTableBig>(); pRefCursor = new List<T_TTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableBig<T_TTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableBig<T_TTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOutRet

        public ICollection<T_TTableBig> GetRowsTypedRet<T_TTableBig>(
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBig : class, new() {
            ICollection<T_TTableBig> __ret = new List<T_TTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_TTableBig>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet

        public ICollection<T_TTableBig> GetRowsTypedRet<T_TTableBig>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBig : class, ITTableBig, new() {
            ICollection<T_TTableBig> __ret = new List<T_TTableBig>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableBig<T_TTableBig>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet

        // **PROC IGNORED** - Code generation for REF CURSOR OF ROWTYPE type has not been implemented
        // public ICollection<T_GetRowsTypedTableRowTypeSomeRowType> GetRowsTypedTableRowType<T_GetRowsTypedTableRowTypeSomeRowType>(
        //        bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - Code generation for REF CURSOR OF ROWTYPE type has not been implemented
        // public ICollection<T_GetRowsTypedTableRowTypeSomeRowType> GetRowsTypedTableRowType<T_GetRowsTypedTableRowTypeSomeRowType>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)

        public ICollection<T_returnUntyped> GetRowsUntypedFltrUnused<T_returnUntyped, T_pRefCursorUntyped, T_pRefCursor2Untyped>(out ICollection<T_pRefCursorUntyped> pRefCursor, out ICollection<T_pRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_returnUntyped : class, new()
                where T_pRefCursorUntyped : class, new()
                where T_pRefCursor2Untyped : class, new() {
            ICollection<T_returnUntyped> __ret = new List<T_returnUntyped>(); pRefCursor = new List<T_pRefCursorUntyped>(); pRefCursor2 = new List<T_pRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_FLTR_UNUSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_returnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_pRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_pRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedFltrUnused

        public DataTable GetRowsUntypedFltrUnused(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_FLTR_UNUSED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedFltrUnused

        public ICollection<T_returnUntyped> GetRowsUntypedFltrUsed<T_returnUntyped, T_pRefCursorUntyped, T_pRefCursor2Untyped>(out ICollection<T_pRefCursorUntyped> pRefCursor, out ICollection<T_pRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_returnUntyped : class, new()
                where T_pRefCursorUntyped : class, new()
                where T_pRefCursor2Untyped : class, new() {
            ICollection<T_returnUntyped> __ret = new List<T_returnUntyped>(); pRefCursor = new List<T_pRefCursorUntyped>(); pRefCursor2 = new List<T_pRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_FLTR_USED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_returnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_pRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_pRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedFltrUsed

        public DataTable GetRowsUntypedFltrUsed(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_FLTR_USED", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedFltrUsed

        public Int64? GetRowsUntypedOut<T_pRefCursorUntyped>(out ICollection<T_pRefCursorUntyped> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where T_pRefCursorUntyped : class, new() {
            Int64? __ret = null; pRefCursor = new List<T_pRefCursorUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_pRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut

        public Int64? GetRowsUntypedOut(out DataTable pRefCursor, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pRefCursor = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut

        public Int64? GetRowsUntypedOut2<T_pRefCursorUntyped, T_pRefCursor2Untyped>(out ICollection<T_pRefCursorUntyped> pRefCursor, out ICollection<T_pRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_pRefCursorUntyped : class, new()
                where T_pRefCursor2Untyped : class, new() {
            Int64? __ret = null; pRefCursor = new List<T_pRefCursorUntyped>(); pRefCursor2 = new List<T_pRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_pRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_pRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2

        public Int64? GetRowsUntypedOut2(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2

        public ICollection<T_returnUntyped> GetRowsUntypedOut2Ret<T_returnUntyped, T_pRefCursorUntyped, T_pRefCursor2Untyped>(out ICollection<T_pRefCursorUntyped> pRefCursor, out ICollection<T_pRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_returnUntyped : class, new()
                where T_pRefCursorUntyped : class, new()
                where T_pRefCursor2Untyped : class, new() {
            ICollection<T_returnUntyped> __ret = new List<T_returnUntyped>(); pRefCursor = new List<T_pRefCursorUntyped>(); pRefCursor2 = new List<T_pRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_returnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_pRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_pRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2Ret

        public DataTable GetRowsUntypedOut2Ret(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2Ret

        public ICollection<T_returnUntyped> GetRowsUntypedOutRet<T_returnUntyped, T_pRefCursorUntyped>(out ICollection<T_pRefCursorUntyped> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where T_returnUntyped : class, new()
                where T_pRefCursorUntyped : class, new() {
            ICollection<T_returnUntyped> __ret = new List<T_returnUntyped>(); pRefCursor = new List<T_pRefCursorUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_returnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_pRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOutRet

        public DataTable GetRowsUntypedOutRet(out DataTable pRefCursor, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOutRet

        public ICollection<T_returnUntyped> GetRowsUntypedRet<T_returnUntyped>(
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_returnUntyped : class, new() {
            ICollection<T_returnUntyped> __ret = new List<T_returnUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_returnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedRet

        public DataTable GetRowsUntypedRet(Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.GET_ROWS_UNTYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedRet

        public Int64? InsertRow(Int64? pColNumberId, Int64? pColInteger, Int64? pColInt, Int64? pColSmallint, 
                Int64? pColNumeric, Int64? pColDecimal, Decimal? pColNumber, Decimal? pColDoublePrecision, Decimal? pColFloat, Decimal? pColReal, 
                Single? pColBinaryFloat, Double? pColBinaryDouble, String pColVarcharMin, String pColVarcharMax, String pColVarchar2Min, String pColVarchar2Max, 
                String pColNvarchar2Min, String pColNvarchar2Max, String pColCharMin, String pColCharMax, String pColNcharMin, String pColNcharMax, 
                DateTime? pColDate, DateTime? pColTimestamp, DateTime? pColTimestampPrec0, DateTime? pColTimestampPrec9, DateTimeOffset? pColTimestampTZ, DateTimeOffset? pColTimestampTZPrec0, 
                DateTimeOffset? pColTimestampTZPrec9, DateTime? pColTimestampLTZ, DateTime? pColTimestampLTZPrec0, DateTime? pColTimestampLTZPrec9, Byte[] pColBlob, String pColClob, 
                String pColNclob, String @abstract, String @base, String @void, String @class, String @namespace, 
                String @readonly, String @partial, String @const, String @using, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.INSERT_ROW", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_ID", OracleDbType.Int64, pColNumberId, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_INTEGER", OracleDbType.Int64, pColInteger, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_INT", OracleDbType.Int64, pColInt, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_SMALLINT", OracleDbType.Int64, pColSmallint, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMERIC", OracleDbType.Int64, pColNumeric, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_DECIMAL", OracleDbType.Int64, pColDecimal, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER", OracleDbType.Decimal, pColNumber, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_DOUBLE_PRECISION", OracleDbType.Decimal, pColDoublePrecision, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_FLOAT", OracleDbType.Decimal, pColFloat, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_REAL", OracleDbType.Decimal, pColReal, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_BINARY_FLOAT", OracleDbType.BinaryFloat, pColBinaryFloat, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_BINARY_DOUBLE", OracleDbType.BinaryDouble, pColBinaryDouble, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_VARCHAR_MIN", OracleDbType.Varchar2, pColVarcharMin, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_VARCHAR_MAX", OracleDbType.Varchar2, pColVarcharMax, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_VARCHAR2_MIN", OracleDbType.Varchar2, pColVarchar2Min, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_VARCHAR2_MAX", OracleDbType.Varchar2, pColVarchar2Max, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NVARCHAR2_MIN", OracleDbType.NVarchar2, pColNvarchar2Min, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NVARCHAR2_MAX", OracleDbType.NVarchar2, pColNvarchar2Max, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_CHAR_MIN", OracleDbType.Char, pColCharMin, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_CHAR_MAX", OracleDbType.Char, pColCharMax, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NCHAR_MIN", OracleDbType.NChar, pColNcharMin, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NCHAR_MAX", OracleDbType.NChar, pColNcharMax, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_DATE", OracleDbType.Date, pColDate, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP", OracleDbType.TimeStamp, pColTimestamp, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_PREC0", OracleDbType.TimeStamp, pColTimestampPrec0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_PREC9", OracleDbType.TimeStamp, pColTimestampPrec9, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_T_Z", OracleDbType.TimeStampTZ, pColTimestampTZ, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_T_Z_PREC0", OracleDbType.TimeStampTZ, pColTimestampTZPrec0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_T_Z_PREC9", OracleDbType.TimeStampTZ, pColTimestampTZPrec9, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_L_T_Z", OracleDbType.TimeStampLTZ, pColTimestampLTZ, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_L_T_Z_PREC0", OracleDbType.TimeStampLTZ, pColTimestampLTZPrec0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_TIMESTAMP_L_T_Z_PREC9", OracleDbType.TimeStampLTZ, pColTimestampLTZPrec9, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_BLOB", OracleDbType.Blob, pColBlob, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_CLOB", OracleDbType.Clob, pColClob, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NCLOB", OracleDbType.NClob, pColNclob, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("ABSTRACT", OracleDbType.Varchar2, @abstract, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("BASE", OracleDbType.Varchar2, @base, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VOID", OracleDbType.Varchar2, @void, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CLASS", OracleDbType.Varchar2, @class, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("NAMESPACE", OracleDbType.Varchar2, @namespace, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("READONLY", OracleDbType.Varchar2, @readonly, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("PARTIAL", OracleDbType.Varchar2, @partial, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CONST", OracleDbType.Varchar2, @const, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("USING", OracleDbType.Varchar2, @using, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // InsertRow

        // **PROC IGNORED** - .NET cannot send/receive a ROWTYPE type (apart from cursor)
        // public Int64? InsertRow(InsertRowPRowRowType pRow, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send a REF CURSOR type
        // public void ProcTypedCursorIn(ICollection<T_TTableBig> pRefCursor, OracleConnection optionalPreexistingOpenConnection = null)

        // **PROC IGNORED** - .NET cannot send a REF CURSOR type
        // public void ProcTypedCursorInOut(ref ICollection<T_TTableBig> pRefCursor, OracleConnection optionalPreexistingOpenConnection = null)

        public void TruncTable(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_BIG.TRUNC_TABLE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // TruncTable
    } // OdptPkgTableBig

    public sealed partial class OdptPkgTableCsKeyword : Schema.Odpt.OdptAdapter {
        private OdptPkgTableCsKeyword() { }
        private static readonly OdptPkgTableCsKeyword _instance = new OdptPkgTableCsKeyword();
        public static OdptPkgTableCsKeyword Instance { get { return _instance; } }

        public void Proc(String @abstract, String @event, String @new, String @struct, 
                String @as, String @explicit, String @null, String @switch, String @base, String @extern, 
                String @object, String @this, String @bool, String @false, String @operator, String @throw, 
                String @break, String @finally, String @out, String @true, String @byte, String @fixed, 
                String @override, String @try, String @case, String @float, String @params, String @typeof, 
                String @catch, String @for, String @private, String @uint, String @char, String @foreach, 
                String @protected, String @ulong, String @checked, String @goto, String @public, String @unchecked, 
                String @class, String @if, String @readonly, String @unsafe, String @const, String @implicit, 
                String @ref, String @ushort, String @continue, String @in, String @return, String @using, 
                String @decimal, String @int, String @sbyte, String @virtual, String @default, String @interface, 
                String @sealed, String @volatile, String @delegate, String @internal, String @short, String @void, 
                String @do, String @is, String @sizeof, String @while, String @double, String @lock, 
                String @stackalloc, String @else, String @long, String @static, String @enum, String @namespace, 
                String @string, String @dynamic, String @get, String @let, String @partial, String @set, 
                String @value, String @var, String @where, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_CS_KEYWORD.PROC", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("ABSTRACT", OracleDbType.Varchar2, @abstract, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("EVENT", OracleDbType.Varchar2, @event, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("NEW", OracleDbType.Varchar2, @new, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("STRUCT", OracleDbType.Varchar2, @struct, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"as\"", OracleDbType.Varchar2, @as, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("EXPLICIT", OracleDbType.Varchar2, @explicit, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"null\"", OracleDbType.Varchar2, @null, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("SWITCH", OracleDbType.Varchar2, @switch, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("BASE", OracleDbType.Varchar2, @base, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("EXTERN", OracleDbType.Varchar2, @extern, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("OBJECT", OracleDbType.Varchar2, @object, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("THIS", OracleDbType.Varchar2, @this, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("BOOL", OracleDbType.Varchar2, @bool, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("FALSE", OracleDbType.Varchar2, @false, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("OPERATOR", OracleDbType.Varchar2, @operator, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("THROW", OracleDbType.Varchar2, @throw, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("BREAK", OracleDbType.Varchar2, @break, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("FINALLY", OracleDbType.Varchar2, @finally, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("OUT", OracleDbType.Varchar2, @out, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("TRUE", OracleDbType.Varchar2, @true, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("BYTE", OracleDbType.Varchar2, @byte, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("FIXED", OracleDbType.Varchar2, @fixed, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("OVERRIDE", OracleDbType.Varchar2, @override, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("TRY", OracleDbType.Varchar2, @try, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"case\"", OracleDbType.Varchar2, @case, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"float\"", OracleDbType.Varchar2, @float, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("PARAMS", OracleDbType.Varchar2, @params, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("TYPEOF", OracleDbType.Varchar2, @typeof, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CATCH", OracleDbType.Varchar2, @catch, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"for\"", OracleDbType.Varchar2, @for, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("PRIVATE", OracleDbType.Varchar2, @private, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("UINT", OracleDbType.Varchar2, @uint, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"char\"", OracleDbType.Varchar2, @char, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("FOREACH", OracleDbType.Varchar2, @foreach, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("PROTECTED", OracleDbType.Varchar2, @protected, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("ULONG", OracleDbType.Varchar2, @ulong, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CHECKED", OracleDbType.Varchar2, @checked, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"goto\"", OracleDbType.Varchar2, @goto, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"public\"", OracleDbType.Varchar2, @public, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("UNCHECKED", OracleDbType.Varchar2, @unchecked, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CLASS", OracleDbType.Varchar2, @class, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"if\"", OracleDbType.Varchar2, @if, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("READONLY", OracleDbType.Varchar2, @readonly, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("UNSAFE", OracleDbType.Varchar2, @unsafe, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CONST", OracleDbType.Varchar2, @const, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("IMPLICIT", OracleDbType.Varchar2, @implicit, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("REF", OracleDbType.Varchar2, @ref, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("USHORT", OracleDbType.Varchar2, @ushort, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("CONTINUE", OracleDbType.Varchar2, @continue, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"in\"", OracleDbType.Varchar2, @in, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("RETURN", OracleDbType.Varchar2, @return, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("USING", OracleDbType.Varchar2, @using, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"decimal\"", OracleDbType.Varchar2, @decimal, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("INT", OracleDbType.Varchar2, @int, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("SBYTE", OracleDbType.Varchar2, @sbyte, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VIRTUAL", OracleDbType.Varchar2, @virtual, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"default\"", OracleDbType.Varchar2, @default, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("INTERFACE", OracleDbType.Varchar2, @interface, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("SEALED", OracleDbType.Varchar2, @sealed, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VOLATILE", OracleDbType.Varchar2, @volatile, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("DELEGATE", OracleDbType.Varchar2, @delegate, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("INTERNAL", OracleDbType.Varchar2, @internal, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("SHORT", OracleDbType.Varchar2, @short, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VOID", OracleDbType.Varchar2, @void, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("DO", OracleDbType.Varchar2, @do, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"is\"", OracleDbType.Varchar2, @is, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("SIZEOF", OracleDbType.Varchar2, @sizeof, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("WHILE", OracleDbType.Varchar2, @while, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("DOUBLE", OracleDbType.Varchar2, @double, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"lock\"", OracleDbType.Varchar2, @lock, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("STACKALLOC", OracleDbType.Varchar2, @stackalloc, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"else\"", OracleDbType.Varchar2, @else, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"long\"", OracleDbType.Varchar2, @long, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("STATIC", OracleDbType.Varchar2, @static, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("ENUM", OracleDbType.Varchar2, @enum, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("NAMESPACE", OracleDbType.Varchar2, @namespace, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("STRING", OracleDbType.Varchar2, @string, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("DYNAMIC", OracleDbType.Varchar2, @dynamic, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("GET", OracleDbType.Varchar2, @get, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("LET", OracleDbType.Varchar2, @let, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("PARTIAL", OracleDbType.Varchar2, @partial, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"set\"", OracleDbType.Varchar2, @set, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VALUE", OracleDbType.Varchar2, @value, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("VAR", OracleDbType.Varchar2, @var, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("\"where\"", OracleDbType.Varchar2, @where, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // Proc
    } // OdptPkgTableCsKeyword

    public sealed partial class OdptPkgTableNumber : Schema.Odpt.OdptAdapter {
        private OdptPkgTableNumber() { }
        private static readonly OdptPkgTableNumber _instance = new OdptPkgTableNumber();
        public static OdptPkgTableNumber Instance { get { return _instance; } }

        public interface ITTableNumber {
            Int64? Id { set; }
            Decimal? ColNumber { set; }
            SByte? ColNumber1 { set; }
            SByte? ColNumber2 { set; }
            Int16? ColNumber3 { set; }
            Int16? ColNumber4 { set; }
            Int32? ColNumber5 { set; }
            Int32? ColNumber6 { set; }
            Int32? ColNumber7 { set; }
            Int32? ColNumber8 { set; }
            Int32? ColNumber9 { set; }
            Int64? ColNumber10 { set; }
            Int64? ColNumber18 { set; }
            Int64? ColNumber19 { set; }
            Int64? ColNumber38 { set; }
            SByte? ColNumber1Scale0 { set; }
            SByte? ColNumber2Scale0 { set; }
            Int16? ColNumber3Scale0 { set; }
            Int16? ColNumber4Scale0 { set; }
            Int32? ColNumber5Scale0 { set; }
            Int32? ColNumber9Scale0 { set; }
            Int64? ColNumber10Scale0 { set; }
            Int64? ColNumber18Scale0 { set; }
            Int64? ColNumber19Scale0 { set; }
            Int64? ColNumber28Scale0 { set; }
            Int64? ColNumber29Scale0 { set; }
            Int64? ColNumber38Scale0 { set; }
            Decimal? ColNumber2Scale1 { set; }
            Decimal? ColNumber5Scale3 { set; }
            Decimal? ColNumber15Scale11 { set; }
            Decimal? ColNumber31Scale21 { set; }
            Decimal? ColNumber38Scale37 { set; }
            Decimal? ColNumberLast { set; }
        } // ITTableNumber

        [DataContract(Namespace="http://odpt.business.com")][Serializable()]
        public abstract partial class TTableNumber : Schema.Odpt.OdptPackageRecord, ITTableNumber {
            private Byte propertyToEnsuresPartialClassNamesAreUniqueAtCompileTime { get; set; }
            [DataMember(Order=0, IsRequired=false)][XmlElement(Order=0, IsNullable=true)]
            public virtual Int64? Id { get { return this.id; } set { this.id = value; } } protected Int64? id;
            [DataMember(Order=1, IsRequired=false)][XmlElement(Order=1, IsNullable=true)]
            public virtual Decimal? ColNumber { get { return this.colNumber; } set { this.colNumber = value; } } protected Decimal? colNumber;
            [DataMember(Order=2, IsRequired=false)][XmlElement(Order=2, IsNullable=true)]
            public virtual SByte? ColNumber1 { get { return this.colNumber1; } set { this.colNumber1 = value; } } protected SByte? colNumber1;
            [DataMember(Order=3, IsRequired=false)][XmlElement(Order=3, IsNullable=true)]
            public virtual SByte? ColNumber2 { get { return this.colNumber2; } set { this.colNumber2 = value; } } protected SByte? colNumber2;
            [DataMember(Order=4, IsRequired=false)][XmlElement(Order=4, IsNullable=true)]
            public virtual Int16? ColNumber3 { get { return this.colNumber3; } set { this.colNumber3 = value; } } protected Int16? colNumber3;
            [DataMember(Order=5, IsRequired=false)][XmlElement(Order=5, IsNullable=true)]
            public virtual Int16? ColNumber4 { get { return this.colNumber4; } set { this.colNumber4 = value; } } protected Int16? colNumber4;
            [DataMember(Order=6, IsRequired=false)][XmlElement(Order=6, IsNullable=true)]
            public virtual Int32? ColNumber5 { get { return this.colNumber5; } set { this.colNumber5 = value; } } protected Int32? colNumber5;
            [DataMember(Order=7, IsRequired=false)][XmlElement(Order=7, IsNullable=true)]
            public virtual Int32? ColNumber6 { get { return this.colNumber6; } set { this.colNumber6 = value; } } protected Int32? colNumber6;
            [DataMember(Order=8, IsRequired=false)][XmlElement(Order=8, IsNullable=true)]
            public virtual Int32? ColNumber7 { get { return this.colNumber7; } set { this.colNumber7 = value; } } protected Int32? colNumber7;
            [DataMember(Order=9, IsRequired=false)][XmlElement(Order=9, IsNullable=true)]
            public virtual Int32? ColNumber8 { get { return this.colNumber8; } set { this.colNumber8 = value; } } protected Int32? colNumber8;
            [DataMember(Order=10, IsRequired=false)][XmlElement(Order=10, IsNullable=true)]
            public virtual Int32? ColNumber9 { get { return this.colNumber9; } set { this.colNumber9 = value; } } protected Int32? colNumber9;
            [DataMember(Order=11, IsRequired=false)][XmlElement(Order=11, IsNullable=true)]
            public virtual Int64? ColNumber10 { get { return this.colNumber10; } set { this.colNumber10 = value; } } protected Int64? colNumber10;
            [DataMember(Order=12, IsRequired=false)][XmlElement(Order=12, IsNullable=true)]
            public virtual Int64? ColNumber18 { get { return this.colNumber18; } set { this.colNumber18 = value; } } protected Int64? colNumber18;
            [DataMember(Order=13, IsRequired=false)][XmlElement(Order=13, IsNullable=true)]
            public virtual Int64? ColNumber19 { get { return this.colNumber19; } set { this.colNumber19 = value; } } protected Int64? colNumber19;
            [DataMember(Order=14, IsRequired=false)][XmlElement(Order=14, IsNullable=true)]
            public virtual Int64? ColNumber38 { get { return this.colNumber38; } set { this.colNumber38 = value; } } protected Int64? colNumber38;
            [DataMember(Order=15, IsRequired=false)][XmlElement(Order=15, IsNullable=true)]
            public virtual SByte? ColNumber1Scale0 { get { return this.colNumber1Scale0; } set { this.colNumber1Scale0 = value; } } protected SByte? colNumber1Scale0;
            [DataMember(Order=16, IsRequired=false)][XmlElement(Order=16, IsNullable=true)]
            public virtual SByte? ColNumber2Scale0 { get { return this.colNumber2Scale0; } set { this.colNumber2Scale0 = value; } } protected SByte? colNumber2Scale0;
            [DataMember(Order=17, IsRequired=false)][XmlElement(Order=17, IsNullable=true)]
            public virtual Int16? ColNumber3Scale0 { get { return this.colNumber3Scale0; } set { this.colNumber3Scale0 = value; } } protected Int16? colNumber3Scale0;
            [DataMember(Order=18, IsRequired=false)][XmlElement(Order=18, IsNullable=true)]
            public virtual Int16? ColNumber4Scale0 { get { return this.colNumber4Scale0; } set { this.colNumber4Scale0 = value; } } protected Int16? colNumber4Scale0;
            [DataMember(Order=19, IsRequired=false)][XmlElement(Order=19, IsNullable=true)]
            public virtual Int32? ColNumber5Scale0 { get { return this.colNumber5Scale0; } set { this.colNumber5Scale0 = value; } } protected Int32? colNumber5Scale0;
            [DataMember(Order=20, IsRequired=false)][XmlElement(Order=20, IsNullable=true)]
            public virtual Int32? ColNumber9Scale0 { get { return this.colNumber9Scale0; } set { this.colNumber9Scale0 = value; } } protected Int32? colNumber9Scale0;
            [DataMember(Order=21, IsRequired=false)][XmlElement(Order=21, IsNullable=true)]
            public virtual Int64? ColNumber10Scale0 { get { return this.colNumber10Scale0; } set { this.colNumber10Scale0 = value; } } protected Int64? colNumber10Scale0;
            [DataMember(Order=22, IsRequired=false)][XmlElement(Order=22, IsNullable=true)]
            public virtual Int64? ColNumber18Scale0 { get { return this.colNumber18Scale0; } set { this.colNumber18Scale0 = value; } } protected Int64? colNumber18Scale0;
            [DataMember(Order=23, IsRequired=false)][XmlElement(Order=23, IsNullable=true)]
            public virtual Int64? ColNumber19Scale0 { get { return this.colNumber19Scale0; } set { this.colNumber19Scale0 = value; } } protected Int64? colNumber19Scale0;
            [DataMember(Order=24, IsRequired=false)][XmlElement(Order=24, IsNullable=true)]
            public virtual Int64? ColNumber28Scale0 { get { return this.colNumber28Scale0; } set { this.colNumber28Scale0 = value; } } protected Int64? colNumber28Scale0;
            [DataMember(Order=25, IsRequired=false)][XmlElement(Order=25, IsNullable=true)]
            public virtual Int64? ColNumber29Scale0 { get { return this.colNumber29Scale0; } set { this.colNumber29Scale0 = value; } } protected Int64? colNumber29Scale0;
            [DataMember(Order=26, IsRequired=false)][XmlElement(Order=26, IsNullable=true)]
            public virtual Int64? ColNumber38Scale0 { get { return this.colNumber38Scale0; } set { this.colNumber38Scale0 = value; } } protected Int64? colNumber38Scale0;
            [DataMember(Order=27, IsRequired=false)][XmlElement(Order=27, IsNullable=true)]
            public virtual Decimal? ColNumber2Scale1 { get { return this.colNumber2Scale1; } set { this.colNumber2Scale1 = value; } } protected Decimal? colNumber2Scale1;
            [DataMember(Order=28, IsRequired=false)][XmlElement(Order=28, IsNullable=true)]
            public virtual Decimal? ColNumber5Scale3 { get { return this.colNumber5Scale3; } set { this.colNumber5Scale3 = value; } } protected Decimal? colNumber5Scale3;
            [DataMember(Order=29, IsRequired=false)][XmlElement(Order=29, IsNullable=true)]
            public virtual Decimal? ColNumber15Scale11 { get { return this.colNumber15Scale11; } set { this.colNumber15Scale11 = value; } } protected Decimal? colNumber15Scale11;
            [DataMember(Order=30, IsRequired=false)][XmlElement(Order=30, IsNullable=true)]
            public virtual Decimal? ColNumber31Scale21 { get { return this.colNumber31Scale21; } set { this.colNumber31Scale21 = value; } } protected Decimal? colNumber31Scale21;
            [DataMember(Order=31, IsRequired=false)][XmlElement(Order=31, IsNullable=true)]
            public virtual Decimal? ColNumber38Scale37 { get { return this.colNumber38Scale37; } set { this.colNumber38Scale37 = value; } } protected Decimal? colNumber38Scale37;
            [DataMember(Order=32, IsRequired=false)][XmlElement(Order=32, IsNullable=true)]
            public virtual Decimal? ColNumberLast { get { return this.colNumberLast; } set { this.colNumberLast = value; } } protected Decimal? colNumberLast;
        } // TTableNumber

        public ICollection<T_TTableNumber> ReadResultITTableNumber<T_TTableNumber>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where T_TTableNumber : class, ITTableNumber, new()   {
            ICollection<T_TTableNumber> __ret = new List<T_TTableNumber>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    T_TTableNumber obj = new T_TTableNumber();
                    if (!rdr.IsDBNull(0)) obj.Id = Convert.ToInt64(rdr.GetValue(0));
                    if (!rdr.IsDBNull(1)) obj.ColNumber = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(1), 28);
                    if (!rdr.IsDBNull(2)) obj.ColNumber1 = Convert.ToSByte(rdr.GetValue(2));
                    if (!rdr.IsDBNull(3)) obj.ColNumber2 = Convert.ToSByte(rdr.GetValue(3));
                    if (!rdr.IsDBNull(4)) obj.ColNumber3 = Convert.ToInt16(rdr.GetValue(4));
                    if (!rdr.IsDBNull(5)) obj.ColNumber4 = Convert.ToInt16(rdr.GetValue(5));
                    if (!rdr.IsDBNull(6)) obj.ColNumber5 = Convert.ToInt32(rdr.GetValue(6));
                    if (!rdr.IsDBNull(7)) obj.ColNumber6 = Convert.ToInt32(rdr.GetValue(7));
                    if (!rdr.IsDBNull(8)) obj.ColNumber7 = Convert.ToInt32(rdr.GetValue(8));
                    if (!rdr.IsDBNull(9)) obj.ColNumber8 = Convert.ToInt32(rdr.GetValue(9));
                    if (!rdr.IsDBNull(10)) obj.ColNumber9 = Convert.ToInt32(rdr.GetValue(10));
                    if (!rdr.IsDBNull(11)) obj.ColNumber10 = Convert.ToInt64(rdr.GetValue(11));
                    if (!rdr.IsDBNull(12)) obj.ColNumber18 = Convert.ToInt64(rdr.GetValue(12));
                    if (!rdr.IsDBNull(13)) obj.ColNumber19 = Convert.ToInt64(rdr.GetValue(13));
                    if (!rdr.IsDBNull(14)) obj.ColNumber38 = Convert.ToInt64(rdr.GetValue(14));
                    if (!rdr.IsDBNull(15)) obj.ColNumber1Scale0 = Convert.ToSByte(rdr.GetValue(15));
                    if (!rdr.IsDBNull(16)) obj.ColNumber2Scale0 = Convert.ToSByte(rdr.GetValue(16));
                    if (!rdr.IsDBNull(17)) obj.ColNumber3Scale0 = Convert.ToInt16(rdr.GetValue(17));
                    if (!rdr.IsDBNull(18)) obj.ColNumber4Scale0 = Convert.ToInt16(rdr.GetValue(18));
                    if (!rdr.IsDBNull(19)) obj.ColNumber5Scale0 = Convert.ToInt32(rdr.GetValue(19));
                    if (!rdr.IsDBNull(20)) obj.ColNumber9Scale0 = Convert.ToInt32(rdr.GetValue(20));
                    if (!rdr.IsDBNull(21)) obj.ColNumber10Scale0 = Convert.ToInt64(rdr.GetValue(21));
                    if (!rdr.IsDBNull(22)) obj.ColNumber18Scale0 = Convert.ToInt64(rdr.GetValue(22));
                    if (!rdr.IsDBNull(23)) obj.ColNumber19Scale0 = Convert.ToInt64(rdr.GetValue(23));
                    if (!rdr.IsDBNull(24)) obj.ColNumber28Scale0 = Convert.ToInt64(rdr.GetValue(24));
                    if (!rdr.IsDBNull(25)) obj.ColNumber29Scale0 = Convert.ToInt64(rdr.GetValue(25));
                    if (!rdr.IsDBNull(26)) obj.ColNumber38Scale0 = Convert.ToInt64(rdr.GetValue(26));
                    if (!rdr.IsDBNull(27)) obj.ColNumber2Scale1 = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(27), 28);
                    if (!rdr.IsDBNull(28)) obj.ColNumber5Scale3 = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(28), 28);
                    if (!rdr.IsDBNull(29)) obj.ColNumber15Scale11 = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(29), 28);
                    if (!rdr.IsDBNull(30)) obj.ColNumber31Scale21 = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(30), 28);
                    if (!rdr.IsDBNull(31)) obj.ColNumber38Scale37 = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(31), 28);
                    if (!rdr.IsDBNull(32)) obj.ColNumberLast = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(32), 28);
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITTableNumber

        public interface ITTableNumberDec {
            Int64? Id { set; }
            Decimal? ColNumber { set; }
            Decimal? ColNumber2Scale1 { set; }
            Decimal? ColNumber5Scale3 { set; }
            Decimal? ColNumber15Scale11 { set; }
            Decimal? ColNumber31Scale21 { set; }
            Decimal? ColNumber38Scale37 { set; }
            Decimal? ColNumberLast { set; }
        } // ITTableNumberDec

        [DataContract(Namespace="http://odpt.business.com")][Serializable()]
        public abstract partial class TTableNumberDec : Schema.Odpt.OdptPackageRecord, ITTableNumberDec {
            private Byte propertyToEnsuresPartialClassNamesAreUniqueAtCompileTime { get; set; }
            [DataMember(Order=0, IsRequired=false)][XmlElement(Order=0, IsNullable=true)]
            public virtual Int64? Id { get { return this.id; } set { this.id = value; } } protected Int64? id;
            [DataMember(Order=1, IsRequired=false)][XmlElement(Order=1, IsNullable=true)]
            public virtual Decimal? ColNumber { get { return this.colNumber; } set { this.colNumber = value; } } protected Decimal? colNumber;
            [DataMember(Order=2, IsRequired=false)][XmlElement(Order=2, IsNullable=true)]
            public virtual Decimal? ColNumber2Scale1 { get { return this.colNumber2Scale1; } set { this.colNumber2Scale1 = value; } } protected Decimal? colNumber2Scale1;
            [DataMember(Order=3, IsRequired=false)][XmlElement(Order=3, IsNullable=true)]
            public virtual Decimal? ColNumber5Scale3 { get { return this.colNumber5Scale3; } set { this.colNumber5Scale3 = value; } } protected Decimal? colNumber5Scale3;
            [DataMember(Order=4, IsRequired=false)][XmlElement(Order=4, IsNullable=true)]
            public virtual Decimal? ColNumber15Scale11 { get { return this.colNumber15Scale11; } set { this.colNumber15Scale11 = value; } } protected Decimal? colNumber15Scale11;
            [DataMember(Order=5, IsRequired=false)][XmlElement(Order=5, IsNullable=true)]
            public virtual Decimal? ColNumber31Scale21 { get { return this.colNumber31Scale21; } set { this.colNumber31Scale21 = value; } } protected Decimal? colNumber31Scale21;
            [DataMember(Order=6, IsRequired=false)][XmlElement(Order=6, IsNullable=true)]
            public virtual Decimal? ColNumber38Scale37 { get { return this.colNumber38Scale37; } set { this.colNumber38Scale37 = value; } } protected Decimal? colNumber38Scale37;
            [DataMember(Order=7, IsRequired=false)][XmlElement(Order=7, IsNullable=true)]
            public virtual Decimal? ColNumberLast { get { return this.colNumberLast; } set { this.colNumberLast = value; } } protected Decimal? colNumberLast;
        } // TTableNumberDec

        public ICollection<T_TTableNumberDec> ReadResultITTableNumberDec<T_TTableNumberDec>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where T_TTableNumberDec : class, ITTableNumberDec, new()   {
            ICollection<T_TTableNumberDec> __ret = new List<T_TTableNumberDec>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    T_TTableNumberDec obj = new T_TTableNumberDec();
                    if (!rdr.IsDBNull(0)) obj.Id = Convert.ToInt64(rdr.GetValue(0));
                    if (!rdr.IsDBNull(1)) obj.ColNumber = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(1), 28);
                    if (!rdr.IsDBNull(2)) obj.ColNumber2Scale1 = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(2), 28);
                    if (!rdr.IsDBNull(3)) obj.ColNumber5Scale3 = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(3), 28);
                    if (!rdr.IsDBNull(4)) obj.ColNumber15Scale11 = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(4), 28);
                    if (!rdr.IsDBNull(5)) obj.ColNumber31Scale21 = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(5), 28);
                    if (!rdr.IsDBNull(6)) obj.ColNumber38Scale37 = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(6), 28);
                    if (!rdr.IsDBNull(7)) obj.ColNumberLast = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(7), 28);
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITTableNumberDec

        public void DeleteRow(Int64? pId, OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.DELETE_ROW", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("P_ID", OracleDbType.Int64, pId, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // DeleteRow

        public Int64? GetRowsTypedOut<T_TTableNumber>(out ICollection<T_TTableNumber> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableNumber : class, new() {
            Int64? __ret = null; pRefCursor = new List<T_TTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_TTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut

        public Int64? GetRowsTypedOut<T_TTableNumber>(out ICollection<T_TTableNumber> pRefCursor, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableNumber : class, ITTableNumber, new() {
            Int64? __ret = null; pRefCursor = new List<T_TTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableNumber<T_TTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut

        public Int64? GetRowsTypedOut2<T_TTableNumber, T_TTableNumberDec>(out ICollection<T_TTableNumber> pRefCursor, out ICollection<T_TTableNumberDec> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableNumber : class, new()
                where T_TTableNumberDec : class, new() {
            Int64? __ret = null; pRefCursor = new List<T_TTableNumber>(); pRefCursor2 = new List<T_TTableNumberDec>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_TTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_TTableNumberDec>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2

        public Int64? GetRowsTypedOut2<T_TTableNumber, T_TTableNumberDec>(out ICollection<T_TTableNumber> pRefCursor, out ICollection<T_TTableNumberDec> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableNumber : class, ITTableNumber, new()
                where T_TTableNumberDec : class, ITTableNumberDec, new() {
            Int64? __ret = null; pRefCursor = new List<T_TTableNumber>(); pRefCursor2 = new List<T_TTableNumberDec>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableNumber<T_TTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = ReadResultITTableNumberDec<T_TTableNumberDec>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2

        public ICollection<T_TTableNumber> GetRowsTypedOut2Ret<T_TTableNumber, T_TTableNumberDec>(out ICollection<T_TTableNumber> pRefCursor, out ICollection<T_TTableNumberDec> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableNumber : class, new()
                where T_TTableNumberDec : class, new() {
            ICollection<T_TTableNumber> __ret = new List<T_TTableNumber>(); pRefCursor = new List<T_TTableNumber>(); pRefCursor2 = new List<T_TTableNumberDec>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_TTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_TTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_TTableNumberDec>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2Ret

        public ICollection<T_TTableNumber> GetRowsTypedOut2Ret<T_TTableNumber, T_TTableNumberDec>(out ICollection<T_TTableNumber> pRefCursor, out ICollection<T_TTableNumberDec> pRefCursor2, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableNumber : class, ITTableNumber, new()
                where T_TTableNumberDec : class, ITTableNumberDec, new() {
            ICollection<T_TTableNumber> __ret = new List<T_TTableNumber>(); pRefCursor = new List<T_TTableNumber>(); pRefCursor2 = new List<T_TTableNumberDec>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableNumber<T_TTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableNumber<T_TTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = ReadResultITTableNumberDec<T_TTableNumberDec>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOut2Ret

        public ICollection<T_TTableNumber> GetRowsTypedOutRet<T_TTableNumber>(out ICollection<T_TTableNumber> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableNumber : class, new() {
            ICollection<T_TTableNumber> __ret = new List<T_TTableNumber>(); pRefCursor = new List<T_TTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_TTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_TTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOutRet

        public ICollection<T_TTableNumber> GetRowsTypedOutRet<T_TTableNumber>(out ICollection<T_TTableNumber> pRefCursor, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableNumber : class, ITTableNumber, new() {
            ICollection<T_TTableNumber> __ret = new List<T_TTableNumber>(); pRefCursor = new List<T_TTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableNumber<T_TTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = ReadResultITTableNumber<T_TTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedOutRet

        public ICollection<T_TTableNumber> GetRowsTypedRet<T_TTableNumber>(
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableNumber : class, new() {
            ICollection<T_TTableNumber> __ret = new List<T_TTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_TTableNumber>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet

        public ICollection<T_TTableNumber> GetRowsTypedRet<T_TTableNumber>(UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableNumber : class, ITTableNumber, new() {
            ICollection<T_TTableNumber> __ret = new List<T_TTableNumber>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableNumber<T_TTableNumber>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet

        public Int64? GetRowsUntypedOut<T_pRefCursorUntyped>(out ICollection<T_pRefCursorUntyped> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where T_pRefCursorUntyped : class, new() {
            Int64? __ret = null; pRefCursor = new List<T_pRefCursorUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_pRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut

        public Int64? GetRowsUntypedOut(out DataTable pRefCursor, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pRefCursor = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut

        public Int64? GetRowsUntypedOut2<T_pRefCursorUntyped, T_pRefCursor2Untyped>(out ICollection<T_pRefCursorUntyped> pRefCursor, out ICollection<T_pRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_pRefCursorUntyped : class, new()
                where T_pRefCursor2Untyped : class, new() {
            Int64? __ret = null; pRefCursor = new List<T_pRefCursorUntyped>(); pRefCursor2 = new List<T_pRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_pRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_pRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2

        public Int64? GetRowsUntypedOut2(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT2", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2

        public ICollection<T_returnUntyped> GetRowsUntypedOut2Ret<T_returnUntyped, T_pRefCursorUntyped, T_pRefCursor2Untyped>(out ICollection<T_pRefCursorUntyped> pRefCursor, out ICollection<T_pRefCursor2Untyped> pRefCursor2, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_returnUntyped : class, new()
                where T_pRefCursorUntyped : class, new()
                where T_pRefCursor2Untyped : class, new() {
            ICollection<T_returnUntyped> __ret = new List<T_returnUntyped>(); pRefCursor = new List<T_pRefCursorUntyped>(); pRefCursor2 = new List<T_pRefCursor2Untyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_returnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_pRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult<T_pRefCursor2Untyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2Ret

        public DataTable GetRowsUntypedOut2Ret(out DataTable pRefCursor, out DataTable pRefCursor2, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; pRefCursor2 = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT2_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR2", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR2"].Value).GetDataReader()) {
                            pRefCursor2 = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOut2Ret

        public ICollection<T_returnUntyped> GetRowsUntypedOutRet<T_returnUntyped, T_pRefCursorUntyped>(out ICollection<T_pRefCursorUntyped> pRefCursor, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where T_returnUntyped : class, new()
                where T_pRefCursorUntyped : class, new() {
            ICollection<T_returnUntyped> __ret = new List<T_returnUntyped>(); pRefCursor = new List<T_pRefCursorUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_returnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult<T_pRefCursorUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOutRet

        public DataTable GetRowsUntypedOutRet(out DataTable pRefCursor, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; pRefCursor = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_OUT_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_REF_CURSOR", OracleDbType.RefCursor, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (!((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["P_REF_CURSOR"].Value).GetDataReader()) {
                            pRefCursor = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedOutRet

        public ICollection<T_returnUntyped> GetRowsUntypedRet<T_returnUntyped>(
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_returnUntyped : class, new() {
            ICollection<T_returnUntyped> __ret = new List<T_returnUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_returnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedRet

        public DataTable GetRowsUntypedRet(Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.GET_ROWS_UNTYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedRet

        public Int64? InsertRow(Decimal? pColNumber, SByte? pColNumber1, SByte? pColNumber2, Int16? pColNumber3, 
                Int16? pColNumber4, Int32? pColNumber5, Int32? pColNumber6, Int32? pColNumber7, Int32? pColNumber8, Int32? pColNumber9, 
                Int64? pColNumber10, Int64? pColNumber18, Int64? pColNumber19, Int64? pColNumber38, SByte? pColNumber1Scale0, SByte? pColNumber2Scale0, 
                Int16? pColNumber3Scale0, Int16? pColNumber4Scale0, Int32? pColNumber5Scale0, Int32? pColNumber9Scale0, Int64? pColNumber10Scale0, Int64? pColNumber18Scale0, 
                Int64? pColNumber19Scale0, Int64? pColNumber28Scale0, Int64? pColNumber29Scale0, Int64? pColNumber38Scale0, Decimal? pColNumber2Scale1, Decimal? pColNumber5Scale3, 
                Decimal? pColNumber15Scale11, Decimal? pColNumber31Scale21, Decimal? pColNumber38Scale37, Decimal? pColNumberLast, OracleConnection optionalPreexistingOpenConnection = null) {
            Int64? __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.INSERT_ROW", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.Int64, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER", OracleDbType.Decimal, pColNumber, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_1", OracleDbType.Byte, pColNumber1, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_2", OracleDbType.Byte, pColNumber2, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_3", OracleDbType.Int16, pColNumber3, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_4", OracleDbType.Int16, pColNumber4, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_5", OracleDbType.Int32, pColNumber5, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_6", OracleDbType.Int32, pColNumber6, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_7", OracleDbType.Int32, pColNumber7, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_8", OracleDbType.Int32, pColNumber8, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_9", OracleDbType.Int32, pColNumber9, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_10", OracleDbType.Int64, pColNumber10, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_18", OracleDbType.Int64, pColNumber18, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_19", OracleDbType.Int64, pColNumber19, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_38", OracleDbType.Int64, pColNumber38, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_1_SCALE_0", OracleDbType.Byte, pColNumber1Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_2_SCALE_0", OracleDbType.Byte, pColNumber2Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_3_SCALE_0", OracleDbType.Int16, pColNumber3Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_4_SCALE_0", OracleDbType.Int16, pColNumber4Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_5_SCALE_0", OracleDbType.Int32, pColNumber5Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_9_SCALE_0", OracleDbType.Int32, pColNumber9Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_10_SCALE_0", OracleDbType.Int64, pColNumber10Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_18_SCALE_0", OracleDbType.Int64, pColNumber18Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_19_SCALE_0", OracleDbType.Int64, pColNumber19Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_28_SCALE_0", OracleDbType.Int64, pColNumber28Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_29_SCALE_0", OracleDbType.Int64, pColNumber29Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_38_SCALE_0", OracleDbType.Int64, pColNumber38Scale0, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_2_SCALE_1", OracleDbType.Decimal, pColNumber2Scale1, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_5_SCALE_3", OracleDbType.Decimal, pColNumber5Scale3, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_15_SCALE_11", OracleDbType.Decimal, pColNumber15Scale11, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_31_SCALE_21", OracleDbType.Decimal, pColNumber31Scale21, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_38_SCALE_37", OracleDbType.Decimal, pColNumber38Scale37, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_COL_NUMBER_LAST", OracleDbType.Decimal, pColNumberLast, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    __ret = __cmd.Parameters["!RETURN"].Status == OracleParameterStatus.NullFetched
                        ? (Int64?)null
                        : Convert.ToInt64(__cmd.Parameters["!RETURN"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // InsertRow

        // **PROC IGNORED** - .NET cannot send/receive a ROWTYPE type (apart from cursor)
        // public Int64? InsertRow(InsertRowPRowRowType pRow, OracleConnection optionalPreexistingOpenConnection = null)

        public void TruncTable(OracleConnection optionalPreexistingOpenConnection = null) {
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.ODPT_PKG_TABLE_NUMBER.TRUNC_TABLE", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
        } // TruncTable
    } // OdptPkgTableNumber

    public sealed partial class XmplPkgExample : Schema.Odpt.OdptAdapter {
        private XmplPkgExample() { }
        private static readonly XmplPkgExample _instance = new XmplPkgExample();
        public static XmplPkgExample Instance { get { return _instance; } }

        public interface ITTableBigPartial {
            Int64? Id { set; }
            Int64? ColInteger { set; }
            Decimal? ColNumber { set; }
            String ColVarchar2Max { set; }
            DateTime? ColDate { set; }
            DateTime? ColTimestamp { set; }
        } // ITTableBigPartial

        [DataContract(Namespace="http://odpt.business.com")][Serializable()]
        public abstract partial class TTableBigPartial : Schema.Odpt.OdptPackageRecord, ITTableBigPartial {
            private Byte propertyToEnsuresPartialClassNamesAreUniqueAtCompileTime { get; set; }
            [DataMember(Order=0, IsRequired=false)][XmlElement(Order=0, IsNullable=true)]
            public virtual Int64? Id { get { return this.id; } set { this.id = value; } } protected Int64? id;
            [DataMember(Order=1, IsRequired=false)][XmlElement(Order=1, IsNullable=true)]
            public virtual Int64? ColInteger { get { return this.colInteger; } set { this.colInteger = value; } } protected Int64? colInteger;
            [DataMember(Order=2, IsRequired=false)][XmlElement(Order=2, IsNullable=true)]
            public virtual Decimal? ColNumber { get { return this.colNumber; } set { this.colNumber = value; } } protected Decimal? colNumber;
            [DataMember(Order=3, IsRequired=false)][XmlElement(Order=3, IsNullable=true)]
            public virtual String ColVarchar2Max { get { return this.colVarchar2Max; } set { this.colVarchar2Max = value; } } protected String colVarchar2Max;
            [DataMember(Order=4, IsRequired=false)][XmlElement(Order=4, IsNullable=true)]
            public virtual DateTime? ColDate { get { return this.colDate; } set { this.colDate = value; } } protected DateTime? colDate;
            [DataMember(Order=5, IsRequired=false)][XmlElement(Order=5, IsNullable=true)]
            public virtual DateTime? ColTimestamp { get { return this.colTimestamp; } set { this.colTimestamp = value; } } protected DateTime? colTimestamp;
        } // TTableBigPartial

        public ICollection<T_TTableBigPartial> ReadResultITTableBigPartial<T_TTableBigPartial>(OracleDataReader rdr, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null)
                where T_TTableBigPartial : class, ITTableBigPartial, new()   {
            ICollection<T_TTableBigPartial> __ret = new List<T_TTableBigPartial>();
            if (rdr != null && rdr.HasRows) {
                while (rdr.Read()) {
                    T_TTableBigPartial obj = new T_TTableBigPartial();
                    if (!rdr.IsDBNull(0)) obj.Id = Convert.ToInt64(rdr.GetValue(0));
                    if (!rdr.IsDBNull(1)) obj.ColInteger = Convert.ToInt64(rdr.GetValue(1));
                    if (!rdr.IsDBNull(2)) obj.ColNumber = (Decimal?)OracleDecimal.SetPrecision(rdr.GetOracleDecimal(2), 28);
                    if (!rdr.IsDBNull(3)) obj.ColVarchar2Max = Convert.ToString(rdr.GetValue(3));
                    if (!rdr.IsDBNull(4)) obj.ColDate = Convert.ToDateTime(rdr.GetValue(4));
                    if (!rdr.IsDBNull(5)) obj.ColTimestamp = Convert.ToDateTime(rdr.GetValue(5));
                    __ret.Add(obj);
                    if (optionalMaxNumberRowsToReadFromAnyCursor != null && __ret.Count >= optionalMaxNumberRowsToReadFromAnyCursor) break;
                }
            }
            return __ret;
        } // ReadResultITTableBigPartial

        public ICollection<T_TTableBigPartial> GetRowsTypedRet<T_TTableBigPartial>(Decimal? pInNumber, ref String pInOutVarchar2, ref IList<Int64?> pInOutAssocarrayInteger, out DateTime? pOutDate, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBigPartial : class, new() {
            ICollection<T_TTableBigPartial> __ret = new List<T_TTableBigPartial>(); pOutDate = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.XMPL_PKG_EXAMPLE.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER", OracleDbType.Decimal, pInNumber, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_VARCHAR2", OracleDbType.Varchar2, 32767, pInOutVarchar2, ParameterDirection.InputOutput));

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_ASSOCARRAY_INTEGER", OracleDbType.Int64, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT_ASSOCARRAY_INTEGER"].Value = (pInOutAssocarrayInteger == null || pInOutAssocarrayInteger.Count == 0 ? new Int64?[]{} : pInOutAssocarrayInteger.ToArray());
                    __cmd.Parameters["P_IN_OUT_ASSOCARRAY_INTEGER"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters.Add(new OracleParameter("P_OUT_DATE", OracleDbType.Date, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_TTableBigPartial>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    pInOutVarchar2 = __cmd.Parameters["P_IN_OUT_VARCHAR2"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT_VARCHAR2"].Value.ToString());

                    pInOutAssocarrayInteger = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT_ASSOCARRAY_INTEGER"].Value as OracleDecimal[]).Length; _i++)
                        pInOutAssocarrayInteger.Add((__cmd.Parameters["P_IN_OUT_ASSOCARRAY_INTEGER"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_IN_OUT_ASSOCARRAY_INTEGER"].Value as OracleDecimal[])[_i].ToString())));

                    pOutDate = __cmd.Parameters["P_OUT_DATE"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_OUT_DATE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet

        public ICollection<T_TTableBigPartial> GetRowsTypedRet<T_TTableBigPartial>(Decimal? pInNumber, ref String pInOutVarchar2, ref IList<Int64?> pInOutAssocarrayInteger, out DateTime? pOutDate, 
                UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null)
                where T_TTableBigPartial : class, ITTableBigPartial, new() {
            ICollection<T_TTableBigPartial> __ret = new List<T_TTableBigPartial>(); pOutDate = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.XMPL_PKG_EXAMPLE.GET_ROWS_TYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_NUMBER", OracleDbType.Decimal, pInNumber, ParameterDirection.Input));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_VARCHAR2", OracleDbType.Varchar2, 32767, pInOutVarchar2, ParameterDirection.InputOutput));

                    __cmd.Parameters.Add(new OracleParameter("P_IN_OUT_ASSOCARRAY_INTEGER", OracleDbType.Int64, 65535, null, ParameterDirection.InputOutput));
                    __cmd.Parameters["P_IN_OUT_ASSOCARRAY_INTEGER"].Value = (pInOutAssocarrayInteger == null || pInOutAssocarrayInteger.Count == 0 ? new Int64?[]{} : pInOutAssocarrayInteger.ToArray());
                    __cmd.Parameters["P_IN_OUT_ASSOCARRAY_INTEGER"].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
                    __cmd.Parameters.Add(new OracleParameter("P_OUT_DATE", OracleDbType.Date, null, ParameterDirection.Output));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = ReadResultITTableBigPartial<T_TTableBigPartial>(__rdr, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    pInOutVarchar2 = __cmd.Parameters["P_IN_OUT_VARCHAR2"].Status == OracleParameterStatus.NullFetched
                        ? (String)null
                        : Convert.ToString(__cmd.Parameters["P_IN_OUT_VARCHAR2"].Value.ToString());

                    pInOutAssocarrayInteger = new List<Int64?>();
                    for (int _i = 0; _i < (__cmd.Parameters["P_IN_OUT_ASSOCARRAY_INTEGER"].Value as OracleDecimal[]).Length; _i++)
                        pInOutAssocarrayInteger.Add((__cmd.Parameters["P_IN_OUT_ASSOCARRAY_INTEGER"].Value as OracleDecimal[])[_i].IsNull
                            ? (Int64?)null 
                            : Convert.ToInt64(((__cmd.Parameters["P_IN_OUT_ASSOCARRAY_INTEGER"].Value as OracleDecimal[])[_i].ToString())));

                    pOutDate = __cmd.Parameters["P_OUT_DATE"].Status == OracleParameterStatus.NullFetched
                        ? (DateTime?)null
                        : Convert.ToDateTime(__cmd.Parameters["P_OUT_DATE"].Value.ToString());
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsTypedRet

        public ICollection<T_returnUntyped> GetRowsUntypedRet<T_returnUntyped>(Int64? pInInteger, 
                bool mapColumnToObjectPropertyByPosition = false, bool allowUnmappedColumnsToBeExcluded = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, 
                OracleConnection optionalPreexistingOpenConnection = null)
                where T_returnUntyped : class, new() {
            ICollection<T_returnUntyped> __ret = new List<T_returnUntyped>(); 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.XMPL_PKG_EXAMPLE.GET_ROWS_UNTYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_INTEGER", OracleDbType.Int64, pInInteger, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult<T_returnUntyped>(__rdr, mapColumnToObjectPropertyByPosition, allowUnmappedColumnsToBeExcluded, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedRet

        public DataTable GetRowsUntypedRet(Int64? pInInteger, Boolean convertColumnNameToTitleCaseInCaption = false, UInt32? optionalMaxNumberRowsToReadFromAnyCursor = null, OracleConnection optionalPreexistingOpenConnection = null) {
            DataTable __ret = null; 
            OracleConnection __conn = optionalPreexistingOpenConnection ?? GetConnection();
            try {
                using (OracleCommand __cmd = new OracleCommand("ODPT.XMPL_PKG_EXAMPLE.GET_ROWS_UNTYPED_RET", __conn)) {
                    __cmd.CommandType = CommandType.StoredProcedure;
                    __cmd.BindByName = true;
                    __cmd.Parameters.Add(new OracleParameter("!RETURN", OracleDbType.RefCursor, null, ParameterDirection.ReturnValue));
                    __cmd.Parameters.Add(new OracleParameter("P_IN_INTEGER", OracleDbType.Int64, pInInteger, ParameterDirection.Input));

                    OracleCommandTrace __cmdTrace = IsTracing(__cmd) ? new OracleCommandTrace(__cmd) : null;
                    int __rowsAffected = __cmd.ExecuteNonQuery();
                    if (!((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).IsNull)
                        using (OracleDataReader __rdr = ((OracleRefCursor)__cmd.Parameters["!RETURN"].Value).GetDataReader()) {
                            __ret = Hydrator.ReadResult(__rdr, convertColumnNameToTitleCaseInCaption, optionalMaxNumberRowsToReadFromAnyCursor);
                        } // using OracleDataReader
                    if (__cmdTrace != null) TraceCompletion(__cmdTrace, __ret.Rows.Count);
                } // using OracleCommand
            } finally {
                if (optionalPreexistingOpenConnection == null) {
                    __conn.Close();
                    __conn.Dispose();
                }
            }
            return __ret;
        } // GetRowsUntypedRet
    } // XmplPkgExample
} // Schema.Odpt.Package